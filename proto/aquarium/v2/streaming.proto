// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.

// Author: Sergei Parshev (@sparshev)

syntax = "proto3";

package aquarium.v2;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "aquarium/v2/options_rbac.proto";

option go_package = "github.com/adobe/aquarium-fish/lib/rpc/proto/aquarium/v2;aquariumv2";

// StreamingService handles bidirectional streaming and subscriptions
service StreamingService {
  // Connect establishes a bidirectional stream for RPC requests/responses
  rpc Connect(stream StreamingServiceConnectRequest) returns (stream StreamingServiceConnectResponse) {
    option (access_control) = {
      allowed_roles: ["User"],
    };
  }

  // Subscribe establishes a server stream for database change notifications
  rpc Subscribe(StreamingServiceSubscribeRequest) returns (stream StreamingServiceSubscribeResponse) {
    option (access_control) = {
      allowed_roles: ["User"],
    };
  }
}

// StreamingServiceConnectRequest represents a request sent through the bidirectional stream
message StreamingServiceConnectRequest {
  // Unique request ID for correlation
  string request_id = 1;

  // Type of the request (e.g., "ApplicationServiceCreateRequest")
  string request_type = 2;

  // The actual request data
  google.protobuf.Any request_data = 3;
}

// StreamingServiceConnectResponse represents a response sent through the bidirectional stream
message StreamingServiceConnectResponse {
  // Request ID this response corresponds to
  string request_id = 1;

  // Type of the response (e.g., "ApplicationServiceCreateResponse")
  string response_type = 2;

  // The actual response data
  google.protobuf.Any response_data = 3;

  // Error information if the request failed
  optional StreamError error = 4;
}

// StreamError represents an error in stream processing
message StreamError {
  // Error code (following Connect RPC codes)
  string code = 1;

  // Human readable error message
  string message = 2;
}

// StreamingServiceSubscribeRequest defines what database objects to subscribe to
message StreamingServiceSubscribeRequest {
  // List of object types to subscribe to
  repeated SubscriptionType subscription_types = 1;
}

// StreamingServiceSubscribeResponse represents a database change notification
message StreamingServiceSubscribeResponse {
  // Type of the database object that changed
  SubscriptionType object_type = 1;

  // Type of change (CREATED, UPDATED, REMOVED)
  ChangeType change_type = 2;

  // Timestamp when the change occurred
  google.protobuf.Timestamp timestamp = 3;

  // The actual object data
  google.protobuf.Any object_data = 4;
}

// StreamCreated is sent as the first message when stream channel is created
message StreamCreated {
  // Streaming channel UID to be known by the client
  string stream_uid = 1;
}

// Subscription types for database objects
enum SubscriptionType {
  SUBSCRIPTION_TYPE_UNSPECIFIED = 0;
  SUBSCRIPTION_TYPE_APPLICATION = 1;
  SUBSCRIPTION_TYPE_APPLICATION_STATE = 2;
  SUBSCRIPTION_TYPE_APPLICATION_RESOURCE = 3;
  SUBSCRIPTION_TYPE_APPLICATION_TASK = 4;
  SUBSCRIPTION_TYPE_LABEL = 5;
  SUBSCRIPTION_TYPE_NODE = 6;
  SUBSCRIPTION_TYPE_USER = 7;
  SUBSCRIPTION_TYPE_ROLE = 8;
  SUBSCRIPTION_TYPE_USER_GROUP = 9;
}

// Types of database changes
enum ChangeType {
  CHANGE_TYPE_UNSPECIFIED = 0;
  CHANGE_TYPE_CREATED = 1;
  CHANGE_TYPE_UPDATED = 2;
  CHANGE_TYPE_REMOVED = 3;
}
