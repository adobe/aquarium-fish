// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.

// Author: Sergei Parshev (@sparshev)

syntax = "proto3";

package aquarium.v2;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "aquarium/v2/options_rbac.proto";
import "aquarium/v2/options_streaming.proto";
import "aquarium/v2/options_ui.proto";

option go_package = "github.com/adobe/aquarium-fish/lib/rpc/proto/aquarium/v2;aquariumv2";

// User service handles user management operations
service UserService {
  // Get current user information
  rpc GetMe(UserServiceGetMeRequest) returns (UserServiceGetMeResponse) {
    option (access_control) = {
      no_permission_needed: true,
    };
  }

  // Get list of users
  rpc List(UserServiceListRequest) returns (UserServiceListResponse) {}

  // Get user by name
  rpc Get(UserServiceGetRequest) returns (UserServiceGetResponse) {}

  // Create new user
  rpc Create(UserServiceCreateRequest) returns (UserServiceCreateResponse) {}

  // Update existing user
  rpc Update(UserServiceUpdateRequest) returns (UserServiceUpdateResponse) {
    option (access_control) = {
      additional_actions: ['UpdateAll', 'UpdatePassword', 'UpdateRoles'],
    };
  }

  // Remove user
  rpc Remove(UserServiceRemoveRequest) returns (UserServiceRemoveResponse) {}
}

// User represents a user in the system
//
// Contains user information including roles and permissions. The `admin` user is created during
// the first cluster start and prints credentials to stderr.
//
// Can be created by any node and updated by any node with appropriate permissions.
message User {
  option (ui_config) = { generate_ui: true };
  option (subscribe_config) = { permission_check: "UserServiceGet" };

  string name = 1 [(field_ui_config) = { noedit: true }];
  google.protobuf.Timestamp created_at = 2 [(field_ui_config) = { nocreate: true, noedit: true }];
  google.protobuf.Timestamp updated_at = 3 [(field_ui_config) = { nocreate: true, noedit: true }];

  // Where the hashed password stored
  optional google.protobuf.Struct hash = 4 [(field_ui_config) = { nocreate: true, noedit: true }];
  // Set when the user was generated with no password
  optional string password = 5;
  // User configuration settings
  optional UserConfig config = 6;
  // List of role names assigned to the user
  repeated string roles = 7 [(field_ui_config) = { name: "Roles", autofill: "Role" }];
}

message UserConfig {
  option (ui_config) = { generate_ui: true };

  // Request rate limit per minute
  optional int32 rate_limit = 1;
  // Limits the amount of streams of the same type per user. With 1 (default) user can open 1 Connect and 1 Subscribe stream
  optional int32 streams_limit = 2;
}

message UserServiceGetMeRequest {}

message UserServiceGetMeResponse {
  bool status = 1;
  string message = 2;
  User data = 3;
}

message UserServiceListRequest {}

message UserServiceListResponse {
  bool status = 1;
  string message = 2;
  repeated User data = 3;
}

message UserServiceGetRequest {
  string user_name = 1;
}

message UserServiceGetResponse {
  bool status = 1;
  string message = 2;
  User data = 3;
}

message UserServiceCreateRequest {
  User user = 1;
}

message UserServiceCreateResponse {
  bool status = 1;
  string message = 2;
  User data = 3;
}

message UserServiceUpdateRequest {
  User user = 1;
}

message UserServiceUpdateResponse {
  bool status = 1;
  string message = 2;
  User data = 3;
}

message UserServiceRemoveRequest {
  string user_name = 1;
}

message UserServiceRemoveResponse {
  bool status = 1;
  string message = 2;
}
