// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.

// Author: Sergei Parshev (@sparshev)

// @generated by protoc-gen-es v2.6.2 with parameter "target=ts"
// @generated from file aquarium/v2/user.proto (package aquarium.v2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_aquarium_v2_options_rbac } from "./options_rbac_pb";
import { file_aquarium_v2_options_streaming } from "./options_streaming_pb";
import { file_aquarium_v2_options_ui } from "./options_ui_pb";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file aquarium/v2/user.proto.
 */
export const file_aquarium_v2_user: GenFile = /*@__PURE__*/
  fileDesc("ChZhcXVhcml1bS92Mi91c2VyLnByb3RvEgthcXVhcml1bS52MiLfAgoEVXNlchIUCgRuYW1lGAEgASgJQgaatRgCEAESOAoKY3JlYXRlZF9hdBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCCJq1GAQIARABEjgKCnVwZGF0ZWRfYXQYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgiatRgECAEQARI0CgRoYXNoGAQgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIImrUYBAgBEAFIAIgBARIVCghwYXNzd29yZBgFIAEoCUgBiAEBEiwKBmNvbmZpZxgGIAEoCzIXLmFxdWFyaXVtLnYyLlVzZXJDb25maWdIAogBARIgCgVyb2xlcxgHIAMoCUIRmrUYDRoFUm9sZXMiBFJvbGU6D4q1GAUKA0dldJK1GAIIAUIHCgVfaGFzaEILCglfcGFzc3dvcmRCCQoHX2NvbmZpZyJqCgpVc2VyQ29uZmlnEhcKCnJhdGVfbGltaXQYASABKAVIAIgBARIaCg1zdHJlYW1zX2xpbWl0GAIgASgFSAGIAQE6BpK1GAIIAUINCgtfcmF0ZV9saW1pdEIQCg5fc3RyZWFtc19saW1pdCIZChdVc2VyU2VydmljZUdldE1lUmVxdWVzdCJcChhVc2VyU2VydmljZUdldE1lUmVzcG9uc2USDgoGc3RhdHVzGAEgASgIEg8KB21lc3NhZ2UYAiABKAkSHwoEZGF0YRgDIAEoCzIRLmFxdWFyaXVtLnYyLlVzZXIiGAoWVXNlclNlcnZpY2VMaXN0UmVxdWVzdCJbChdVc2VyU2VydmljZUxpc3RSZXNwb25zZRIOCgZzdGF0dXMYASABKAgSDwoHbWVzc2FnZRgCIAEoCRIfCgRkYXRhGAMgAygLMhEuYXF1YXJpdW0udjIuVXNlciIqChVVc2VyU2VydmljZUdldFJlcXVlc3QSEQoJdXNlcl9uYW1lGAEgASgJIloKFlVzZXJTZXJ2aWNlR2V0UmVzcG9uc2USDgoGc3RhdHVzGAEgASgIEg8KB21lc3NhZ2UYAiABKAkSHwoEZGF0YRgDIAEoCzIRLmFxdWFyaXVtLnYyLlVzZXIiOwoYVXNlclNlcnZpY2VDcmVhdGVSZXF1ZXN0Eh8KBHVzZXIYASABKAsyES5hcXVhcml1bS52Mi5Vc2VyIl0KGVVzZXJTZXJ2aWNlQ3JlYXRlUmVzcG9uc2USDgoGc3RhdHVzGAEgASgIEg8KB21lc3NhZ2UYAiABKAkSHwoEZGF0YRgDIAEoCzIRLmFxdWFyaXVtLnYyLlVzZXIiOwoYVXNlclNlcnZpY2VVcGRhdGVSZXF1ZXN0Eh8KBHVzZXIYASABKAsyES5hcXVhcml1bS52Mi5Vc2VyIl0KGVVzZXJTZXJ2aWNlVXBkYXRlUmVzcG9uc2USDgoGc3RhdHVzGAEgASgIEg8KB21lc3NhZ2UYAiABKAkSHwoEZGF0YRgDIAEoCzIRLmFxdWFyaXVtLnYyLlVzZXIiLQoYVXNlclNlcnZpY2VSZW1vdmVSZXF1ZXN0EhEKCXVzZXJfbmFtZRgBIAEoCSI8ChlVc2VyU2VydmljZVJlbW92ZVJlc3BvbnNlEg4KBnN0YXR1cxgBIAEoCBIPCgdtZXNzYWdlGAIgASgJIoYCCglVc2VyR3JvdXASFAoEbmFtZRgBIAEoCUIGmrUYAhABEjgKCmNyZWF0ZWRfYXQYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgiatRgECAEQARI4Cgp1cGRhdGVkX2F0GAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIImrUYBAgBEAESIAoFdXNlcnMYBCADKAlCEZq1GA0aBVVzZXJzIgRVc2VyEiwKBmNvbmZpZxgFIAEoCzIXLmFxdWFyaXVtLnYyLlVzZXJDb25maWdIAIgBAToUirUYCgoIR2V0R3JvdXCStRgCCAFCCQoHX2NvbmZpZyIdChtVc2VyU2VydmljZUxpc3RHcm91cFJlcXVlc3QiZQocVXNlclNlcnZpY2VMaXN0R3JvdXBSZXNwb25zZRIOCgZzdGF0dXMYASABKAgSDwoHbWVzc2FnZRgCIAEoCRIkCgRkYXRhGAMgAygLMhYuYXF1YXJpdW0udjIuVXNlckdyb3VwIjAKGlVzZXJTZXJ2aWNlR2V0R3JvdXBSZXF1ZXN0EhIKCmdyb3VwX25hbWUYASABKAkiZAobVXNlclNlcnZpY2VHZXRHcm91cFJlc3BvbnNlEg4KBnN0YXR1cxgBIAEoCBIPCgdtZXNzYWdlGAIgASgJEiQKBGRhdGEYAyABKAsyFi5hcXVhcml1bS52Mi5Vc2VyR3JvdXAiSgodVXNlclNlcnZpY2VDcmVhdGVHcm91cFJlcXVlc3QSKQoJdXNlcmdyb3VwGAEgASgLMhYuYXF1YXJpdW0udjIuVXNlckdyb3VwImcKHlVzZXJTZXJ2aWNlQ3JlYXRlR3JvdXBSZXNwb25zZRIOCgZzdGF0dXMYASABKAgSDwoHbWVzc2FnZRgCIAEoCRIkCgRkYXRhGAMgASgLMhYuYXF1YXJpdW0udjIuVXNlckdyb3VwIkoKHVVzZXJTZXJ2aWNlVXBkYXRlR3JvdXBSZXF1ZXN0EikKCXVzZXJncm91cBgBIAEoCzIWLmFxdWFyaXVtLnYyLlVzZXJHcm91cCJnCh5Vc2VyU2VydmljZVVwZGF0ZUdyb3VwUmVzcG9uc2USDgoGc3RhdHVzGAEgASgIEg8KB21lc3NhZ2UYAiABKAkSJAoEZGF0YRgDIAEoCzIWLmFxdWFyaXVtLnYyLlVzZXJHcm91cCIzCh1Vc2VyU2VydmljZVJlbW92ZUdyb3VwUmVxdWVzdBISCgpncm91cF9uYW1lGAEgASgJIkEKHlVzZXJTZXJ2aWNlUmVtb3ZlR3JvdXBSZXNwb25zZRIOCgZzdGF0dXMYASABKAgSDwoHbWVzc2FnZRgCIAEoCTLTCAoLVXNlclNlcnZpY2USXAoFR2V0TWUSJC5hcXVhcml1bS52Mi5Vc2VyU2VydmljZUdldE1lUmVxdWVzdBolLmFxdWFyaXVtLnYyLlVzZXJTZXJ2aWNlR2V0TWVSZXNwb25zZSIGgrUYAhABElMKBExpc3QSIy5hcXVhcml1bS52Mi5Vc2VyU2VydmljZUxpc3RSZXF1ZXN0GiQuYXF1YXJpdW0udjIuVXNlclNlcnZpY2VMaXN0UmVzcG9uc2UiABJQCgNHZXQSIi5hcXVhcml1bS52Mi5Vc2VyU2VydmljZUdldFJlcXVlc3QaIy5hcXVhcml1bS52Mi5Vc2VyU2VydmljZUdldFJlc3BvbnNlIgASWQoGQ3JlYXRlEiUuYXF1YXJpdW0udjIuVXNlclNlcnZpY2VDcmVhdGVSZXF1ZXN0GiYuYXF1YXJpdW0udjIuVXNlclNlcnZpY2VDcmVhdGVSZXNwb25zZSIAEoUBCgZVcGRhdGUSJS5hcXVhcml1bS52Mi5Vc2VyU2VydmljZVVwZGF0ZVJlcXVlc3QaJi5hcXVhcml1bS52Mi5Vc2VyU2VydmljZVVwZGF0ZVJlc3BvbnNlIiyCtRgoIglVcGRhdGVBbGwiDlVwZGF0ZVBhc3N3b3JkIgtVcGRhdGVSb2xlcxJZCgZSZW1vdmUSJS5hcXVhcml1bS52Mi5Vc2VyU2VydmljZVJlbW92ZVJlcXVlc3QaJi5hcXVhcml1bS52Mi5Vc2VyU2VydmljZVJlbW92ZVJlc3BvbnNlIgASYgoJTGlzdEdyb3VwEiguYXF1YXJpdW0udjIuVXNlclNlcnZpY2VMaXN0R3JvdXBSZXF1ZXN0GikuYXF1YXJpdW0udjIuVXNlclNlcnZpY2VMaXN0R3JvdXBSZXNwb25zZSIAEl8KCEdldEdyb3VwEicuYXF1YXJpdW0udjIuVXNlclNlcnZpY2VHZXRHcm91cFJlcXVlc3QaKC5hcXVhcml1bS52Mi5Vc2VyU2VydmljZUdldEdyb3VwUmVzcG9uc2UiABJoCgtDcmVhdGVHcm91cBIqLmFxdWFyaXVtLnYyLlVzZXJTZXJ2aWNlQ3JlYXRlR3JvdXBSZXF1ZXN0GisuYXF1YXJpdW0udjIuVXNlclNlcnZpY2VDcmVhdGVHcm91cFJlc3BvbnNlIgASaAoLVXBkYXRlR3JvdXASKi5hcXVhcml1bS52Mi5Vc2VyU2VydmljZVVwZGF0ZUdyb3VwUmVxdWVzdBorLmFxdWFyaXVtLnYyLlVzZXJTZXJ2aWNlVXBkYXRlR3JvdXBSZXNwb25zZSIAEmgKC1JlbW92ZUdyb3VwEiouYXF1YXJpdW0udjIuVXNlclNlcnZpY2VSZW1vdmVHcm91cFJlcXVlc3QaKy5hcXVhcml1bS52Mi5Vc2VyU2VydmljZVJlbW92ZUdyb3VwUmVzcG9uc2UiAEJFWkNnaXRodWIuY29tL2Fkb2JlL2FxdWFyaXVtLWZpc2gvbGliL3JwYy9wcm90by9hcXVhcml1bS92MjthcXVhcml1bXYyYgZwcm90bzM", [file_google_protobuf_timestamp, file_google_protobuf_struct, file_aquarium_v2_options_rbac, file_aquarium_v2_options_streaming, file_aquarium_v2_options_ui]);

/**
 * User represents a user in the system
 *
 * Contains user information including roles and permissions. The `admin` user is created during
 * the first cluster start and prints credentials to stderr.
 *
 * Can be created by any node and updated by any node with appropriate permissions.
 *
 * @generated from message aquarium.v2.User
 */
export type User = Message<"aquarium.v2.User"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 3;
   */
  updatedAt?: Timestamp;

  /**
   * Where the hashed password stored
   *
   * @generated from field: optional google.protobuf.Struct hash = 4;
   */
  hash?: JsonObject;

  /**
   * Set when the user was generated with no password
   *
   * @generated from field: optional string password = 5;
   */
  password?: string;

  /**
   * User configuration settings
   *
   * @generated from field: optional aquarium.v2.UserConfig config = 6;
   */
  config?: UserConfig;

  /**
   * List of role names assigned to the user
   *
   * @generated from field: repeated string roles = 7;
   */
  roles: string[];
};

/**
 * Describes the message aquarium.v2.User.
 * Use `create(UserSchema)` to create a new message.
 */
export const UserSchema: GenMessage<User> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 0);

/**
 * @generated from message aquarium.v2.UserConfig
 */
export type UserConfig = Message<"aquarium.v2.UserConfig"> & {
  /**
   * Request rate limit per minute
   *
   * @generated from field: optional int32 rate_limit = 1;
   */
  rateLimit?: number;

  /**
   * Limits the amount of streams of the same type per user. With 1 (default) user can open 1 Connect and 1 Subscribe stream
   *
   * @generated from field: optional int32 streams_limit = 2;
   */
  streamsLimit?: number;
};

/**
 * Describes the message aquarium.v2.UserConfig.
 * Use `create(UserConfigSchema)` to create a new message.
 */
export const UserConfigSchema: GenMessage<UserConfig> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 1);

/**
 * @generated from message aquarium.v2.UserServiceGetMeRequest
 */
export type UserServiceGetMeRequest = Message<"aquarium.v2.UserServiceGetMeRequest"> & {
};

/**
 * Describes the message aquarium.v2.UserServiceGetMeRequest.
 * Use `create(UserServiceGetMeRequestSchema)` to create a new message.
 */
export const UserServiceGetMeRequestSchema: GenMessage<UserServiceGetMeRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 2);

/**
 * @generated from message aquarium.v2.UserServiceGetMeResponse
 */
export type UserServiceGetMeResponse = Message<"aquarium.v2.UserServiceGetMeResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: aquarium.v2.User data = 3;
   */
  data?: User;
};

/**
 * Describes the message aquarium.v2.UserServiceGetMeResponse.
 * Use `create(UserServiceGetMeResponseSchema)` to create a new message.
 */
export const UserServiceGetMeResponseSchema: GenMessage<UserServiceGetMeResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 3);

/**
 * @generated from message aquarium.v2.UserServiceListRequest
 */
export type UserServiceListRequest = Message<"aquarium.v2.UserServiceListRequest"> & {
};

/**
 * Describes the message aquarium.v2.UserServiceListRequest.
 * Use `create(UserServiceListRequestSchema)` to create a new message.
 */
export const UserServiceListRequestSchema: GenMessage<UserServiceListRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 4);

/**
 * @generated from message aquarium.v2.UserServiceListResponse
 */
export type UserServiceListResponse = Message<"aquarium.v2.UserServiceListResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: repeated aquarium.v2.User data = 3;
   */
  data: User[];
};

/**
 * Describes the message aquarium.v2.UserServiceListResponse.
 * Use `create(UserServiceListResponseSchema)` to create a new message.
 */
export const UserServiceListResponseSchema: GenMessage<UserServiceListResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 5);

/**
 * @generated from message aquarium.v2.UserServiceGetRequest
 */
export type UserServiceGetRequest = Message<"aquarium.v2.UserServiceGetRequest"> & {
  /**
   * @generated from field: string user_name = 1;
   */
  userName: string;
};

/**
 * Describes the message aquarium.v2.UserServiceGetRequest.
 * Use `create(UserServiceGetRequestSchema)` to create a new message.
 */
export const UserServiceGetRequestSchema: GenMessage<UserServiceGetRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 6);

/**
 * @generated from message aquarium.v2.UserServiceGetResponse
 */
export type UserServiceGetResponse = Message<"aquarium.v2.UserServiceGetResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: aquarium.v2.User data = 3;
   */
  data?: User;
};

/**
 * Describes the message aquarium.v2.UserServiceGetResponse.
 * Use `create(UserServiceGetResponseSchema)` to create a new message.
 */
export const UserServiceGetResponseSchema: GenMessage<UserServiceGetResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 7);

/**
 * @generated from message aquarium.v2.UserServiceCreateRequest
 */
export type UserServiceCreateRequest = Message<"aquarium.v2.UserServiceCreateRequest"> & {
  /**
   * @generated from field: aquarium.v2.User user = 1;
   */
  user?: User;
};

/**
 * Describes the message aquarium.v2.UserServiceCreateRequest.
 * Use `create(UserServiceCreateRequestSchema)` to create a new message.
 */
export const UserServiceCreateRequestSchema: GenMessage<UserServiceCreateRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 8);

/**
 * @generated from message aquarium.v2.UserServiceCreateResponse
 */
export type UserServiceCreateResponse = Message<"aquarium.v2.UserServiceCreateResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: aquarium.v2.User data = 3;
   */
  data?: User;
};

/**
 * Describes the message aquarium.v2.UserServiceCreateResponse.
 * Use `create(UserServiceCreateResponseSchema)` to create a new message.
 */
export const UserServiceCreateResponseSchema: GenMessage<UserServiceCreateResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 9);

/**
 * @generated from message aquarium.v2.UserServiceUpdateRequest
 */
export type UserServiceUpdateRequest = Message<"aquarium.v2.UserServiceUpdateRequest"> & {
  /**
   * @generated from field: aquarium.v2.User user = 1;
   */
  user?: User;
};

/**
 * Describes the message aquarium.v2.UserServiceUpdateRequest.
 * Use `create(UserServiceUpdateRequestSchema)` to create a new message.
 */
export const UserServiceUpdateRequestSchema: GenMessage<UserServiceUpdateRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 10);

/**
 * @generated from message aquarium.v2.UserServiceUpdateResponse
 */
export type UserServiceUpdateResponse = Message<"aquarium.v2.UserServiceUpdateResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: aquarium.v2.User data = 3;
   */
  data?: User;
};

/**
 * Describes the message aquarium.v2.UserServiceUpdateResponse.
 * Use `create(UserServiceUpdateResponseSchema)` to create a new message.
 */
export const UserServiceUpdateResponseSchema: GenMessage<UserServiceUpdateResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 11);

/**
 * @generated from message aquarium.v2.UserServiceRemoveRequest
 */
export type UserServiceRemoveRequest = Message<"aquarium.v2.UserServiceRemoveRequest"> & {
  /**
   * @generated from field: string user_name = 1;
   */
  userName: string;
};

/**
 * Describes the message aquarium.v2.UserServiceRemoveRequest.
 * Use `create(UserServiceRemoveRequestSchema)` to create a new message.
 */
export const UserServiceRemoveRequestSchema: GenMessage<UserServiceRemoveRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 12);

/**
 * @generated from message aquarium.v2.UserServiceRemoveResponse
 */
export type UserServiceRemoveResponse = Message<"aquarium.v2.UserServiceRemoveResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message aquarium.v2.UserServiceRemoveResponse.
 * Use `create(UserServiceRemoveResponseSchema)` to create a new message.
 */
export const UserServiceRemoveResponseSchema: GenMessage<UserServiceRemoveResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 13);

/**
 * UserGroup makes a team of users
 *
 * Contains a list of users and their common configuration options, very useful to share Labels
 * and make changes that affecting everyone in the team.
 *
 * @generated from message aquarium.v2.UserGroup
 */
export type UserGroup = Message<"aquarium.v2.UserGroup"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 3;
   */
  updatedAt?: Timestamp;

  /**
   * List of user names participating in the group
   *
   * @generated from field: repeated string users = 4;
   */
  users: string[];

  /**
   * Common User configuration settings
   *
   * @generated from field: optional aquarium.v2.UserConfig config = 5;
   */
  config?: UserConfig;
};

/**
 * Describes the message aquarium.v2.UserGroup.
 * Use `create(UserGroupSchema)` to create a new message.
 */
export const UserGroupSchema: GenMessage<UserGroup> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 14);

/**
 * @generated from message aquarium.v2.UserServiceListGroupRequest
 */
export type UserServiceListGroupRequest = Message<"aquarium.v2.UserServiceListGroupRequest"> & {
};

/**
 * Describes the message aquarium.v2.UserServiceListGroupRequest.
 * Use `create(UserServiceListGroupRequestSchema)` to create a new message.
 */
export const UserServiceListGroupRequestSchema: GenMessage<UserServiceListGroupRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 15);

/**
 * @generated from message aquarium.v2.UserServiceListGroupResponse
 */
export type UserServiceListGroupResponse = Message<"aquarium.v2.UserServiceListGroupResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: repeated aquarium.v2.UserGroup data = 3;
   */
  data: UserGroup[];
};

/**
 * Describes the message aquarium.v2.UserServiceListGroupResponse.
 * Use `create(UserServiceListGroupResponseSchema)` to create a new message.
 */
export const UserServiceListGroupResponseSchema: GenMessage<UserServiceListGroupResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 16);

/**
 * @generated from message aquarium.v2.UserServiceGetGroupRequest
 */
export type UserServiceGetGroupRequest = Message<"aquarium.v2.UserServiceGetGroupRequest"> & {
  /**
   * @generated from field: string group_name = 1;
   */
  groupName: string;
};

/**
 * Describes the message aquarium.v2.UserServiceGetGroupRequest.
 * Use `create(UserServiceGetGroupRequestSchema)` to create a new message.
 */
export const UserServiceGetGroupRequestSchema: GenMessage<UserServiceGetGroupRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 17);

/**
 * @generated from message aquarium.v2.UserServiceGetGroupResponse
 */
export type UserServiceGetGroupResponse = Message<"aquarium.v2.UserServiceGetGroupResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: aquarium.v2.UserGroup data = 3;
   */
  data?: UserGroup;
};

/**
 * Describes the message aquarium.v2.UserServiceGetGroupResponse.
 * Use `create(UserServiceGetGroupResponseSchema)` to create a new message.
 */
export const UserServiceGetGroupResponseSchema: GenMessage<UserServiceGetGroupResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 18);

/**
 * @generated from message aquarium.v2.UserServiceCreateGroupRequest
 */
export type UserServiceCreateGroupRequest = Message<"aquarium.v2.UserServiceCreateGroupRequest"> & {
  /**
   * @generated from field: aquarium.v2.UserGroup usergroup = 1;
   */
  usergroup?: UserGroup;
};

/**
 * Describes the message aquarium.v2.UserServiceCreateGroupRequest.
 * Use `create(UserServiceCreateGroupRequestSchema)` to create a new message.
 */
export const UserServiceCreateGroupRequestSchema: GenMessage<UserServiceCreateGroupRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 19);

/**
 * @generated from message aquarium.v2.UserServiceCreateGroupResponse
 */
export type UserServiceCreateGroupResponse = Message<"aquarium.v2.UserServiceCreateGroupResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: aquarium.v2.UserGroup data = 3;
   */
  data?: UserGroup;
};

/**
 * Describes the message aquarium.v2.UserServiceCreateGroupResponse.
 * Use `create(UserServiceCreateGroupResponseSchema)` to create a new message.
 */
export const UserServiceCreateGroupResponseSchema: GenMessage<UserServiceCreateGroupResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 20);

/**
 * @generated from message aquarium.v2.UserServiceUpdateGroupRequest
 */
export type UserServiceUpdateGroupRequest = Message<"aquarium.v2.UserServiceUpdateGroupRequest"> & {
  /**
   * @generated from field: aquarium.v2.UserGroup usergroup = 1;
   */
  usergroup?: UserGroup;
};

/**
 * Describes the message aquarium.v2.UserServiceUpdateGroupRequest.
 * Use `create(UserServiceUpdateGroupRequestSchema)` to create a new message.
 */
export const UserServiceUpdateGroupRequestSchema: GenMessage<UserServiceUpdateGroupRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 21);

/**
 * @generated from message aquarium.v2.UserServiceUpdateGroupResponse
 */
export type UserServiceUpdateGroupResponse = Message<"aquarium.v2.UserServiceUpdateGroupResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: aquarium.v2.UserGroup data = 3;
   */
  data?: UserGroup;
};

/**
 * Describes the message aquarium.v2.UserServiceUpdateGroupResponse.
 * Use `create(UserServiceUpdateGroupResponseSchema)` to create a new message.
 */
export const UserServiceUpdateGroupResponseSchema: GenMessage<UserServiceUpdateGroupResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 22);

/**
 * @generated from message aquarium.v2.UserServiceRemoveGroupRequest
 */
export type UserServiceRemoveGroupRequest = Message<"aquarium.v2.UserServiceRemoveGroupRequest"> & {
  /**
   * @generated from field: string group_name = 1;
   */
  groupName: string;
};

/**
 * Describes the message aquarium.v2.UserServiceRemoveGroupRequest.
 * Use `create(UserServiceRemoveGroupRequestSchema)` to create a new message.
 */
export const UserServiceRemoveGroupRequestSchema: GenMessage<UserServiceRemoveGroupRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 23);

/**
 * @generated from message aquarium.v2.UserServiceRemoveGroupResponse
 */
export type UserServiceRemoveGroupResponse = Message<"aquarium.v2.UserServiceRemoveGroupResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message aquarium.v2.UserServiceRemoveGroupResponse.
 * Use `create(UserServiceRemoveGroupResponseSchema)` to create a new message.
 */
export const UserServiceRemoveGroupResponseSchema: GenMessage<UserServiceRemoveGroupResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_user, 24);

/**
 * User service handles user management operations
 *
 * @generated from service aquarium.v2.UserService
 */
export const UserService: GenService<{
  /**
   * Get current user information
   *
   * @generated from rpc aquarium.v2.UserService.GetMe
   */
  getMe: {
    methodKind: "unary";
    input: typeof UserServiceGetMeRequestSchema;
    output: typeof UserServiceGetMeResponseSchema;
  },
  /**
   * Get list of users
   *
   * @generated from rpc aquarium.v2.UserService.List
   */
  list: {
    methodKind: "unary";
    input: typeof UserServiceListRequestSchema;
    output: typeof UserServiceListResponseSchema;
  },
  /**
   * Get user by name
   *
   * @generated from rpc aquarium.v2.UserService.Get
   */
  get: {
    methodKind: "unary";
    input: typeof UserServiceGetRequestSchema;
    output: typeof UserServiceGetResponseSchema;
  },
  /**
   * Create new user
   *
   * @generated from rpc aquarium.v2.UserService.Create
   */
  create: {
    methodKind: "unary";
    input: typeof UserServiceCreateRequestSchema;
    output: typeof UserServiceCreateResponseSchema;
  },
  /**
   * Update existing user
   *
   * @generated from rpc aquarium.v2.UserService.Update
   */
  update: {
    methodKind: "unary";
    input: typeof UserServiceUpdateRequestSchema;
    output: typeof UserServiceUpdateResponseSchema;
  },
  /**
   * Remove user
   *
   * @generated from rpc aquarium.v2.UserService.Remove
   */
  remove: {
    methodKind: "unary";
    input: typeof UserServiceRemoveRequestSchema;
    output: typeof UserServiceRemoveResponseSchema;
  },
  /**
   * Get list of user groups
   *
   * @generated from rpc aquarium.v2.UserService.ListGroup
   */
  listGroup: {
    methodKind: "unary";
    input: typeof UserServiceListGroupRequestSchema;
    output: typeof UserServiceListGroupResponseSchema;
  },
  /**
   * Get user group by name
   *
   * @generated from rpc aquarium.v2.UserService.GetGroup
   */
  getGroup: {
    methodKind: "unary";
    input: typeof UserServiceGetGroupRequestSchema;
    output: typeof UserServiceGetGroupResponseSchema;
  },
  /**
   * Create new user group
   *
   * @generated from rpc aquarium.v2.UserService.CreateGroup
   */
  createGroup: {
    methodKind: "unary";
    input: typeof UserServiceCreateGroupRequestSchema;
    output: typeof UserServiceCreateGroupResponseSchema;
  },
  /**
   * Update existing user group
   *
   * @generated from rpc aquarium.v2.UserService.UpdateGroup
   */
  updateGroup: {
    methodKind: "unary";
    input: typeof UserServiceUpdateGroupRequestSchema;
    output: typeof UserServiceUpdateGroupResponseSchema;
  },
  /**
   * Remove user group
   *
   * @generated from rpc aquarium.v2.UserService.RemoveGroup
   */
  removeGroup: {
    methodKind: "unary";
    input: typeof UserServiceRemoveGroupRequestSchema;
    output: typeof UserServiceRemoveGroupResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_aquarium_v2_user, 0);

