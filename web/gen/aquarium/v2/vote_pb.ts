// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.

// Author: Sergei Parshev (@sparshev)

// @generated by protoc-gen-es v2.6.2 with parameter "target=ts"
// @generated from file aquarium/v2/vote.proto (package aquarium.v2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file aquarium/v2/vote.proto.
 */
export const file_aquarium_v2_vote: GenFile = /*@__PURE__*/
  fileDesc("ChZhcXVhcml1bS92Mi92b3RlLnByb3RvEgthcXVhcml1bS52MiKzAQoEVm90ZRILCgN1aWQYASABKAkSLgoKY3JlYXRlZF9hdBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASFwoPYXBwbGljYXRpb25fdWlkGAMgASgJEhAKCG5vZGVfdWlkGAQgASgJEg0KBXJvdW5kGAUgASgNEhEKCWF2YWlsYWJsZRgGIAEoBRITCgtydWxlX3Jlc3VsdBgHIAEoDRIMCgRyYW5kGAggASgNQkVaQ2dpdGh1Yi5jb20vYWRvYmUvYXF1YXJpdW0tZmlzaC9saWIvcnBjL3Byb3RvL2FxdWFyaXVtL3YyO2FxdWFyaXVtdjJiBnByb3RvMw", [file_google_protobuf_timestamp]);

/**
 * Vote represents the current state of Application election process of specific node
 *
 * When Application becomes available for the node it starts to vote to notify the cluster
 * about its availability. Votes are basically "yes" or "no" and could take a number of rounds
 * depends on the cluster voting and election rules.
 * Votes are not stored in DB and lives only in-memory.
 *
 * @generated from message aquarium.v2.Vote
 */
export type Vote = Message<"aquarium.v2.Vote"> & {
  /**
   * @generated from field: string uid = 1;
   */
  uid: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: string application_uid = 3;
   */
  applicationUid: string;

  /**
   * @generated from field: string node_uid = 4;
   */
  nodeUid: string;

  /**
   * Round of the election, because it can take a number of rounds to figure out the Only One.
   *
   * @generated from field: uint32 round = 5;
   */
  round: number;

  /**
   * Node places answer to the Vote for the Application's definitions, the number represents
   * the first available index of the definition which fits the node available resources. In
   * case it's `-1` then node can't run any of the definitions.
   *
   * @generated from field: int32 available = 6;
   */
  available: number;

  /**
   * The custom rule result is needed to store the custom rule decision
   *
   * @generated from field: uint32 rule_result = 7;
   */
  ruleResult: number;

  /**
   * The last resort to figure out for the winner.
   *
   * @generated from field: uint32 rand = 8;
   */
  rand: number;
};

/**
 * Describes the message aquarium.v2.Vote.
 * Use `create(VoteSchema)` to create a new message.
 */
export const VoteSchema: GenMessage<Vote> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_vote, 0);

