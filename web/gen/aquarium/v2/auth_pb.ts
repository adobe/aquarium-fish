// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.

// Author: Sergei Parshev (@sparshev)

// @generated by protoc-gen-es v2.6.0 with parameter "target=ts"
// @generated from file aquarium/v2/auth.proto (package aquarium.v2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_aquarium_v2_rbac } from "./rbac_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file aquarium/v2/auth.proto.
 */
export const file_aquarium_v2_auth: GenFile = /*@__PURE__*/
  fileDesc("ChZhcXVhcml1bS92Mi9hdXRoLnByb3RvEgthcXVhcml1bS52MiKYAQoISldUVG9rZW4SDQoFdG9rZW4YASABKAkSLgoKZXhwaXJlc19hdBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASFQoNcmVmcmVzaF90b2tlbhgDIAEoCRI2ChJyZWZyZXNoX2V4cGlyZXNfYXQYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIkcKDlVzZXJQZXJtaXNzaW9uEhAKCHJlc291cmNlGAEgASgJEg4KBmFjdGlvbhgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEoCSLAAQoLVXNlclNlc3Npb24SEQoJdXNlcl9uYW1lGAEgASgJEg0KBXJvbGVzGAIgAygJEjAKC3Blcm1pc3Npb25zGAMgAygLMhsuYXF1YXJpdW0udjIuVXNlclBlcm1pc3Npb24SLgoKY3JlYXRlZF9hdBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLQoJbGFzdF91c2VkGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCI9ChdBdXRoU2VydmljZUxvZ2luUmVxdWVzdBIQCgh1c2VybmFtZRgBIAEoCRIQCghwYXNzd29yZBgCIAEoCSKsAQoYQXV0aFNlcnZpY2VMb2dpblJlc3BvbnNlEg4KBnN0YXR1cxgBIAEoCBIPCgdtZXNzYWdlGAIgASgJEikKBXRva2VuGAMgASgLMhUuYXF1YXJpdW0udjIuSldUVG9rZW5IAIgBARIuCgdzZXNzaW9uGAQgASgLMhguYXF1YXJpdW0udjIuVXNlclNlc3Npb25IAYgBAUIICgZfdG9rZW5CCgoIX3Nlc3Npb24iNwoeQXV0aFNlcnZpY2VSZWZyZXNoVG9rZW5SZXF1ZXN0EhUKDXJlZnJlc2hfdG9rZW4YASABKAkidwofQXV0aFNlcnZpY2VSZWZyZXNoVG9rZW5SZXNwb25zZRIOCgZzdGF0dXMYASABKAgSDwoHbWVzc2FnZRgCIAEoCRIpCgV0b2tlbhgDIAEoCzIVLmFxdWFyaXVtLnYyLkpXVFRva2VuSACIAQFCCAoGX3Rva2VuIiIKIEF1dGhTZXJ2aWNlR2V0UGVybWlzc2lvbnNSZXF1ZXN0IoABCiFBdXRoU2VydmljZUdldFBlcm1pc3Npb25zUmVzcG9uc2USDgoGc3RhdHVzGAEgASgIEg8KB21lc3NhZ2UYAiABKAkSLgoHc2Vzc2lvbhgDIAEoCzIYLmFxdWFyaXVtLnYyLlVzZXJTZXNzaW9uSACIAQFCCgoIX3Nlc3Npb24iMAofQXV0aFNlcnZpY2VWYWxpZGF0ZVRva2VuUmVxdWVzdBINCgV0b2tlbhgBIAEoCSJ/CiBBdXRoU2VydmljZVZhbGlkYXRlVG9rZW5SZXNwb25zZRIOCgZzdGF0dXMYASABKAgSDwoHbWVzc2FnZRgCIAEoCRIuCgdzZXNzaW9uGAMgASgLMhguYXF1YXJpdW0udjIuVXNlclNlc3Npb25IAIgBAUIKCghfc2Vzc2lvbjLNAwoLQXV0aFNlcnZpY2USXAoFTG9naW4SJC5hcXVhcml1bS52Mi5BdXRoU2VydmljZUxvZ2luUmVxdWVzdBolLmFxdWFyaXVtLnYyLkF1dGhTZXJ2aWNlTG9naW5SZXNwb25zZSIGgrUYAhABEnEKDFJlZnJlc2hUb2tlbhIrLmFxdWFyaXVtLnYyLkF1dGhTZXJ2aWNlUmVmcmVzaFRva2VuUmVxdWVzdBosLmFxdWFyaXVtLnYyLkF1dGhTZXJ2aWNlUmVmcmVzaFRva2VuUmVzcG9uc2UiBoK1GAIQARJ3Cg5HZXRQZXJtaXNzaW9ucxItLmFxdWFyaXVtLnYyLkF1dGhTZXJ2aWNlR2V0UGVybWlzc2lvbnNSZXF1ZXN0Gi4uYXF1YXJpdW0udjIuQXV0aFNlcnZpY2VHZXRQZXJtaXNzaW9uc1Jlc3BvbnNlIgaCtRgCEAESdAoNVmFsaWRhdGVUb2tlbhIsLmFxdWFyaXVtLnYyLkF1dGhTZXJ2aWNlVmFsaWRhdGVUb2tlblJlcXVlc3QaLS5hcXVhcml1bS52Mi5BdXRoU2VydmljZVZhbGlkYXRlVG9rZW5SZXNwb25zZSIGgrUYAhABQkVaQ2dpdGh1Yi5jb20vYWRvYmUvYXF1YXJpdW0tZmlzaC9saWIvcnBjL3Byb3RvL2FxdWFyaXVtL3YyO2FxdWFyaXVtdjJiBnByb3RvMw", [file_google_protobuf_timestamp, file_aquarium_v2_rbac]);

/**
 * JWT token response containing the token and metadata
 *
 * @generated from message aquarium.v2.JWTToken
 */
export type JWTToken = Message<"aquarium.v2.JWTToken"> & {
  /**
   * The JWT token string
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * Token expiration time
   *
   * @generated from field: google.protobuf.Timestamp expires_at = 2;
   */
  expiresAt?: Timestamp;

  /**
   * Refresh token for getting new access tokens
   *
   * @generated from field: string refresh_token = 3;
   */
  refreshToken: string;

  /**
   * Refresh token expiration time
   *
   * @generated from field: google.protobuf.Timestamp refresh_expires_at = 4;
   */
  refreshExpiresAt?: Timestamp;
};

/**
 * Describes the message aquarium.v2.JWTToken.
 * Use `create(JWTTokenSchema)` to create a new message.
 */
export const JWTTokenSchema: GenMessage<JWTToken> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_auth, 0);

/**
 * User permission information
 *
 * @generated from message aquarium.v2.UserPermission
 */
export type UserPermission = Message<"aquarium.v2.UserPermission"> & {
  /**
   * Resource or service name
   *
   * @generated from field: string resource = 1;
   */
  resource: string;

  /**
   * Action allowed on the resource
   *
   * @generated from field: string action = 2;
   */
  action: string;

  /**
   * Human-readable description of the permission
   *
   * @generated from field: string description = 3;
   */
  description: string;
};

/**
 * Describes the message aquarium.v2.UserPermission.
 * Use `create(UserPermissionSchema)` to create a new message.
 */
export const UserPermissionSchema: GenMessage<UserPermission> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_auth, 1);

/**
 * Complete user session information
 *
 * @generated from message aquarium.v2.UserSession
 */
export type UserSession = Message<"aquarium.v2.UserSession"> & {
  /**
   * User name
   *
   * @generated from field: string user_name = 1;
   */
  userName: string;

  /**
   * User roles
   *
   * @generated from field: repeated string roles = 2;
   */
  roles: string[];

  /**
   * User permissions derived from roles
   *
   * @generated from field: repeated aquarium.v2.UserPermission permissions = 3;
   */
  permissions: UserPermission[];

  /**
   * Session metadata
   *
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp last_used = 5;
   */
  lastUsed?: Timestamp;
};

/**
 * Describes the message aquarium.v2.UserSession.
 * Use `create(UserSessionSchema)` to create a new message.
 */
export const UserSessionSchema: GenMessage<UserSession> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_auth, 2);

/**
 * @generated from message aquarium.v2.AuthServiceLoginRequest
 */
export type AuthServiceLoginRequest = Message<"aquarium.v2.AuthServiceLoginRequest"> & {
  /**
   * Username for authentication
   *
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * Password for authentication
   *
   * @generated from field: string password = 2;
   */
  password: string;
};

/**
 * Describes the message aquarium.v2.AuthServiceLoginRequest.
 * Use `create(AuthServiceLoginRequestSchema)` to create a new message.
 */
export const AuthServiceLoginRequestSchema: GenMessage<AuthServiceLoginRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_auth, 3);

/**
 * @generated from message aquarium.v2.AuthServiceLoginResponse
 */
export type AuthServiceLoginResponse = Message<"aquarium.v2.AuthServiceLoginResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * JWT token information if login successful
   *
   * @generated from field: optional aquarium.v2.JWTToken token = 3;
   */
  token?: JWTToken;

  /**
   * User session information if login successful
   *
   * @generated from field: optional aquarium.v2.UserSession session = 4;
   */
  session?: UserSession;
};

/**
 * Describes the message aquarium.v2.AuthServiceLoginResponse.
 * Use `create(AuthServiceLoginResponseSchema)` to create a new message.
 */
export const AuthServiceLoginResponseSchema: GenMessage<AuthServiceLoginResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_auth, 4);

/**
 * @generated from message aquarium.v2.AuthServiceRefreshTokenRequest
 */
export type AuthServiceRefreshTokenRequest = Message<"aquarium.v2.AuthServiceRefreshTokenRequest"> & {
  /**
   * Refresh token to use for getting new access token
   *
   * @generated from field: string refresh_token = 1;
   */
  refreshToken: string;
};

/**
 * Describes the message aquarium.v2.AuthServiceRefreshTokenRequest.
 * Use `create(AuthServiceRefreshTokenRequestSchema)` to create a new message.
 */
export const AuthServiceRefreshTokenRequestSchema: GenMessage<AuthServiceRefreshTokenRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_auth, 5);

/**
 * @generated from message aquarium.v2.AuthServiceRefreshTokenResponse
 */
export type AuthServiceRefreshTokenResponse = Message<"aquarium.v2.AuthServiceRefreshTokenResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * New JWT token if refresh successful
   *
   * @generated from field: optional aquarium.v2.JWTToken token = 3;
   */
  token?: JWTToken;
};

/**
 * Describes the message aquarium.v2.AuthServiceRefreshTokenResponse.
 * Use `create(AuthServiceRefreshTokenResponseSchema)` to create a new message.
 */
export const AuthServiceRefreshTokenResponseSchema: GenMessage<AuthServiceRefreshTokenResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_auth, 6);

/**
 * @generated from message aquarium.v2.AuthServiceGetPermissionsRequest
 */
export type AuthServiceGetPermissionsRequest = Message<"aquarium.v2.AuthServiceGetPermissionsRequest"> & {
};

/**
 * Describes the message aquarium.v2.AuthServiceGetPermissionsRequest.
 * Use `create(AuthServiceGetPermissionsRequestSchema)` to create a new message.
 */
export const AuthServiceGetPermissionsRequestSchema: GenMessage<AuthServiceGetPermissionsRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_auth, 7);

/**
 * @generated from message aquarium.v2.AuthServiceGetPermissionsResponse
 */
export type AuthServiceGetPermissionsResponse = Message<"aquarium.v2.AuthServiceGetPermissionsResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * User session information including permissions
   *
   * @generated from field: optional aquarium.v2.UserSession session = 3;
   */
  session?: UserSession;
};

/**
 * Describes the message aquarium.v2.AuthServiceGetPermissionsResponse.
 * Use `create(AuthServiceGetPermissionsResponseSchema)` to create a new message.
 */
export const AuthServiceGetPermissionsResponseSchema: GenMessage<AuthServiceGetPermissionsResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_auth, 8);

/**
 * @generated from message aquarium.v2.AuthServiceValidateTokenRequest
 */
export type AuthServiceValidateTokenRequest = Message<"aquarium.v2.AuthServiceValidateTokenRequest"> & {
  /**
   * JWT token to validate
   *
   * @generated from field: string token = 1;
   */
  token: string;
};

/**
 * Describes the message aquarium.v2.AuthServiceValidateTokenRequest.
 * Use `create(AuthServiceValidateTokenRequestSchema)` to create a new message.
 */
export const AuthServiceValidateTokenRequestSchema: GenMessage<AuthServiceValidateTokenRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_auth, 9);

/**
 * @generated from message aquarium.v2.AuthServiceValidateTokenResponse
 */
export type AuthServiceValidateTokenResponse = Message<"aquarium.v2.AuthServiceValidateTokenResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * User session information if token is valid
   *
   * @generated from field: optional aquarium.v2.UserSession session = 3;
   */
  session?: UserSession;
};

/**
 * Describes the message aquarium.v2.AuthServiceValidateTokenResponse.
 * Use `create(AuthServiceValidateTokenResponseSchema)` to create a new message.
 */
export const AuthServiceValidateTokenResponseSchema: GenMessage<AuthServiceValidateTokenResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_auth, 10);

/**
 * AuthService handles authentication and authorization operations
 *
 * @generated from service aquarium.v2.AuthService
 */
export const AuthService: GenService<{
  /**
   * Login authenticates a user and returns a JWT token
   *
   * @generated from rpc aquarium.v2.AuthService.Login
   */
  login: {
    methodKind: "unary";
    input: typeof AuthServiceLoginRequestSchema;
    output: typeof AuthServiceLoginResponseSchema;
  },
  /**
   * RefreshToken refreshes an existing JWT token
   *
   * @generated from rpc aquarium.v2.AuthService.RefreshToken
   */
  refreshToken: {
    methodKind: "unary";
    input: typeof AuthServiceRefreshTokenRequestSchema;
    output: typeof AuthServiceRefreshTokenResponseSchema;
  },
  /**
   * GetPermissions returns the current user's permissions
   *
   * @generated from rpc aquarium.v2.AuthService.GetPermissions
   */
  getPermissions: {
    methodKind: "unary";
    input: typeof AuthServiceGetPermissionsRequestSchema;
    output: typeof AuthServiceGetPermissionsResponseSchema;
  },
  /**
   * ValidateToken validates a JWT token
   *
   * @generated from rpc aquarium.v2.AuthService.ValidateToken
   */
  validateToken: {
    methodKind: "unary";
    input: typeof AuthServiceValidateTokenRequestSchema;
    output: typeof AuthServiceValidateTokenResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_aquarium_v2_auth, 0);

