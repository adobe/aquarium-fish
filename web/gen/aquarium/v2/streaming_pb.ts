// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.

// Author: Sergei Parshev (@sparshev)

// @generated by protoc-gen-es v2.6.2 with parameter "target=ts"
// @generated from file aquarium/v2/streaming.proto (package aquarium.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Any, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_aquarium_v2_options_rbac } from "./options_rbac_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file aquarium/v2/streaming.proto.
 */
export const file_aquarium_v2_streaming: GenFile = /*@__PURE__*/
  fileDesc("ChthcXVhcml1bS92Mi9zdHJlYW1pbmcucHJvdG8SC2FxdWFyaXVtLnYyInYKHlN0cmVhbWluZ1NlcnZpY2VDb25uZWN0UmVxdWVzdBISCgpyZXF1ZXN0X2lkGAEgASgJEhQKDHJlcXVlc3RfdHlwZRgCIAEoCRIqCgxyZXF1ZXN0X2RhdGEYAyABKAsyFC5nb29nbGUucHJvdG9idWYuQW55IrEBCh9TdHJlYW1pbmdTZXJ2aWNlQ29ubmVjdFJlc3BvbnNlEhIKCnJlcXVlc3RfaWQYASABKAkSFQoNcmVzcG9uc2VfdHlwZRgCIAEoCRIrCg1yZXNwb25zZV9kYXRhGAMgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRIsCgVlcnJvchgEIAEoCzIYLmFxdWFyaXVtLnYyLlN0cmVhbUVycm9ySACIAQFCCAoGX2Vycm9yIiwKC1N0cmVhbUVycm9yEgwKBGNvZGUYASABKAkSDwoHbWVzc2FnZRgCIAEoCSJdCiBTdHJlYW1pbmdTZXJ2aWNlU3Vic2NyaWJlUmVxdWVzdBI5ChJzdWJzY3JpcHRpb25fdHlwZXMYASADKA4yHS5hcXVhcml1bS52Mi5TdWJzY3JpcHRpb25UeXBlIt8BCiFTdHJlYW1pbmdTZXJ2aWNlU3Vic2NyaWJlUmVzcG9uc2USMgoLb2JqZWN0X3R5cGUYASABKA4yHS5hcXVhcml1bS52Mi5TdWJzY3JpcHRpb25UeXBlEiwKC2NoYW5nZV90eXBlGAIgASgOMhcuYXF1YXJpdW0udjIuQ2hhbmdlVHlwZRItCgl0aW1lc3RhbXAYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEikKC29iamVjdF9kYXRhGAQgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueSIjCg1TdHJlYW1DcmVhdGVkEhIKCnN0cmVhbV91aWQYASABKAkqxgIKEFN1YnNjcmlwdGlvblR5cGUSIQodU1VCU0NSSVBUSU9OX1RZUEVfVU5TUEVDSUZJRUQQABIhCh1TVUJTQ1JJUFRJT05fVFlQRV9BUFBMSUNBVElPThABEicKI1NVQlNDUklQVElPTl9UWVBFX0FQUExJQ0FUSU9OX1NUQVRFEAISKgomU1VCU0NSSVBUSU9OX1RZUEVfQVBQTElDQVRJT05fUkVTT1VSQ0UQAxImCiJTVUJTQ1JJUFRJT05fVFlQRV9BUFBMSUNBVElPTl9UQVNLEAQSGwoXU1VCU0NSSVBUSU9OX1RZUEVfTEFCRUwQBRIaChZTVUJTQ1JJUFRJT05fVFlQRV9OT0RFEAYSGgoWU1VCU0NSSVBUSU9OX1RZUEVfVVNFUhAHEhoKFlNVQlNDUklQVElPTl9UWVBFX1JPTEUQCCp0CgpDaGFuZ2VUeXBlEhsKF0NIQU5HRV9UWVBFX1VOU1BFQ0lGSUVEEAASFwoTQ0hBTkdFX1RZUEVfQ1JFQVRFRBABEhcKE0NIQU5HRV9UWVBFX1VQREFURUQQAhIXChNDSEFOR0VfVFlQRV9SRU1PVkVEEAMyggIKEFN0cmVhbWluZ1NlcnZpY2USdAoHQ29ubmVjdBIrLmFxdWFyaXVtLnYyLlN0cmVhbWluZ1NlcnZpY2VDb25uZWN0UmVxdWVzdBosLmFxdWFyaXVtLnYyLlN0cmVhbWluZ1NlcnZpY2VDb25uZWN0UmVzcG9uc2UiCoK1GAYaBFVzZXIoATABEngKCVN1YnNjcmliZRItLmFxdWFyaXVtLnYyLlN0cmVhbWluZ1NlcnZpY2VTdWJzY3JpYmVSZXF1ZXN0Gi4uYXF1YXJpdW0udjIuU3RyZWFtaW5nU2VydmljZVN1YnNjcmliZVJlc3BvbnNlIgqCtRgGGgRVc2VyMAFCRVpDZ2l0aHViLmNvbS9hZG9iZS9hcXVhcml1bS1maXNoL2xpYi9ycGMvcHJvdG8vYXF1YXJpdW0vdjI7YXF1YXJpdW12MmIGcHJvdG8z", [file_google_protobuf_any, file_google_protobuf_timestamp, file_aquarium_v2_options_rbac]);

/**
 * StreamingServiceConnectRequest represents a request sent through the bidirectional stream
 *
 * @generated from message aquarium.v2.StreamingServiceConnectRequest
 */
export type StreamingServiceConnectRequest = Message<"aquarium.v2.StreamingServiceConnectRequest"> & {
  /**
   * Unique request ID for correlation
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Type of the request (e.g., "ApplicationServiceCreateRequest")
   *
   * @generated from field: string request_type = 2;
   */
  requestType: string;

  /**
   * The actual request data
   *
   * @generated from field: google.protobuf.Any request_data = 3;
   */
  requestData?: Any;
};

/**
 * Describes the message aquarium.v2.StreamingServiceConnectRequest.
 * Use `create(StreamingServiceConnectRequestSchema)` to create a new message.
 */
export const StreamingServiceConnectRequestSchema: GenMessage<StreamingServiceConnectRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_streaming, 0);

/**
 * StreamingServiceConnectResponse represents a response sent through the bidirectional stream
 *
 * @generated from message aquarium.v2.StreamingServiceConnectResponse
 */
export type StreamingServiceConnectResponse = Message<"aquarium.v2.StreamingServiceConnectResponse"> & {
  /**
   * Request ID this response corresponds to
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Type of the response (e.g., "ApplicationServiceCreateResponse")
   *
   * @generated from field: string response_type = 2;
   */
  responseType: string;

  /**
   * The actual response data
   *
   * @generated from field: google.protobuf.Any response_data = 3;
   */
  responseData?: Any;

  /**
   * Error information if the request failed
   *
   * @generated from field: optional aquarium.v2.StreamError error = 4;
   */
  error?: StreamError;
};

/**
 * Describes the message aquarium.v2.StreamingServiceConnectResponse.
 * Use `create(StreamingServiceConnectResponseSchema)` to create a new message.
 */
export const StreamingServiceConnectResponseSchema: GenMessage<StreamingServiceConnectResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_streaming, 1);

/**
 * StreamError represents an error in stream processing
 *
 * @generated from message aquarium.v2.StreamError
 */
export type StreamError = Message<"aquarium.v2.StreamError"> & {
  /**
   * Error code (following Connect RPC codes)
   *
   * @generated from field: string code = 1;
   */
  code: string;

  /**
   * Human readable error message
   *
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message aquarium.v2.StreamError.
 * Use `create(StreamErrorSchema)` to create a new message.
 */
export const StreamErrorSchema: GenMessage<StreamError> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_streaming, 2);

/**
 * StreamingServiceSubscribeRequest defines what database objects to subscribe to
 *
 * @generated from message aquarium.v2.StreamingServiceSubscribeRequest
 */
export type StreamingServiceSubscribeRequest = Message<"aquarium.v2.StreamingServiceSubscribeRequest"> & {
  /**
   * List of object types to subscribe to
   *
   * @generated from field: repeated aquarium.v2.SubscriptionType subscription_types = 1;
   */
  subscriptionTypes: SubscriptionType[];
};

/**
 * Describes the message aquarium.v2.StreamingServiceSubscribeRequest.
 * Use `create(StreamingServiceSubscribeRequestSchema)` to create a new message.
 */
export const StreamingServiceSubscribeRequestSchema: GenMessage<StreamingServiceSubscribeRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_streaming, 3);

/**
 * StreamingServiceSubscribeResponse represents a database change notification
 *
 * @generated from message aquarium.v2.StreamingServiceSubscribeResponse
 */
export type StreamingServiceSubscribeResponse = Message<"aquarium.v2.StreamingServiceSubscribeResponse"> & {
  /**
   * Type of the database object that changed
   *
   * @generated from field: aquarium.v2.SubscriptionType object_type = 1;
   */
  objectType: SubscriptionType;

  /**
   * Type of change (CREATED, UPDATED, REMOVED)
   *
   * @generated from field: aquarium.v2.ChangeType change_type = 2;
   */
  changeType: ChangeType;

  /**
   * Timestamp when the change occurred
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  /**
   * The actual object data
   *
   * @generated from field: google.protobuf.Any object_data = 4;
   */
  objectData?: Any;
};

/**
 * Describes the message aquarium.v2.StreamingServiceSubscribeResponse.
 * Use `create(StreamingServiceSubscribeResponseSchema)` to create a new message.
 */
export const StreamingServiceSubscribeResponseSchema: GenMessage<StreamingServiceSubscribeResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_streaming, 4);

/**
 * StreamCreated is sent as the first message when stream channel is created
 *
 * @generated from message aquarium.v2.StreamCreated
 */
export type StreamCreated = Message<"aquarium.v2.StreamCreated"> & {
  /**
   * Streaming channel UID to be known by the client
   *
   * @generated from field: string stream_uid = 1;
   */
  streamUid: string;
};

/**
 * Describes the message aquarium.v2.StreamCreated.
 * Use `create(StreamCreatedSchema)` to create a new message.
 */
export const StreamCreatedSchema: GenMessage<StreamCreated> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_streaming, 5);

/**
 * Subscription types for database objects
 *
 * @generated from enum aquarium.v2.SubscriptionType
 */
export enum SubscriptionType {
  /**
   * @generated from enum value: SUBSCRIPTION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SUBSCRIPTION_TYPE_APPLICATION = 1;
   */
  APPLICATION = 1,

  /**
   * @generated from enum value: SUBSCRIPTION_TYPE_APPLICATION_STATE = 2;
   */
  APPLICATION_STATE = 2,

  /**
   * @generated from enum value: SUBSCRIPTION_TYPE_APPLICATION_RESOURCE = 3;
   */
  APPLICATION_RESOURCE = 3,

  /**
   * @generated from enum value: SUBSCRIPTION_TYPE_APPLICATION_TASK = 4;
   */
  APPLICATION_TASK = 4,

  /**
   * @generated from enum value: SUBSCRIPTION_TYPE_LABEL = 5;
   */
  LABEL = 5,

  /**
   * @generated from enum value: SUBSCRIPTION_TYPE_NODE = 6;
   */
  NODE = 6,

  /**
   * @generated from enum value: SUBSCRIPTION_TYPE_USER = 7;
   */
  USER = 7,

  /**
   * @generated from enum value: SUBSCRIPTION_TYPE_ROLE = 8;
   */
  ROLE = 8,
}

/**
 * Describes the enum aquarium.v2.SubscriptionType.
 */
export const SubscriptionTypeSchema: GenEnum<SubscriptionType> = /*@__PURE__*/
  enumDesc(file_aquarium_v2_streaming, 0);

/**
 * Types of database changes
 *
 * @generated from enum aquarium.v2.ChangeType
 */
export enum ChangeType {
  /**
   * @generated from enum value: CHANGE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CHANGE_TYPE_CREATED = 1;
   */
  CREATED = 1,

  /**
   * @generated from enum value: CHANGE_TYPE_UPDATED = 2;
   */
  UPDATED = 2,

  /**
   * @generated from enum value: CHANGE_TYPE_REMOVED = 3;
   */
  REMOVED = 3,
}

/**
 * Describes the enum aquarium.v2.ChangeType.
 */
export const ChangeTypeSchema: GenEnum<ChangeType> = /*@__PURE__*/
  enumDesc(file_aquarium_v2_streaming, 1);

/**
 * StreamingService handles bidirectional streaming and subscriptions
 *
 * @generated from service aquarium.v2.StreamingService
 */
export const StreamingService: GenService<{
  /**
   * Connect establishes a bidirectional stream for RPC requests/responses
   *
   * @generated from rpc aquarium.v2.StreamingService.Connect
   */
  connect: {
    methodKind: "bidi_streaming";
    input: typeof StreamingServiceConnectRequestSchema;
    output: typeof StreamingServiceConnectResponseSchema;
  },
  /**
   * Subscribe establishes a server stream for database change notifications
   *
   * @generated from rpc aquarium.v2.StreamingService.Subscribe
   */
  subscribe: {
    methodKind: "server_streaming";
    input: typeof StreamingServiceSubscribeRequestSchema;
    output: typeof StreamingServiceSubscribeResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_aquarium_v2_streaming, 0);

