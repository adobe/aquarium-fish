// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.

// Author: Sergei Parshev (@sparshev)

// @generated by protoc-gen-es v2.6.2 with parameter "target=ts"
// @generated from file aquarium/v2/node.proto (package aquarium.v2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_aquarium_v2_options_streaming } from "./options_streaming_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file aquarium/v2/node.proto.
 */
export const file_aquarium_v2_node: GenFile = /*@__PURE__*/
  fileDesc("ChZhcXVhcml1bS92Mi9ub2RlLnByb3RvEgthcXVhcml1bS52MiL7AQoETm9kZRILCgN1aWQYASABKAkSLgoKY3JlYXRlZF9hdBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKdXBkYXRlZF9hdBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASDAoEbmFtZRgEIAEoCRIvCgpkZWZpbml0aW9uGAUgASgLMhsuYXF1YXJpdW0udjIuTm9kZURlZmluaXRpb24SEAoIbG9jYXRpb24YBiABKAkSDwoHYWRkcmVzcxgHIAEoCRIOCgZwdWJrZXkYCCABKAw6FIq1GBAKDk5vZGVTZXJ2aWNlR2V0IqsCCg5Ob2RlRGVmaW5pdGlvbhIjCgRob3N0GAEgASgLMhUuYXF1YXJpdW0udjIuSG9zdEluZm8SJwoGbWVtb3J5GAIgASgLMhcuYXF1YXJpdW0udjIuTWVtb3J5SW5mbxIhCgNjcHUYAyADKAsyFC5hcXVhcml1bS52Mi5DcHVJbmZvEjUKBWRpc2tzGAQgAygLMiYuYXF1YXJpdW0udjIuTm9kZURlZmluaXRpb24uRGlza3NFbnRyeRIrCgRuZXRzGAUgAygLMh0uYXF1YXJpdW0udjIuTmV0d29ya0ludGVyZmFjZRpECgpEaXNrc0VudHJ5EgsKA2tleRgBIAEoCRIlCgV2YWx1ZRgCIAEoCzIWLmFxdWFyaXVtLnYyLkRpc2tVc2FnZToCOAEimgEKCEhvc3RJbmZvEhAKCGhvc3RuYW1lGAEgASgJEgoKAm9zGAIgASgJEhAKCHBsYXRmb3JtGAMgASgJEhcKD3BsYXRmb3JtX2ZhbWlseRgEIAEoCRIYChBwbGF0Zm9ybV92ZXJzaW9uGAUgASgJEhYKDmtlcm5lbF92ZXJzaW9uGAYgASgJEhMKC2tlcm5lbF9hcmNoGAcgASgJIlIKCk1lbW9yeUluZm8SDQoFdG90YWwYASABKAQSEQoJYXZhaWxhYmxlGAIgASgEEgwKBHVzZWQYAyABKAQSFAoMdXNlZF9wZXJjZW50GAQgASgCItcBCgdDcHVJbmZvEgsKA2NwdRgBIAEoCRIRCgl2ZW5kb3JfaWQYAiABKAkSDgoGZmFtaWx5GAMgASgJEg0KBW1vZGVsGAQgASgJEhAKCHN0ZXBwaW5nGAUgASgJEhMKC3BoeXNpY2FsX2lkGAYgASgJEg8KB2NvcmVfaWQYByABKAkSDQoFY29yZXMYCCABKAUSEgoKbW9kZWxfbmFtZRgJIAEoCRILCgNtaHoYCiABKAISEgoKY2FjaGVfc2l6ZRgLIAEoCRIRCgltaWNyb2NvZGUYDCABKAkiagoJRGlza1VzYWdlEgwKBHBhdGgYASABKAkSDgoGZnN0eXBlGAIgASgJEg0KBXRvdGFsGAMgASgEEgwKBGZyZWUYBCABKAQSDAoEdXNlZBgFIAEoBBIUCgx1c2VkX3BlcmNlbnQYBiABKAIiPgoQTmV0d29ya0ludGVyZmFjZRIMCgRuYW1lGAEgASgJEg0KBWFkZHJzGAIgAygJEg0KBWZsYWdzGAMgAygJIhgKFk5vZGVTZXJ2aWNlTGlzdFJlcXVlc3QiWwoXTm9kZVNlcnZpY2VMaXN0UmVzcG9uc2USDgoGc3RhdHVzGAEgASgIEg8KB21lc3NhZ2UYAiABKAkSHwoEZGF0YRgDIAMoCzIRLmFxdWFyaXVtLnYyLk5vZGUiKgoVTm9kZVNlcnZpY2VHZXRSZXF1ZXN0EhEKCW5vZGVfbmFtZRgBIAEoCSJaChZOb2RlU2VydmljZUdldFJlc3BvbnNlEg4KBnN0YXR1cxgBIAEoCBIPCgdtZXNzYWdlGAIgASgJEh8KBGRhdGEYAyABKAsyES5hcXVhcml1bS52Mi5Ob2RlIhsKGU5vZGVTZXJ2aWNlR2V0VGhpc1JlcXVlc3QiXgoaTm9kZVNlcnZpY2VHZXRUaGlzUmVzcG9uc2USDgoGc3RhdHVzGAEgASgIEg8KB21lc3NhZ2UYAiABKAkSHwoEZGF0YRgDIAEoCzIRLmFxdWFyaXVtLnYyLk5vZGUioAEKIE5vZGVTZXJ2aWNlU2V0TWFpbnRlbmFuY2VSZXF1ZXN0EhgKC21haW50ZW5hbmNlGAEgASgISACIAQESFQoIc2h1dGRvd24YAiABKAhIAYgBARIbCg5zaHV0ZG93bl9kZWxheRgDIAEoCUgCiAEBQg4KDF9tYWludGVuYW5jZUILCglfc2h1dGRvd25CEQoPX3NodXRkb3duX2RlbGF5IkQKIU5vZGVTZXJ2aWNlU2V0TWFpbnRlbmFuY2VSZXNwb25zZRIOCgZzdGF0dXMYASABKAgSDwoHbWVzc2FnZRgCIAEoCTKFAwoLTm9kZVNlcnZpY2USUwoETGlzdBIjLmFxdWFyaXVtLnYyLk5vZGVTZXJ2aWNlTGlzdFJlcXVlc3QaJC5hcXVhcml1bS52Mi5Ob2RlU2VydmljZUxpc3RSZXNwb25zZSIAElAKA0dldBIiLmFxdWFyaXVtLnYyLk5vZGVTZXJ2aWNlR2V0UmVxdWVzdBojLmFxdWFyaXVtLnYyLk5vZGVTZXJ2aWNlR2V0UmVzcG9uc2UiABJcCgdHZXRUaGlzEiYuYXF1YXJpdW0udjIuTm9kZVNlcnZpY2VHZXRUaGlzUmVxdWVzdBonLmFxdWFyaXVtLnYyLk5vZGVTZXJ2aWNlR2V0VGhpc1Jlc3BvbnNlIgAScQoOU2V0TWFpbnRlbmFuY2USLS5hcXVhcml1bS52Mi5Ob2RlU2VydmljZVNldE1haW50ZW5hbmNlUmVxdWVzdBouLmFxdWFyaXVtLnYyLk5vZGVTZXJ2aWNlU2V0TWFpbnRlbmFuY2VSZXNwb25zZSIAQkVaQ2dpdGh1Yi5jb20vYWRvYmUvYXF1YXJpdW0tZmlzaC9saWIvcnBjL3Byb3RvL2FxdWFyaXVtL3YyO2FxdWFyaXVtdjJiBnByb3RvMw", [file_google_protobuf_timestamp, file_aquarium_v2_options_streaming]);

/**
 * Node represents a node in the system
 *
 * Each node need to report it's status and ensure there is no duplications and to perform the
 * cluster worker election process properly.
 *
 * Could be created by the node itself and updated by the same node.
 *
 * @generated from message aquarium.v2.Node
 */
export type Node = Message<"aquarium.v2.Node"> & {
  /**
   * @generated from field: string uid = 1;
   */
  uid: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 3;
   */
  updatedAt?: Timestamp;

  /**
   * Unique name of the Node
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * @generated from field: aquarium.v2.NodeDefinition definition = 5;
   */
  definition?: NodeDefinition;

  /**
   * Where the Node is located
   *
   * @generated from field: string location = 6;
   */
  location: string;

  /**
   * External address to reach the Node from outside
   *
   * @generated from field: string address = 7;
   */
  address: string;

  /**
   * The node public key to verify on secondary connections and signatures
   *
   * @generated from field: bytes pubkey = 8;
   */
  pubkey: Uint8Array;
};

/**
 * Describes the message aquarium.v2.Node.
 * Use `create(NodeSchema)` to create a new message.
 */
export const NodeSchema: GenMessage<Node> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_node, 0);

/**
 * NodeDefinition contains technical information about the node
 *
 * @generated from message aquarium.v2.NodeDefinition
 */
export type NodeDefinition = Message<"aquarium.v2.NodeDefinition"> & {
  /**
   * @generated from field: aquarium.v2.HostInfo host = 1;
   */
  host?: HostInfo;

  /**
   * @generated from field: aquarium.v2.MemoryInfo memory = 2;
   */
  memory?: MemoryInfo;

  /**
   * @generated from field: repeated aquarium.v2.CpuInfo cpu = 3;
   */
  cpu: CpuInfo[];

  /**
   * @generated from field: map<string, aquarium.v2.DiskUsage> disks = 4;
   */
  disks: { [key: string]: DiskUsage };

  /**
   * @generated from field: repeated aquarium.v2.NetworkInterface nets = 5;
   */
  nets: NetworkInterface[];
};

/**
 * Describes the message aquarium.v2.NodeDefinition.
 * Use `create(NodeDefinitionSchema)` to create a new message.
 */
export const NodeDefinitionSchema: GenMessage<NodeDefinition> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_node, 1);

/**
 * HostInfo represents host system information
 *
 * @generated from message aquarium.v2.HostInfo
 */
export type HostInfo = Message<"aquarium.v2.HostInfo"> & {
  /**
   * @generated from field: string hostname = 1;
   */
  hostname: string;

  /**
   * @generated from field: string os = 2;
   */
  os: string;

  /**
   * @generated from field: string platform = 3;
   */
  platform: string;

  /**
   * @generated from field: string platform_family = 4;
   */
  platformFamily: string;

  /**
   * @generated from field: string platform_version = 5;
   */
  platformVersion: string;

  /**
   * @generated from field: string kernel_version = 6;
   */
  kernelVersion: string;

  /**
   * @generated from field: string kernel_arch = 7;
   */
  kernelArch: string;
};

/**
 * Describes the message aquarium.v2.HostInfo.
 * Use `create(HostInfoSchema)` to create a new message.
 */
export const HostInfoSchema: GenMessage<HostInfo> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_node, 2);

/**
 * MemoryInfo represents memory statistics
 *
 * @generated from message aquarium.v2.MemoryInfo
 */
export type MemoryInfo = Message<"aquarium.v2.MemoryInfo"> & {
  /**
   * @generated from field: uint64 total = 1;
   */
  total: bigint;

  /**
   * @generated from field: uint64 available = 2;
   */
  available: bigint;

  /**
   * @generated from field: uint64 used = 3;
   */
  used: bigint;

  /**
   * @generated from field: float used_percent = 4;
   */
  usedPercent: number;
};

/**
 * Describes the message aquarium.v2.MemoryInfo.
 * Use `create(MemoryInfoSchema)` to create a new message.
 */
export const MemoryInfoSchema: GenMessage<MemoryInfo> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_node, 3);

/**
 * CpuInfo represents CPU information
 *
 * @generated from message aquarium.v2.CpuInfo
 */
export type CpuInfo = Message<"aquarium.v2.CpuInfo"> & {
  /**
   * @generated from field: string cpu = 1;
   */
  cpu: string;

  /**
   * @generated from field: string vendor_id = 2;
   */
  vendorId: string;

  /**
   * @generated from field: string family = 3;
   */
  family: string;

  /**
   * @generated from field: string model = 4;
   */
  model: string;

  /**
   * @generated from field: string stepping = 5;
   */
  stepping: string;

  /**
   * @generated from field: string physical_id = 6;
   */
  physicalId: string;

  /**
   * @generated from field: string core_id = 7;
   */
  coreId: string;

  /**
   * @generated from field: int32 cores = 8;
   */
  cores: number;

  /**
   * @generated from field: string model_name = 9;
   */
  modelName: string;

  /**
   * @generated from field: float mhz = 10;
   */
  mhz: number;

  /**
   * @generated from field: string cache_size = 11;
   */
  cacheSize: string;

  /**
   * @generated from field: string microcode = 12;
   */
  microcode: string;
};

/**
 * Describes the message aquarium.v2.CpuInfo.
 * Use `create(CpuInfoSchema)` to create a new message.
 */
export const CpuInfoSchema: GenMessage<CpuInfo> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_node, 4);

/**
 * DiskUsage represents disk usage statistics
 *
 * @generated from message aquarium.v2.DiskUsage
 */
export type DiskUsage = Message<"aquarium.v2.DiskUsage"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string fstype = 2;
   */
  fstype: string;

  /**
   * @generated from field: uint64 total = 3;
   */
  total: bigint;

  /**
   * @generated from field: uint64 free = 4;
   */
  free: bigint;

  /**
   * @generated from field: uint64 used = 5;
   */
  used: bigint;

  /**
   * @generated from field: float used_percent = 6;
   */
  usedPercent: number;
};

/**
 * Describes the message aquarium.v2.DiskUsage.
 * Use `create(DiskUsageSchema)` to create a new message.
 */
export const DiskUsageSchema: GenMessage<DiskUsage> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_node, 5);

/**
 * NetworkInterface represents network interface information
 *
 * @generated from message aquarium.v2.NetworkInterface
 */
export type NetworkInterface = Message<"aquarium.v2.NetworkInterface"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: repeated string addrs = 2;
   */
  addrs: string[];

  /**
   * @generated from field: repeated string flags = 3;
   */
  flags: string[];
};

/**
 * Describes the message aquarium.v2.NetworkInterface.
 * Use `create(NetworkInterfaceSchema)` to create a new message.
 */
export const NetworkInterfaceSchema: GenMessage<NetworkInterface> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_node, 6);

/**
 * @generated from message aquarium.v2.NodeServiceListRequest
 */
export type NodeServiceListRequest = Message<"aquarium.v2.NodeServiceListRequest"> & {
};

/**
 * Describes the message aquarium.v2.NodeServiceListRequest.
 * Use `create(NodeServiceListRequestSchema)` to create a new message.
 */
export const NodeServiceListRequestSchema: GenMessage<NodeServiceListRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_node, 7);

/**
 * @generated from message aquarium.v2.NodeServiceListResponse
 */
export type NodeServiceListResponse = Message<"aquarium.v2.NodeServiceListResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: repeated aquarium.v2.Node data = 3;
   */
  data: Node[];
};

/**
 * Describes the message aquarium.v2.NodeServiceListResponse.
 * Use `create(NodeServiceListResponseSchema)` to create a new message.
 */
export const NodeServiceListResponseSchema: GenMessage<NodeServiceListResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_node, 8);

/**
 * @generated from message aquarium.v2.NodeServiceGetRequest
 */
export type NodeServiceGetRequest = Message<"aquarium.v2.NodeServiceGetRequest"> & {
  /**
   * @generated from field: string node_name = 1;
   */
  nodeName: string;
};

/**
 * Describes the message aquarium.v2.NodeServiceGetRequest.
 * Use `create(NodeServiceGetRequestSchema)` to create a new message.
 */
export const NodeServiceGetRequestSchema: GenMessage<NodeServiceGetRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_node, 9);

/**
 * @generated from message aquarium.v2.NodeServiceGetResponse
 */
export type NodeServiceGetResponse = Message<"aquarium.v2.NodeServiceGetResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: aquarium.v2.Node data = 3;
   */
  data?: Node;
};

/**
 * Describes the message aquarium.v2.NodeServiceGetResponse.
 * Use `create(NodeServiceGetResponseSchema)` to create a new message.
 */
export const NodeServiceGetResponseSchema: GenMessage<NodeServiceGetResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_node, 10);

/**
 * @generated from message aquarium.v2.NodeServiceGetThisRequest
 */
export type NodeServiceGetThisRequest = Message<"aquarium.v2.NodeServiceGetThisRequest"> & {
};

/**
 * Describes the message aquarium.v2.NodeServiceGetThisRequest.
 * Use `create(NodeServiceGetThisRequestSchema)` to create a new message.
 */
export const NodeServiceGetThisRequestSchema: GenMessage<NodeServiceGetThisRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_node, 11);

/**
 * @generated from message aquarium.v2.NodeServiceGetThisResponse
 */
export type NodeServiceGetThisResponse = Message<"aquarium.v2.NodeServiceGetThisResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: aquarium.v2.Node data = 3;
   */
  data?: Node;
};

/**
 * Describes the message aquarium.v2.NodeServiceGetThisResponse.
 * Use `create(NodeServiceGetThisResponseSchema)` to create a new message.
 */
export const NodeServiceGetThisResponseSchema: GenMessage<NodeServiceGetThisResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_node, 12);

/**
 * @generated from message aquarium.v2.NodeServiceSetMaintenanceRequest
 */
export type NodeServiceSetMaintenanceRequest = Message<"aquarium.v2.NodeServiceSetMaintenanceRequest"> & {
  /**
   * Enable or disable maintenance mode
   *
   * @generated from field: optional bool maintenance = 1;
   */
  maintenance?: boolean;

  /**
   * Safely stops the Node. It will wait in maintenance mode until all the Applicaions are
   * done and then exit. If Node deployed as a service - then will be restarted immediately,
   * otherwise will just stop. Could be cancelled by stop=false.
   *
   * @generated from field: optional bool shutdown = 2;
   */
  shutdown?: boolean;

  /**
   * How much Node should wait in maintenance mode before exit (ex. "1h10m30s")
   *
   * @generated from field: optional string shutdown_delay = 3;
   */
  shutdownDelay?: string;
};

/**
 * Describes the message aquarium.v2.NodeServiceSetMaintenanceRequest.
 * Use `create(NodeServiceSetMaintenanceRequestSchema)` to create a new message.
 */
export const NodeServiceSetMaintenanceRequestSchema: GenMessage<NodeServiceSetMaintenanceRequest> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_node, 13);

/**
 * @generated from message aquarium.v2.NodeServiceSetMaintenanceResponse
 */
export type NodeServiceSetMaintenanceResponse = Message<"aquarium.v2.NodeServiceSetMaintenanceResponse"> & {
  /**
   * @generated from field: bool status = 1;
   */
  status: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message aquarium.v2.NodeServiceSetMaintenanceResponse.
 * Use `create(NodeServiceSetMaintenanceResponseSchema)` to create a new message.
 */
export const NodeServiceSetMaintenanceResponseSchema: GenMessage<NodeServiceSetMaintenanceResponse> = /*@__PURE__*/
  messageDesc(file_aquarium_v2_node, 14);

/**
 * NodeService handles node management operations
 *
 * @generated from service aquarium.v2.NodeService
 */
export const NodeService: GenService<{
  /**
   * Get list of nodes
   *
   * @generated from rpc aquarium.v2.NodeService.List
   */
  list: {
    methodKind: "unary";
    input: typeof NodeServiceListRequestSchema;
    output: typeof NodeServiceListResponseSchema;
  },
  /**
   * Get node by unique name
   *
   * @generated from rpc aquarium.v2.NodeService.Get
   */
  get: {
    methodKind: "unary";
    input: typeof NodeServiceGetRequestSchema;
    output: typeof NodeServiceGetResponseSchema;
  },
  /**
   * Get this node information
   *
   * @generated from rpc aquarium.v2.NodeService.GetThis
   */
  getThis: {
    methodKind: "unary";
    input: typeof NodeServiceGetThisRequestSchema;
    output: typeof NodeServiceGetThisResponseSchema;
  },
  /**
   * Set maintenance mode
   *
   * In maintenance mode the node still a part of the cluster, but not taking any new App to
   * execute. If the Node have some workloads executing - it will wait in maintenance mode until
   * they will be completed.
   *
   * @generated from rpc aquarium.v2.NodeService.SetMaintenance
   */
  setMaintenance: {
    methodKind: "unary";
    input: typeof NodeServiceSetMaintenanceRequestSchema;
    output: typeof NodeServiceSetMaintenanceResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_aquarium_v2_node, 0);

