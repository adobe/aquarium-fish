/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by Aquarium buf-gen-web-ui-components. DO NOT EDIT.

import React, { useState, useEffect, useRef } from 'react';
import { create } from '@bufbuild/protobuf';
import { RoleSchema, type Role } from '../../gen/aquarium/v2/role_pb';
import * as yaml from 'js-yaml';
import * as Components from './index';
import { useStreaming } from '../../app/contexts/StreamingContext';

interface RoleFormProps {
  mode: 'create' | 'edit' | 'view';
  initialData?: Role;
  onSubmit: (data: Role) => void;
  onCancel: () => void;
  title?: string;
  readonly?: boolean;
  nested?: boolean;
  onRegister?: (getData: () => any, validateFn: () => boolean) => void;
  onFormChange?: (hasChanges: boolean) => void;
}

interface RoleFormState {
  name: string;
  createdAt: string;
  updatedAt: string;
  permissions: any;
}
const defaultRoleState: RoleFormState = {
  name: '',
  createdAt: '',
  updatedAt: '',
  permissions: [],
};


export const RoleForm: React.FC<RoleFormProps> = ({
  initialData,
  onSubmit,
  onCancel,
  mode,
  title,
  readonly,
  nested = false,
  onRegister,
  onFormChange
}) => {
  const [formData, setFormData] = useState<RoleFormState>(defaultRoleState);
  const [yamlText, setYamlText] = useState('');
  const [showYamlInput, setShowYamlInput] = useState(false);
  const [yamlError, setYamlError] = useState<string | null>(null);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [autofillMode, setAutofillMode] = useState<Record<string, 'dropdown' | 'text'>>({});
  const [structFieldText, setStructFieldText] = useState<Record<string, string>>({});
  const [structFieldErrors, setStructFieldErrors] = useState<Record<string, string>>({});
  const [hasChanges, setHasChanges] = useState(false);
  const { data } = useStreaming();

  // Store references to nested component getData and validate functions
  const nestedGetDataFns = useRef<Record<string, () => any>>({});
  const nestedValidateFns = useRef<Record<string, () => boolean>>({});
  const initialFormDataRef = useRef<RoleFormState>(defaultRoleState);

  // Initialize form data from initialData
  useEffect(() => {
    if (initialData) {
      const newFormData: RoleFormState = {
        name: initialData.name !== undefined && initialData.name !== null ? initialData.name : '',
        createdAt: initialData.createdAt ? new Date(Number(initialData.createdAt.seconds) * 1000).toISOString().slice(0, 16) : '',
        updatedAt: initialData.updatedAt ? new Date(Number(initialData.updatedAt.seconds) * 1000).toISOString().slice(0, 16) : '',
        permissions: initialData.permissions || [],
      };
      setFormData(newFormData);
      initialFormDataRef.current = newFormData;

      // Initialize struct field text
      const newStructText: Record<string, string> = {};
      setStructFieldText(newStructText);
    }
  }, [initialData]);

  // Track form changes
  useEffect(() => {
    if (mode === 'view' || readonly) {
      setHasChanges(false);
      return;
    }

    // Compare current form data with initial data
    const dataChanged = JSON.stringify(formData) !== JSON.stringify(initialFormDataRef.current);
    setHasChanges(dataChanged);

    // Notify parent if callback provided
    if (onFormChange) {
      onFormChange(dataChanged);
    }
  }, [formData, mode, readonly, onFormChange]);

  // Register getData and validate functions with parent if nested
  useEffect(() => {
    if (nested && onRegister) {
      onRegister(getData, validateForm);
    }
  }, [nested, onRegister, formData]);

  // Function to collect data from this component and all nested components
  const getData = () => {
    const currentFormData = { ...formData };

    // Collect data from nested components
    Object.keys(nestedGetDataFns.current).forEach(key => {
      const nestedGetData = nestedGetDataFns.current[key];
      if (nestedGetData) {
        const nestedData = nestedGetData();

        // Handle array items: key format is "fieldName[index]"
        const arrayMatch = key.match(/^(.+?)\[(\d+)\]$/);
        if (arrayMatch) {
          const fieldName = arrayMatch[1];
          const index = parseInt(arrayMatch[2], 10);
          if (!Array.isArray(currentFormData[fieldName as keyof RoleFormState])) {
            currentFormData[fieldName as keyof RoleFormState] = [] as any;
          }
          (currentFormData[fieldName as keyof RoleFormState] as any[])[index] = nestedData;
        } else if (key.includes('.')) {
          // Handle map items: key format is "fieldName.mapKey"
          const dotIndex = key.indexOf('.');
          const fieldName = key.substring(0, dotIndex);
          const mapKey = key.substring(dotIndex + 1);
          if (!currentFormData[fieldName as keyof RoleFormState] || typeof currentFormData[fieldName as keyof RoleFormState] !== 'object') {
            currentFormData[fieldName as keyof RoleFormState] = {} as any;
          }
          (currentFormData[fieldName as keyof RoleFormState] as any)[mapKey] = nestedData;
        } else {
          // Regular nested field
          currentFormData[key as keyof RoleFormState] = nestedData;
        }
      }
    });

    return currentFormData;
  };

  // Register a nested component's getData and validate functions
  const registerNestedGetData = (fieldName: string, getDataFn: () => any, validateFn?: () => boolean) => {
    nestedGetDataFns.current[fieldName] = getDataFn;
    if (validateFn) {
      nestedValidateFns.current[fieldName] = validateFn;
    }
  };

  // Unregister a nested component's getData and validate functions
  const unregisterNestedGetData = (fieldName: string) => {
    delete nestedGetDataFns.current[fieldName];
    delete nestedValidateFns.current[fieldName];
  };


  // Toggle YAML view and sync with current form data
const handleToggleYamlView = () => {
  if (!showYamlInput) {
    // Switching to YAML view - export current form data to YAML
    try {
      const data = create(RoleSchema, {
        name: formData.name,
        createdAt: formData.createdAt ? { seconds: BigInt(Math.floor(new Date(formData.createdAt).getTime() / 1000)) } : undefined,
        updatedAt: formData.updatedAt ? { seconds: BigInt(Math.floor(new Date(formData.updatedAt).getTime() / 1000)) } : undefined,
        permissions: formData.permissions,
      });

      // Convert protobuf to plain object for YAML
      const plainObj = JSON.parse(JSON.stringify(data, (key, value) =>
        typeof value === 'bigint' ? value.toString() : value
      ));

      const yamlStr = yaml.dump(plainObj, { indent: 2, lineWidth: -1 });
      setYamlText(yamlStr);
      setYamlError(null);
    } catch (error) {
      setYamlError('Failed to convert to YAML: ' + error);
    }
  }
  setShowYamlInput(!showYamlInput);
};

// Load from YAML (apply changes)
const handleYamlApply = () => {
  try {
    setYamlError(null);
    const parsedData = yaml.load(yamlText) as any;

    if (!parsedData || typeof parsedData !== 'object') {
      throw new Error('Invalid YAML format');
    }

    const newFormData: RoleFormState = { ...defaultRoleState };
    if (parsedData.name !== undefined) {
      newFormData.name = parsedData.name;
    }
    if (parsedData.createdAt !== undefined) {
      if (typeof parsedData.createdAt === 'string') {
        newFormData.createdAt = new Date(parsedData.createdAt).toISOString().slice(0, 16);
      }
    }
    if (parsedData.updatedAt !== undefined) {
      if (typeof parsedData.updatedAt === 'string') {
        newFormData.updatedAt = new Date(parsedData.updatedAt).toISOString().slice(0, 16);
      }
    }
    if (parsedData.permissions !== undefined) {
      if (Array.isArray(parsedData.permissions)) {
        newFormData.permissions = parsedData.permissions;
      }
    }

    setFormData(newFormData);
    setShowYamlInput(false);
  } catch (error) {
    setYamlError('YAML parsing error: ' + error);
  }
};

// Copy YAML to clipboard
const handleCopyYaml = () => {
  navigator.clipboard.writeText(yamlText).then(() => {
    alert('YAML copied to clipboard!');
  }).catch(() => {
    alert('Failed to copy to clipboard');
  });
};

// Validate form data
const validateForm = (dataToValidate?: any): boolean => {
  const data = dataToValidate || formData;
  const errors: Record<string, string> = {};
  if (data.name === undefined || data.name === null || data.name === '') {
    errors.name = 'Name is required';
  }
  if (mode !== 'create' && (data.createdAt === undefined || data.createdAt === null || data.createdAt === '')) {
    errors.createdAt = 'Created At is required';
  }
  if (mode !== 'create' && (data.updatedAt === undefined || data.updatedAt === null || data.updatedAt === '')) {
    errors.updatedAt = 'Updated At is required';
  }
  if (data.permissions === undefined || data.permissions === null || data.permissions === '' || data.permissions.length === 0) {
    errors.permissions = 'Permissions is required';
  }

  setValidationErrors(errors);

  // Validate all nested components
  let allNestedValid = true;
  Object.keys(nestedValidateFns.current).forEach(key => {
    const nestedValidate = nestedValidateFns.current[key];
    if (nestedValidate) {
      const isValid = nestedValidate();
      if (!isValid) {
        allNestedValid = false;
      }
    }
  });

  return Object.keys(errors).length === 0 && allNestedValid;
};

// Handle form submission
const handleSubmit = () => {
  // First, collect data from nested components to ensure we have the latest values
  // This fixes race conditions where nested components haven't updated the parent yet
  const collectedData = getData();
  console.debug("Form data:", collectedData);

  // Validate using the collected data, not the stale formData state
  if (!validateForm(collectedData)) {
    return;
  }

  try {
    // Convert form data to protobuf message using collected data
    const data = create(RoleSchema, {
      name: collectedData.name,
      createdAt: collectedData.createdAt ? { seconds: BigInt(Math.floor(new Date(collectedData.createdAt).getTime() / 1000)) } : undefined,
      updatedAt: collectedData.updatedAt ? { seconds: BigInt(Math.floor(new Date(collectedData.updatedAt).getTime() / 1000)) } : undefined,
      permissions: collectedData.permissions,
    });

    onSubmit(data);
  } catch (error) {
    setYamlError('Failed to create Role: ' + error);
  }
};

// Handle field changes
const handleFieldChange = (field: string, value: any) => {
  setFormData(prev => ({
    ...prev,
    [field]: value
  }));

  // Clear validation error for this field
  if (validationErrors[field]) {
    setValidationErrors(prev => ({
      ...prev,
      [field]: ''
    }));
  }
};

// Handle array field changes
const handleArrayChange = (field: string, index: number, value: any) => {
  setFormData(prev => ({
    ...prev,
    [field]: prev[field as keyof RoleFormState].map((item: any, i: number) =>
      i === index ? value : item
    )
  }));
};

// Add array item
const addArrayItem = (field: string, defaultValue: any) => {
  setFormData(prev => ({
    ...prev,
    [field]: [...(prev[field as keyof RoleFormState] as any[]), defaultValue]
  }));
};

// Remove array item
const removeArrayItem = (field: string, index: number) => {
  // Unregister the nested component
  unregisterNestedGetData(field + '[' + index + ']');

  // Remove from formData
  setFormData(prev => ({
    ...prev,
    [field]: (prev[field as keyof RoleFormState] as any[]).filter((_, i) => i !== index)
  }));

  // Re-register remaining items with updated indices
  setTimeout(() => {
    const remainingItems = (formData[field as keyof RoleFormState] as any[]).length - 1;
    for (let i = index; i < remainingItems; i++) {
      const oldKey = field + '[' + (i + 1) + ']';
      const newKey = field + '[' + i + ']';
      if (nestedGetDataFns.current[oldKey]) {
        nestedGetDataFns.current[newKey] = nestedGetDataFns.current[oldKey];
        delete nestedGetDataFns.current[oldKey];
      }
    }
  }, 0);
};

const isReadOnly = readonly || mode === 'view';
const formTitle = title || (mode === 'create' ? 'Create Role' : mode === 'edit' ? 'Edit Role' : 'View Role');

// Helper function to get autofill options
const getAutofillOptions = (type: string) => {
  switch (type.toLowerCase()) {
    case 'label':
      return data.labels || [];
    case 'user':
      return data.users || [];
    case 'role':
      return data.roles || [];
    case 'node':
      return data.nodes || [];
    default:
      return [];
  }
};

// Helper function to parse struct field
const parseStructField = (fieldName: string, text: string) => {
  try {
    const parsed = yaml.load(text);
    if (parsed && typeof parsed === 'object') {
      handleFieldChange(fieldName, parsed);
      setStructFieldErrors(prev => ({ ...prev, [fieldName]: '' }));
    } else {
      setStructFieldErrors(prev => ({ ...prev, [fieldName]: 'Invalid YAML/JSON format' }));
    }
  } catch (error) {
    setStructFieldErrors(prev => ({ ...prev, [fieldName]: 'Parse error: ' + error }));
  }
};

// Helper function to determine if field is simple (can be inline)
const isSimpleField = (field: any) => {
  return !field.IsRepeated && !field.IsMap && !field.IsMessage && !field.IsStruct && !field.IsTimestamp && !field.AutofillType;
};


  return (
    <div className="space-y-4">
      {!nested && (
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
            {formTitle}
          </h2>
          <div className="flex space-x-2">
            <button
              onClick={handleToggleYamlView}
              className="px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-md hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-200"
            >
              {showYamlInput ? 'Hide YAML' : 'View YAML'}
            </button>
          </div>
        </div>
      )}

      {!nested && showYamlInput && (
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              YAML View
            </label>
            <textarea
              value={yamlText}
              onChange={(e) => setYamlText(e.target.value)}
              disabled={isReadOnly}
              className="w-full h-96 px-3 py-2 border border-gray-300 rounded-md font-mono text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              placeholder="YAML configuration..."
            />
          </div>
          <div className="flex space-x-2">
            <button
              onClick={handleCopyYaml}
              className="px-4 py-2 text-sm bg-green-600 text-white rounded-md hover:bg-green-700"
            >
              Copy to Clipboard
            </button>
            {!isReadOnly && (
              <button
                onClick={handleYamlApply}
                className="px-4 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                Apply Changes
              </button>
            )}
            <button
              onClick={() => setShowYamlInput(false)}
              className="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300"
            >
              Close
            </button>
          </div>
          {yamlError && (
            <div className="text-sm text-red-600 dark:text-red-400">
              {yamlError}
            </div>
          )}
        </div>
      )}

      {(!nested || !showYamlInput) && (
        <div className="space-y-3">
{/* Name field */}
  <div>
{/* Simple string field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Name *
    </label>
    <div className="relative group">
      <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
      <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
        <pre className="whitespace-pre-wrap text-xs leading-relaxed">Unique name of the role</pre>
      </div>
    </div>
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <input
      type="text"
      value={formData.name}
      onChange={(e) => handleFieldChange('name', e.target.value)}
      disabled={isReadOnly || (mode === 'edit' && false)}
      className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    {validationErrors.name && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.name}
      </div>
    )}
  </div>
</div>

  </div>{/* Created At field */}
  {!(mode === 'create' && true) && (
    <div>
{/* Timestamp field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Created At *
    </label>
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <input
      type="datetime-local"
      value={formData.createdAt}
      onChange={(e) => handleFieldChange('createdAt', e.target.value)}
      disabled={isReadOnly || (mode === 'edit' && true)}
      className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    {validationErrors.createdAt && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.createdAt}
      </div>
    )}
  </div>
</div>

    </div>
  )}{/* Updated At field */}
  {!(mode === 'create' && true) && (
    <div>
{/* Timestamp field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Updated At *
    </label>
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <input
      type="datetime-local"
      value={formData.updatedAt}
      onChange={(e) => handleFieldChange('updatedAt', e.target.value)}
      disabled={isReadOnly || (mode === 'edit' && true)}
      className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    {validationErrors.updatedAt && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.updatedAt}
      </div>
    )}
  </div>
</div>

    </div>
  )}{/* Permissions field */}
  <div>
    {/* Complex field - traditional layout */}
    <div className="space-y-2">
<div className="flex items-center space-x-2">
  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
    Permissions *
  </label>
  <div className="relative group">
    <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
    <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
      <pre className="whitespace-pre-wrap text-xs leading-relaxed">List of permissions granted to this role</pre>
    </div>
  </div>
</div>

<div className="space-y-3">
  {formData.permissions.map((item, index) => (
    <div key={index} className="relative border-2 border-gray-200 rounded-lg p-3 dark:border-gray-600 bg-gray-50 dark:bg-gray-800">
      {/* Nested component header */}
      <div className="flex items-center justify-between mb-3 pb-2 border-b border-gray-200 dark:border-gray-600">
        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300">
          Permissions {index + 1}
        </h4>
        {!isReadOnly && !(mode === 'edit' && false) && (
          <button
            type="button"
            onClick={() => removeArrayItem('permissions', index)}
            className="flex items-center justify-center w-6 h-6 text-red-500 hover:text-red-700 hover:bg-red-100 rounded-full transition-colors"
            title="Remove Permissions"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        )}
      </div>
      {(() => {
        const ComponentName = 'PermissionForm';
        const NestedComponent = (Components as any)[ComponentName];

        if (NestedComponent) {
          return (
            <div className="pl-2">
              <NestedComponent
                key={index}
                mode={mode}
                initialData={item}
                onSubmit={() => {}}
                onCancel={() => {}}
                title={'Permissions ' + (index + 1)}
                readonly={isReadOnly || (mode === 'edit' && false)}
                nested={true}
                onRegister={(getDataFn: () => any, validateFn: () => boolean) => registerNestedGetData('permissions[' + index + ']', getDataFn, validateFn)}
              />
            </div>
          );
        }

        // Fallback to textarea for JSON editing
        return (
          <div className="pl-2">
            <div className="text-sm text-gray-500 mb-2">
              Permission (Component not available - using JSON editor)
            </div>
            <textarea
              value={JSON.stringify(item, null, 2)}
              onChange={(e) => {
                try {
                  const parsed = JSON.parse(e.target.value);
                  handleArrayChange('permissions', index, parsed);
                } catch (error) {
                  // Invalid JSON, keep the text value for user to fix
                }
              }}
              disabled={isReadOnly || (mode === 'edit' && false)}
              className="w-full h-32 px-3 py-2 border border-gray-300 rounded-md font-mono text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white resize-none"
              placeholder="Enter JSON object for Permission..."
            />
          </div>
        );
      })()}
    </div>
  ))}
  {!isReadOnly && !(mode === 'edit' && false) && (
    <button
      onClick={() => addArrayItem('permissions', {})}
      className="w-full px-3 py-2 text-sm border-2 border-dashed border-gray-300 text-gray-600 rounded-md hover:border-green-400 hover:text-green-600 transition-colors"
    >
      + Add Permissions
    </button>
  )}
</div>

{validationErrors.permissions && (
  <div className="text-sm text-red-600 dark:text-red-400 mt-1">
    {validationErrors.permissions}
  </div>
)}

    </div>
  </div>

        </div>
      )}

      {!nested && (
        <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200 dark:border-gray-700">
          <button
            onClick={onCancel}
            className="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200"
          >
            {isReadOnly ? 'Close' : 'Cancel'}
          </button>
          {!isReadOnly && (
            <button
              onClick={handleSubmit}
              className="px-4 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              {mode === 'create' ? 'Create' : 'Save'}
            </button>
          )}
        </div>
      )}
    </div>
  );
};
