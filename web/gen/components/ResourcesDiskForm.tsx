/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by Aquarium buf-gen-web-ui-components. DO NOT EDIT.

import React, { useState, useEffect, useRef } from 'react';
import { create } from '@bufbuild/protobuf';
import { ResourcesDiskSchema, type ResourcesDisk } from '../../gen/aquarium/v2/label_pb';
import * as yaml from 'js-yaml';
import * as Components from './index';
import { useStreaming } from '../../app/contexts/StreamingContext';

interface ResourcesDiskFormProps {
  mode: 'create' | 'edit' | 'view';
  initialData?: ResourcesDisk;
  onSubmit: (data: ResourcesDisk) => void;
  onCancel: () => void;
  title?: string;
  readonly?: boolean;
  nested?: boolean;
  onRegister?: (getData: () => any) => void;
}

interface ResourcesDiskFormState {
  type: string;
  label: string;
  size: number;
  reuse: boolean;
  clone: string;
}
const defaultResourcesDiskState: ResourcesDiskFormState = {
  type: '',
  label: '',
  size: 0,
  reuse: false,
  clone: '',
};


export const ResourcesDiskForm: React.FC<ResourcesDiskFormProps> = ({
  initialData,
  onSubmit,
  onCancel,
  mode,
  title,
  readonly,
  nested = false,
  onRegister
}) => {
  const [formData, setFormData] = useState<ResourcesDiskFormState>(defaultResourcesDiskState);
  const [yamlText, setYamlText] = useState('');
  const [showYamlInput, setShowYamlInput] = useState(false);
  const [yamlError, setYamlError] = useState<string | null>(null);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [autofillMode, setAutofillMode] = useState<Record<string, 'dropdown' | 'text'>>({});
  const [structFieldText, setStructFieldText] = useState<Record<string, string>>({});
  const [structFieldErrors, setStructFieldErrors] = useState<Record<string, string>>({});
  const { data } = useStreaming();

  // Store references to nested component getData functions
  const nestedGetDataFns = useRef<Record<string, () => any>>({});

  // Initialize form data from initialData
  useEffect(() => {
    if (initialData) {
      const newFormData: ResourcesDiskFormState = {
        type: initialData.type || '',
        label: initialData.label || '',
        size: initialData.size || 0,
        reuse: initialData.reuse || false,
        clone: initialData.clone || '',
      };
      setFormData(newFormData);

      // Initialize struct field text
      const newStructText: Record<string, string> = {};
      setStructFieldText(newStructText);
    }
  }, [initialData]);

  // Register getData function with parent if nested
  useEffect(() => {
    if (nested && onRegister) {
      onRegister(getData);
    }
  }, [nested, onRegister]);

  // Function to collect data from this component and all nested components
  const getData = () => {
    const currentFormData = { ...formData };

    // Collect data from nested components
    Object.keys(nestedGetDataFns.current).forEach(key => {
      const nestedGetData = nestedGetDataFns.current[key];
      if (nestedGetData) {
        // Handle array items: key format is "fieldName[index]"
        const arrayMatch = key.match(/^(.+?)\[(\d+)\]$/);
        if (arrayMatch) {
          const fieldName = arrayMatch[1];
          const index = parseInt(arrayMatch[2], 10);
          if (!Array.isArray(currentFormData[fieldName as keyof ResourcesDiskFormState])) {
            currentFormData[fieldName as keyof ResourcesDiskFormState] = [] as any;
          }
          (currentFormData[fieldName as keyof ResourcesDiskFormState] as any[])[index] = nestedGetData();
        } else if (key.includes('.')) {
          // Handle map items: key format is "fieldName.mapKey"
          const dotIndex = key.indexOf('.');
          const fieldName = key.substring(0, dotIndex);
          const mapKey = key.substring(dotIndex + 1);
          if (!currentFormData[fieldName as keyof ResourcesDiskFormState] || typeof currentFormData[fieldName as keyof ResourcesDiskFormState] !== 'object') {
            currentFormData[fieldName as keyof ResourcesDiskFormState] = {} as any;
          }
          (currentFormData[fieldName as keyof ResourcesDiskFormState] as any)[mapKey] = nestedGetData();
        } else {
          // Regular nested field
          currentFormData[key as keyof ResourcesDiskFormState] = nestedGetData();
        }
      }
    });

    return currentFormData;
  };

  // Register a nested component's getData function
  const registerNestedGetData = (fieldName: string, getDataFn: () => any) => {
    nestedGetDataFns.current[fieldName] = getDataFn;
  };

  // Unregister a nested component's getData function
  const unregisterNestedGetData = (fieldName: string) => {
    delete nestedGetDataFns.current[fieldName];
  };


  // Toggle YAML view and sync with current form data
const handleToggleYamlView = () => {
  if (!showYamlInput) {
    // Switching to YAML view - export current form data to YAML
    try {
      const data = create(ResourcesDiskSchema, {
        type: formData.type,
        label: formData.label,
        size: formData.size,
        reuse: formData.reuse,
        clone: formData.clone,
      });

      // Convert protobuf to plain object for YAML
      const plainObj = JSON.parse(JSON.stringify(data, (key, value) =>
        typeof value === 'bigint' ? value.toString() : value
      ));

      const yamlStr = yaml.dump(plainObj, { indent: 2, lineWidth: -1 });
      setYamlText(yamlStr);
      setYamlError(null);
    } catch (error) {
      setYamlError('Failed to convert to YAML: ' + error);
    }
  }
  setShowYamlInput(!showYamlInput);
};

// Load from YAML (apply changes)
const handleYamlApply = () => {
  try {
    setYamlError(null);
    const parsedData = yaml.load(yamlText) as any;

    if (!parsedData || typeof parsedData !== 'object') {
      throw new Error('Invalid YAML format');
    }

    const newFormData: ResourcesDiskFormState = { ...defaultResourcesDiskState };
    if (parsedData.type !== undefined) {
      newFormData.type = parsedData.type;
    }
    if (parsedData.label !== undefined) {
      newFormData.label = parsedData.label;
    }
    if (parsedData.size !== undefined) {
      newFormData.size = parsedData.size;
    }
    if (parsedData.reuse !== undefined) {
      newFormData.reuse = parsedData.reuse;
    }
    if (parsedData.clone !== undefined) {
      newFormData.clone = parsedData.clone;
    }

    setFormData(newFormData);
    setShowYamlInput(false);
  } catch (error) {
    setYamlError('YAML parsing error: ' + error);
  }
};

// Copy YAML to clipboard
const handleCopyYaml = () => {
  navigator.clipboard.writeText(yamlText).then(() => {
    alert('YAML copied to clipboard!');
  }).catch(() => {
    alert('Failed to copy to clipboard');
  });
};

// Validate form data
const validateForm = (): boolean => {
  const errors: Record<string, string> = {};
  if (!formData.type) {
    errors.type = 'Type is required';
  }
  if (!formData.label) {
    errors.label = 'Label is required';
  }
  if (!formData.size) {
    errors.size = 'Size is required';
  }
  if (!formData.reuse) {
    errors.reuse = 'Reuse is required';
  }
  if (!formData.clone) {
    errors.clone = 'Clone is required';
  }

  setValidationErrors(errors);
  return Object.keys(errors).length === 0;
};

// Handle form submission
const handleSubmit = () => {
  if (!validateForm()) {
    return;
  }

  try {
    // Collect data from this component and all nested components
    const collectedData = getData();

    // Convert form data to protobuf message
    const data = create(ResourcesDiskSchema, {
      type: collectedData.type,
      label: collectedData.label,
      size: collectedData.size,
      reuse: collectedData.reuse,
      clone: collectedData.clone,
    });

    onSubmit(data);
  } catch (error) {
    setYamlError('Failed to create ResourcesDisk: ' + error);
  }
};

// Handle field changes
const handleFieldChange = (field: string, value: any) => {
  setFormData(prev => ({
    ...prev,
    [field]: value
  }));

  // Clear validation error for this field
  if (validationErrors[field]) {
    setValidationErrors(prev => ({
      ...prev,
      [field]: ''
    }));
  }
};

// Handle array field changes
const handleArrayChange = (field: string, index: number, value: any) => {
  setFormData(prev => ({
    ...prev,
    [field]: prev[field as keyof ResourcesDiskFormState].map((item: any, i: number) =>
      i === index ? value : item
    )
  }));
};

// Add array item
const addArrayItem = (field: string, defaultValue: any) => {
  setFormData(prev => ({
    ...prev,
    [field]: [...(prev[field as keyof ResourcesDiskFormState] as any[]), defaultValue]
  }));
};

// Remove array item
const removeArrayItem = (field: string, index: number) => {
  // Unregister the nested component
  unregisterNestedGetData(field + '[' + index + ']');

  // Remove from formData
  setFormData(prev => ({
    ...prev,
    [field]: (prev[field as keyof ResourcesDiskFormState] as any[]).filter((_, i) => i !== index)
  }));

  // Re-register remaining items with updated indices
  setTimeout(() => {
    const remainingItems = (formData[field as keyof ResourcesDiskFormState] as any[]).length - 1;
    for (let i = index; i < remainingItems; i++) {
      const oldKey = field + '[' + (i + 1) + ']';
      const newKey = field + '[' + i + ']';
      if (nestedGetDataFns.current[oldKey]) {
        nestedGetDataFns.current[newKey] = nestedGetDataFns.current[oldKey];
        delete nestedGetDataFns.current[oldKey];
      }
    }
  }, 0);
};

const isReadOnly = readonly || mode === 'view';
const formTitle = title || (mode === 'create' ? 'Create ResourcesDisk' : mode === 'edit' ? 'Edit ResourcesDisk' : 'View ResourcesDisk');

// Helper function to get autofill options
const getAutofillOptions = (type: string) => {
  switch (type.toLowerCase()) {
    case 'label':
      return data.labels || [];
    case 'user':
      return data.users || [];
    case 'role':
      return data.roles || [];
    case 'node':
      return data.nodes || [];
    default:
      return [];
  }
};

// Helper function to parse struct field
const parseStructField = (fieldName: string, text: string) => {
  try {
    const parsed = yaml.load(text);
    if (parsed && typeof parsed === 'object') {
      handleFieldChange(fieldName, parsed);
      setStructFieldErrors(prev => ({ ...prev, [fieldName]: '' }));
    } else {
      setStructFieldErrors(prev => ({ ...prev, [fieldName]: 'Invalid YAML/JSON format' }));
    }
  } catch (error) {
    setStructFieldErrors(prev => ({ ...prev, [fieldName]: 'Parse error: ' + error }));
  }
};

// Helper function to determine if field is simple (can be inline)
const isSimpleField = (field: any) => {
  return !field.IsRepeated && !field.IsMap && !field.IsMessage && !field.IsStruct && !field.IsTimestamp && !field.AutofillType;
};


  return (
    <div className="space-y-4">
      {!nested && (
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
            {formTitle}
          </h2>
          <div className="flex space-x-2">
            <button
              onClick={handleToggleYamlView}
              className="px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-md hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-200"
            >
              {showYamlInput ? 'Hide YAML' : 'View YAML'}
            </button>
          </div>
        </div>
      )}

      {!nested && showYamlInput && (
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              YAML View
            </label>
            <textarea
              value={yamlText}
              onChange={(e) => setYamlText(e.target.value)}
              disabled={isReadOnly}
              className="w-full h-96 px-3 py-2 border border-gray-300 rounded-md font-mono text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              placeholder="YAML configuration..."
            />
          </div>
          <div className="flex space-x-2">
            <button
              onClick={handleCopyYaml}
              className="px-4 py-2 text-sm bg-green-600 text-white rounded-md hover:bg-green-700"
            >
              Copy to Clipboard
            </button>
            {!isReadOnly && (
              <button
                onClick={handleYamlApply}
                className="px-4 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                Apply Changes
              </button>
            )}
            <button
              onClick={() => setShowYamlInput(false)}
              className="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300"
            >
              Close
            </button>
          </div>
          {yamlError && (
            <div className="text-sm text-red-600 dark:text-red-400">
              {yamlError}
            </div>
          )}
        </div>
      )}

      {(!nested || !showYamlInput) && (
        <div className="space-y-3">
{/* Type field */}
  <div>
{/* Simple string field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Type *
    </label>
    <div className="relative group">
      <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
      <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
        <pre className="whitespace-pre-wrap text-xs leading-relaxed">Type of the filesystem to create by Fish - usually handled by the formatter of the image</pre>
      </div>
    </div>
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <input
      type="text"
      value={formData.type}
      onChange={(e) => handleFieldChange('type', e.target.value)}
      disabled={isReadOnly || (mode === 'edit' && false)}
      className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    {validationErrors.type && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.type}
      </div>
    )}
  </div>
</div>

  </div>{/* Label field */}
  <div>
{/* Simple string field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Label *
    </label>
    <div className="relative group">
      <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
      <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
        <pre className="whitespace-pre-wrap text-xs leading-relaxed">Volume name will be given to the disk, empty will use the disk key</pre>
      </div>
    </div>
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <input
      type="text"
      value={formData.label}
      onChange={(e) => handleFieldChange('label', e.target.value)}
      disabled={isReadOnly || (mode === 'edit' && false)}
      className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    {validationErrors.label && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.label}
      </div>
    )}
  </div>
</div>

  </div>{/* Size field */}
  <div>
{/* Simple number field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Size *
    </label>
    <div className="relative group">
      <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
      <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
        <pre className="whitespace-pre-wrap text-xs leading-relaxed">Amount of disk space in GB for new disk, could not used if clone is set</pre>
      </div>
    </div>
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <input
      type="number"
      value={formData.size}
      onChange={(e) => handleFieldChange('size', parseInt(e.target.value) || 0)}
      disabled={isReadOnly || (mode === 'edit' && false)}
      className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    {validationErrors.size && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.size}
      </div>
    )}
  </div>
</div>

  </div>{/* Reuse field */}
  <div>
{/* Boolean field - inline layout with checkbox */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Reuse *
    </label>
    <div className="relative group">
      <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
      <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
        <pre className="whitespace-pre-wrap text-xs leading-relaxed">Do not remove the disk and reuse it for the next resource run</pre>
      </div>
    </div>
  </div>
  <div className="flex-1 max-w-xs ml-4 flex justify-start">
    <input
      type="checkbox"
      checked={formData.reuse}
      onChange={(e) => handleFieldChange('reuse', e.target.checked)}
      disabled={isReadOnly || (mode === 'edit' && false)}
      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
    />
    {validationErrors.reuse && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1 ml-2">
        {validationErrors.reuse}
      </div>
    )}
  </div>
</div>

  </div>{/* Clone field */}
  <div>
{/* Simple string field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Clone *
    </label>
    <div className="relative group">
      <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
      <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
        <pre className="whitespace-pre-wrap text-xs leading-relaxed">Clone the snapshot of existing disk instead of creating the new one</pre>
      </div>
    </div>
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <input
      type="text"
      value={formData.clone}
      onChange={(e) => handleFieldChange('clone', e.target.value)}
      disabled={isReadOnly || (mode === 'edit' && false)}
      className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    {validationErrors.clone && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.clone}
      </div>
    )}
  </div>
</div>

  </div>

        </div>
      )}

      {!nested && (
        <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200 dark:border-gray-700">
          <button
            onClick={onCancel}
            className="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200"
          >
            {isReadOnly ? 'Close' : 'Cancel'}
          </button>
          {!isReadOnly && (
            <button
              onClick={handleSubmit}
              className="px-4 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              {mode === 'create' ? 'Create' : 'Save'}
            </button>
          )}
        </div>
      )}
    </div>
  );
};
