/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by Aquarium buf-gen-web-ui-components. DO NOT EDIT.

import React, { useState, useEffect } from 'react';
import { create } from '@bufbuild/protobuf';
import { AuthenticationSchema, type Authentication } from '../../gen/aquarium/v2/common_pb';
import * as yaml from 'js-yaml';
import * as Components from './index';
import { useStreaming } from '../../app/contexts/StreamingContext';

interface AuthenticationFormProps {
  mode: 'create' | 'edit' | 'view';
  initialData?: Authentication;
  onSubmit: (data: Authentication) => void;
  onCancel: () => void;
  title?: string;
  readonly?: boolean;
  nested?: boolean;
}

interface AuthenticationFormState {
  username: string;
  password: string;
  key: string;
  port: number;
}
const defaultAuthenticationState: AuthenticationFormState = {
  username: '',
  password: '',
  key: '',
  port: 0,
};


export const AuthenticationForm: React.FC<AuthenticationFormProps> = ({
  initialData,
  onSubmit,
  onCancel,
  mode,
  title,
  readonly,
  nested = false
}) => {
  const [formData, setFormData] = useState<AuthenticationFormState>(defaultAuthenticationState);
  const [yamlText, setYamlText] = useState('');
  const [showYamlInput, setShowYamlInput] = useState(false);
  const [yamlError, setYamlError] = useState<string | null>(null);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [autofillMode, setAutofillMode] = useState<Record<string, 'dropdown' | 'text'>>({});
  const [structFieldText, setStructFieldText] = useState<Record<string, string>>({});
  const [structFieldErrors, setStructFieldErrors] = useState<Record<string, string>>({});
  const { data } = useStreaming();

  // Initialize form data from initialData
  useEffect(() => {
    if (initialData) {
      const newFormData: AuthenticationFormState = {
        username: initialData.username || '',
        password: initialData.password || '',
        key: initialData.key || '',
        port: initialData.port || 0,
      };
      setFormData(newFormData);

      // Initialize struct field text
      const newStructText: Record<string, string> = {};
      setStructFieldText(newStructText);
    }
  }, [initialData]);


  // Load from YAML
const handleYamlLoad = () => {
  try {
    setYamlError(null);
    const parsedData = yaml.load(yamlText) as any;

    if (!parsedData || typeof parsedData !== 'object') {
      throw new Error('Invalid YAML format');
    }

    const newFormData: AuthenticationFormState = { ...defaultAuthenticationState };
    if (parsedData.username !== undefined) {
      newFormData.username = parsedData.username;
    }
    if (parsedData.password !== undefined) {
      newFormData.password = parsedData.password;
    }
    if (parsedData.key !== undefined) {
      newFormData.key = parsedData.key;
    }
    if (parsedData.port !== undefined) {
      newFormData.port = parsedData.port;
    }

    setFormData(newFormData);
    setShowYamlInput(false);
  } catch (error) {
    setYamlError('YAML parsing error: ' + error);
  }
};

// Validate form data
const validateForm = (): boolean => {
  const errors: Record<string, string> = {};
  if (!formData.username) {
    errors.username = 'Username is required';
  }
  if (!formData.password) {
    errors.password = 'Password is required';
  }
  if (!formData.key) {
    errors.key = 'Key is required';
  }
  if (!formData.port) {
    errors.port = 'Port is required';
  }

  setValidationErrors(errors);
  return Object.keys(errors).length === 0;
};

// Handle form submission
const handleSubmit = () => {
  if (!validateForm()) {
    return;
  }

  try {
    // Convert form data to protobuf message
    const data = create(AuthenticationSchema, {
      username: formData.username,
      password: formData.password,
      key: formData.key,
      port: formData.port,
    });

    onSubmit(data);
  } catch (error) {
    setYamlError('Failed to create Authentication: ' + error);
  }
};

// Handle field changes
const handleFieldChange = (field: string, value: any) => {
  setFormData(prev => ({
    ...prev,
    [field]: value
  }));

  // Clear validation error for this field
  if (validationErrors[field]) {
    setValidationErrors(prev => ({
      ...prev,
      [field]: ''
    }));
  }
};

// Handle array field changes
const handleArrayChange = (field: string, index: number, value: any) => {
  setFormData(prev => ({
    ...prev,
    [field]: prev[field as keyof AuthenticationFormState].map((item: any, i: number) =>
      i === index ? value : item
    )
  }));
};

// Add array item
const addArrayItem = (field: string, defaultValue: any) => {
  setFormData(prev => ({
    ...prev,
    [field]: [...(prev[field as keyof AuthenticationFormState] as any[]), defaultValue]
  }));
};

// Remove array item
const removeArrayItem = (field: string, index: number) => {
  setFormData(prev => ({
    ...prev,
    [field]: (prev[field as keyof AuthenticationFormState] as any[]).filter((_, i) => i !== index)
  }));
};

const isReadOnly = readonly || mode === 'view';
const formTitle = title || (mode === 'create' ? 'Create Authentication' : mode === 'edit' ? 'Edit Authentication' : 'View Authentication');

// Helper function to get autofill options
const getAutofillOptions = (type: string) => {
  switch (type.toLowerCase()) {
    case 'label':
      return data.labels || [];
    case 'user':
      return data.users || [];
    case 'role':
      return data.roles || [];
    case 'node':
      return data.nodes || [];
    default:
      return [];
  }
};

// Helper function to parse struct field
const parseStructField = (fieldName: string, text: string) => {
  try {
    const parsed = yaml.load(text);
    if (parsed && typeof parsed === 'object') {
      handleFieldChange(fieldName, parsed);
      setStructFieldErrors(prev => ({ ...prev, [fieldName]: '' }));
    } else {
      setStructFieldErrors(prev => ({ ...prev, [fieldName]: 'Invalid YAML/JSON format' }));
    }
  } catch (error) {
    setStructFieldErrors(prev => ({ ...prev, [fieldName]: 'Parse error: ' + error }));
  }
};

// Helper function to determine if field is simple (can be inline)
const isSimpleField = (field: any) => {
  return !field.IsRepeated && !field.IsMap && !field.IsMessage && !field.IsStruct && !field.IsTimestamp && !field.AutofillType;
};


  return (
    <div className="space-y-4">
      {!nested && (
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
            {formTitle}
          </h2>
          <div className="flex space-x-2">
            {!isReadOnly && (
              <button
                onClick={() => setShowYamlInput(!showYamlInput)}
                className="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200"
              >
                {showYamlInput ? 'Hide YAML' : 'Load from YAML'}
              </button>
            )}
          </div>
        </div>
      )}

      {!nested && showYamlInput && (
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              YAML Configuration
            </label>
            <textarea
              value={yamlText}
              onChange={(e) => setYamlText(e.target.value)}
              className="w-full h-32 px-3 py-2 border border-gray-300 rounded-md font-mono text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              placeholder="Enter YAML configuration here..."
            />
          </div>
          <div className="flex space-x-2">
            <button
              onClick={handleYamlLoad}
              className="px-4 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              Load from YAML
            </button>
            <button
              onClick={() => setShowYamlInput(false)}
              className="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200"
            >
              Cancel
            </button>
          </div>
          {yamlError && (
            <div className="text-sm text-red-600 dark:text-red-400">
              {yamlError}
            </div>
          )}
        </div>
      )}

      {(!nested || !showYamlInput) && (
        <div className="space-y-3">
{/* Username field */}
  <div>
{/* Simple string field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Username *
    </label>
    <div className="relative group">
      <span className="cursor-help text-gray-400 hover:text-gray-600">
        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </span>
      <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
        <pre className="whitespace-pre-wrap text-xs leading-relaxed">The username to login into the ApplicationResource.</pre>
      </div>
    </div>
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <input
      type="text"
      value={formData.username}
      onChange={(e) => handleFieldChange('username', e.target.value)}
      disabled={isReadOnly || (mode === 'edit' && false)}
      className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    {validationErrors.username && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.username}
      </div>
    )}
  </div>
</div>

  </div>{/* Password field */}
  <div>
{/* Simple string field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Password *
    </label>
    <div className="relative group">
      <span className="cursor-help text-gray-400 hover:text-gray-600">
        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </span>
      <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
        <pre className="whitespace-pre-wrap text-xs leading-relaxed">The password to login into the ApplicationResource.</pre>
      </div>
    </div>
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <input
      type="text"
      value={formData.password}
      onChange={(e) => handleFieldChange('password', e.target.value)}
      disabled={isReadOnly || (mode === 'edit' && false)}
      className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    {validationErrors.password && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.password}
      </div>
    )}
  </div>
</div>

  </div>{/* Key field */}
  <div>
{/* Simple string field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Key *
    </label>
    <div className="relative group">
      <span className="cursor-help text-gray-400 hover:text-gray-600">
        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </span>
      <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
        <pre className="whitespace-pre-wrap text-xs leading-relaxed">SSH private key to use instead of password to login into the ApplicationResource.</pre>
      </div>
    </div>
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <input
      type="text"
      value={formData.key}
      onChange={(e) => handleFieldChange('key', e.target.value)}
      disabled={isReadOnly || (mode === 'edit' && false)}
      className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    {validationErrors.key && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.key}
      </div>
    )}
  </div>
</div>

  </div>{/* Port field */}
  <div>
{/* Simple number field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Port *
    </label>
    <div className="relative group">
      <span className="cursor-help text-gray-400 hover:text-gray-600">
        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </span>
      <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
        <pre className="whitespace-pre-wrap text-xs leading-relaxed">TCP port to connect with SSH client.</pre>
      </div>
    </div>
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <input
      type="number"
      value={formData.port}
      onChange={(e) => handleFieldChange('port', parseInt(e.target.value) || 0)}
      disabled={isReadOnly || (mode === 'edit' && false)}
      className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    {validationErrors.port && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.port}
      </div>
    )}
  </div>
</div>

  </div>

        </div>
      )}

      {!nested && (
        <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200 dark:border-gray-700">
          <button
            onClick={onCancel}
            className="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200"
          >
            {isReadOnly ? 'Close' : 'Cancel'}
          </button>
          {!isReadOnly && (
            <button
              onClick={handleSubmit}
              className="px-4 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              {mode === 'create' ? 'Create' : 'Save'}
            </button>
          )}
        </div>
      )}
    </div>
  );
};
