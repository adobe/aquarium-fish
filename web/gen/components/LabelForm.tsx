/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by Aquarium buf-gen-web-ui-components. DO NOT EDIT.

import React, { useState, useEffect } from 'react';
import { create } from '@bufbuild/protobuf';
import { LabelSchema, type Label } from '../../gen/aquarium/v2/label_pb';
import * as yaml from 'js-yaml';
import * as Components from './index';
import { useStreaming } from '../../app/contexts/StreamingContext';

interface LabelFormProps {
  mode: 'create' | 'edit' | 'view';
  initialData?: Label;
  onSubmit: (data: Label) => void;
  onCancel: () => void;
  title?: string;
  readonly?: boolean;
  nested?: boolean;
}

interface LabelFormState {
  uid: string;
  createdAt: string;
  name: string;
  version: number;
  definitions: any;
  metadata: Record<string, any>;
}
const defaultLabelState: LabelFormState = {
  uid: '',
  createdAt: '',
  name: '',
  version: 0,
  definitions: [],
  metadata: {},
};


export const LabelForm: React.FC<LabelFormProps> = ({
  initialData,
  onSubmit,
  onCancel,
  mode,
  title,
  readonly,
  nested = false
}) => {
  const [formData, setFormData] = useState<LabelFormState>(defaultLabelState);
  const [yamlText, setYamlText] = useState('');
  const [showYamlInput, setShowYamlInput] = useState(false);
  const [yamlError, setYamlError] = useState<string | null>(null);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [autofillMode, setAutofillMode] = useState<Record<string, 'dropdown' | 'text'>>({});
  const [structFieldText, setStructFieldText] = useState<Record<string, string>>({});
  const [structFieldErrors, setStructFieldErrors] = useState<Record<string, string>>({});
  const { data } = useStreaming();

  // Initialize form data from initialData
  useEffect(() => {
    if (initialData) {
      const newFormData: LabelFormState = {
        uid: initialData.uid || '',
        createdAt: initialData.createdAt ? new Date(Number(initialData.createdAt.seconds) * 1000).toISOString().slice(0, 16) : '',
        name: initialData.name || '',
        version: initialData.version || 0,
        definitions: initialData.definitions || [],
        metadata: initialData.metadata || {},
      };
      setFormData(newFormData);

      // Initialize struct field text
      const newStructText: Record<string, string> = {};
      newStructText['metadata'] = initialData.metadata ? yaml.dump(initialData.metadata) : '';
      setStructFieldText(newStructText);
    }
  }, [initialData]);

  // Auto-save form data when nested and form data changes
  useEffect(() => {
    if (nested && onSubmit && formData !== defaultLabelState) {
      // Debounce the auto-save to avoid too many calls
      const timeoutId = setTimeout(() => {
        try {
          // Convert form data to protobuf message
          const data = create(LabelSchema, {
            uid: formData.uid,
            createdAt: formData.createdAt ? { seconds: BigInt(Math.floor(new Date(formData.createdAt).getTime() / 1000)) } : undefined,
            name: formData.name,
            version: formData.version,
            definitions: formData.definitions,
            metadata: formData.metadata,
          });
          onSubmit(data);
        } catch (error) {
          // Silently ignore errors during auto-save
        }
      }, 500); // 500ms debounce

      return () => clearTimeout(timeoutId);
    }
  }, [formData, nested, onSubmit]);


  // Load from YAML
const handleYamlLoad = () => {
  try {
    setYamlError(null);
    const parsedData = yaml.load(yamlText) as any;

    if (!parsedData || typeof parsedData !== 'object') {
      throw new Error('Invalid YAML format');
    }

    const newFormData: LabelFormState = { ...defaultLabelState };
    if (parsedData.uid !== undefined) {
      newFormData.uid = parsedData.uid;
    }
    if (parsedData.createdAt !== undefined) {
      if (typeof parsedData.createdAt === 'string') {
        newFormData.createdAt = new Date(parsedData.createdAt).toISOString().slice(0, 16);
      }
    }
    if (parsedData.name !== undefined) {
      newFormData.name = parsedData.name;
    }
    if (parsedData.version !== undefined) {
      newFormData.version = parsedData.version;
    }
    if (parsedData.definitions !== undefined) {
      if (Array.isArray(parsedData.definitions)) {
        newFormData.definitions = parsedData.definitions;
      }
    }
    if (parsedData.metadata !== undefined) {
      if (typeof parsedData.metadata === 'object') {
        newFormData.metadata = parsedData.metadata;
      }
    }

    setFormData(newFormData);
    setShowYamlInput(false);
  } catch (error) {
    setYamlError('YAML parsing error: ' + error);
  }
};

// Validate form data
const validateForm = (): boolean => {
  const errors: Record<string, string> = {};
  if (mode !== 'create' && (!formData.uid)) {
    errors.uid = 'Uid is required';
  }
  if (mode !== 'create' && (!formData.createdAt)) {
    errors.createdAt = 'Created At is required';
  }
  if (!formData.name) {
    errors.name = 'Name is required';
  }
  if (!formData.version) {
    errors.version = 'Version is required';
  }
  if (!formData.definitions || formData.definitions.length === 0) {
    errors.definitions = 'Definitions is required';
  }
  if (!formData.metadata) {
    errors.metadata = 'Metadata is required';
  }

  setValidationErrors(errors);
  return Object.keys(errors).length === 0;
};

// Handle form submission
const handleSubmit = () => {
  if (!validateForm()) {
    return;
  }

  try {
    // Convert form data to protobuf message
    const data = create(LabelSchema, {
      uid: formData.uid,
      createdAt: formData.createdAt ? { seconds: BigInt(Math.floor(new Date(formData.createdAt).getTime() / 1000)) } : undefined,
      name: formData.name,
      version: formData.version,
      definitions: formData.definitions,
      metadata: formData.metadata,
    });

    onSubmit(data);
  } catch (error) {
    setYamlError('Failed to create Label: ' + error);
  }
};

// Handle field changes
const handleFieldChange = (field: string, value: any) => {
  setFormData(prev => ({
    ...prev,
    [field]: value
  }));

  // Clear validation error for this field
  if (validationErrors[field]) {
    setValidationErrors(prev => ({
      ...prev,
      [field]: ''
    }));
  }
};

// Handle array field changes
const handleArrayChange = (field: string, index: number, value: any) => {
  setFormData(prev => ({
    ...prev,
    [field]: prev[field as keyof LabelFormState].map((item: any, i: number) =>
      i === index ? value : item
    )
  }));
};

// Add array item
const addArrayItem = (field: string, defaultValue: any) => {
  setFormData(prev => ({
    ...prev,
    [field]: [...(prev[field as keyof LabelFormState] as any[]), defaultValue]
  }));
};

// Remove array item
const removeArrayItem = (field: string, index: number) => {
  setFormData(prev => ({
    ...prev,
    [field]: (prev[field as keyof LabelFormState] as any[]).filter((_, i) => i !== index)
  }));
};

const isReadOnly = readonly || mode === 'view';
const formTitle = title || (mode === 'create' ? 'Create Label' : mode === 'edit' ? 'Edit Label' : 'View Label');

// Helper function to get autofill options
const getAutofillOptions = (type: string) => {
  switch (type.toLowerCase()) {
    case 'label':
      return data.labels || [];
    case 'user':
      return data.users || [];
    case 'role':
      return data.roles || [];
    case 'node':
      return data.nodes || [];
    default:
      return [];
  }
};

// Helper function to parse struct field
const parseStructField = (fieldName: string, text: string) => {
  try {
    const parsed = yaml.load(text);
    if (parsed && typeof parsed === 'object') {
      handleFieldChange(fieldName, parsed);
      setStructFieldErrors(prev => ({ ...prev, [fieldName]: '' }));
    } else {
      setStructFieldErrors(prev => ({ ...prev, [fieldName]: 'Invalid YAML/JSON format' }));
    }
  } catch (error) {
    setStructFieldErrors(prev => ({ ...prev, [fieldName]: 'Parse error: ' + error }));
  }
};

// Helper function to determine if field is simple (can be inline)
const isSimpleField = (field: any) => {
  return !field.IsRepeated && !field.IsMap && !field.IsMessage && !field.IsStruct && !field.IsTimestamp && !field.AutofillType;
};


  return (
    <div className="space-y-4">
      {!nested && (
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
            {formTitle}
          </h2>
          <div className="flex space-x-2">
            {!isReadOnly && (
              <button
                onClick={() => setShowYamlInput(!showYamlInput)}
                className="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200"
              >
                {showYamlInput ? 'Hide YAML' : 'Load from YAML'}
              </button>
            )}
          </div>
        </div>
      )}

      {!nested && showYamlInput && (
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              YAML Configuration
            </label>
            <textarea
              value={yamlText}
              onChange={(e) => setYamlText(e.target.value)}
              className="w-full h-32 px-3 py-2 border border-gray-300 rounded-md font-mono text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              placeholder="Enter YAML configuration here..."
            />
          </div>
          <div className="flex space-x-2">
            <button
              onClick={handleYamlLoad}
              className="px-4 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              Load from YAML
            </button>
            <button
              onClick={() => setShowYamlInput(false)}
              className="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200"
            >
              Cancel
            </button>
          </div>
          {yamlError && (
            <div className="text-sm text-red-600 dark:text-red-400">
              {yamlError}
            </div>
          )}
        </div>
      )}

      {(!nested || !showYamlInput) && (
        <div className="space-y-3">
{/* Uid field */}
  {!(mode === 'create' && true) && (
    <div>
{/* Simple string field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Uid *
    </label>
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <input
      type="text"
      value={formData.uid}
      onChange={(e) => handleFieldChange('uid', e.target.value)}
      disabled={isReadOnly || (mode === 'edit' && true)}
      className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    {validationErrors.uid && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.uid}
      </div>
    )}
  </div>
</div>

    </div>
  )}{/* Created At field */}
  {!(mode === 'create' && true) && (
    <div>
      {/* Complex field - traditional layout */}
      <div className="space-y-2">
<div className="flex items-center space-x-2">
  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
    Created At *
  </label>
</div>

<input
  type="datetime-local"
  value={formData.createdAt}
  onChange={(e) => handleFieldChange('createdAt', e.target.value)}
  disabled={isReadOnly || (mode === 'edit' && true)}
  className="w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
/>

{validationErrors.createdAt && (
  <div className="text-sm text-red-600 dark:text-red-400 mt-1">
    {validationErrors.createdAt}
  </div>
)}

      </div>
    </div>
  )}{/* Name field */}
  <div>
{/* Simple string field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Name *
    </label>
    <div className="relative group">
      <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
      <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
        <pre className="whitespace-pre-wrap text-xs leading-relaxed">Simple name to identify the Label example: macos1405-xcode161-ci_aws</pre>
      </div>
    </div>
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <input
      type="text"
      value={formData.name}
      onChange={(e) => handleFieldChange('name', e.target.value)}
      disabled={isReadOnly || (mode === 'edit' && false)}
      className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    {validationErrors.name && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.name}
      </div>
    )}
  </div>
</div>

  </div>{/* Version field */}
  <div>
{/* Simple number field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Version *
    </label>
    <div className="relative group">
      <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
      <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
        <pre className="whitespace-pre-wrap text-xs leading-relaxed">In order to update the labels freely and save the previous Label state for the past builds.</pre>
      </div>
    </div>
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <input
      type="number"
      value={formData.version}
      onChange={(e) => handleFieldChange('version', parseInt(e.target.value) || 0)}
      disabled={isReadOnly || (mode === 'edit' && false)}
      className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    {validationErrors.version && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.version}
      </div>
    )}
  </div>
</div>

  </div>{/* Definitions field */}
  <div>
    {/* Complex field - traditional layout */}
    <div className="space-y-2">
<div className="flex items-center space-x-2">
  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
    Definitions *
  </label>
  <div className="relative group">
    <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
    <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
      <pre className="whitespace-pre-wrap text-xs leading-relaxed">List of label definitions that describes required resources, driver and it's options. The order is sequential - so the priority is to the first driver and if it's not available than the next definitions will be used. example: - driver: vmx options: image: winserver2019-vs2019-ci images: - url: 'https://artifact-storage/aquarium/image/vmx/winserver2019/winserver2019-VERSION.tar.xz' - url: 'https://artifact-storage/aquarium/image/vmx/winserver2019-vs2019/winserver2019-vs2019-VERSION.tar.xz' - url: 'https://artifact-storage/aquarium/image/vmx/winserver2019-vs2019-ci/winserver2019-vs2019-ci-VERSION.tar.xz' resources: cpu: 16 ram: 20 disks: ws: size: 100 reuse: true network: nat - driver: aws options: image: aquarium/winserver2019-vs2019-ci-VERSION instance_type: c6a.4xlarge security_groups: - jenkins-worker userdata_format: ps1 resources: cpu: 16 ram: 32 disks: xvdb: size: 100 network: Name:build-vpc</pre>
    </div>
  </div>
</div>

<div className="space-y-3">
  {formData.definitions.map((item, index) => (
    <div key={index} className="relative border-2 border-gray-200 rounded-lg p-3 dark:border-gray-600 bg-gray-50 dark:bg-gray-800">
      {/* Nested component header */}
      <div className="flex items-center justify-between mb-3 pb-2 border-b border-gray-200 dark:border-gray-600">
        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300">
          Definitions {index + 1}
        </h4>
        {!isReadOnly && !(mode === 'edit' && false) && (
          <button
            type="button"
            onClick={() => removeArrayItem('definitions', index)}
            className="flex items-center justify-center w-6 h-6 text-red-500 hover:text-red-700 hover:bg-red-100 rounded-full transition-colors"
            title="Remove Definitions"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        )}
      </div>
      {(() => {
        const ComponentName = 'LabelDefinitionForm';
        const NestedComponent = (Components as any)[ComponentName];

        if (NestedComponent) {
          return (
            <div className="pl-2">
              <NestedComponent
                mode={mode}
                initialData={item}
                onSubmit={(data: any) => {
                  handleArrayChange('definitions', index, data);
                }}
                onCancel={() => {}}
                title={'Definitions ' + (index + 1)}
                readonly={isReadOnly || (mode === 'edit' && false)}
                nested={true}
              />
            </div>
          );
        }

        // Fallback to textarea for JSON editing
        return (
          <div className="pl-2">
            <div className="text-sm text-gray-500 mb-2">
              LabelDefinition (Component not available - using JSON editor)
            </div>
            <textarea
              value={JSON.stringify(item, null, 2)}
              onChange={(e) => {
                try {
                  const parsed = JSON.parse(e.target.value);
                  handleArrayChange('definitions', index, parsed);
                } catch (error) {
                  // Invalid JSON, keep the text value for user to fix
                }
              }}
              disabled={isReadOnly || (mode === 'edit' && false)}
              className="w-full h-32 px-3 py-2 border border-gray-300 rounded-md font-mono text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white resize-none"
              placeholder="Enter JSON object for LabelDefinition..."
            />
          </div>
        );
      })()}
    </div>
  ))}
  {!isReadOnly && !(mode === 'edit' && false) && (
    <button
      onClick={() => addArrayItem('definitions', {})}
      className="w-full px-3 py-2 text-sm border-2 border-dashed border-gray-300 text-gray-600 rounded-md hover:border-green-400 hover:text-green-600 transition-colors"
    >
      + Add Definitions
    </button>
  )}
</div>

{validationErrors.definitions && (
  <div className="text-sm text-red-600 dark:text-red-400 mt-1">
    {validationErrors.definitions}
  </div>
)}

    </div>
  </div>{/* Metadata field */}
  <div>
    {/* Complex field - traditional layout */}
    <div className="space-y-2">
<div className="flex items-center space-x-2">
  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
    Metadata *
  </label>
  <div className="relative group">
    <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
    <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
      <pre className="whitespace-pre-wrap text-xs leading-relaxed">Basic metadata to pass to the ApplicationResource example: JENKINS_AGENT_WORKSPACE: 'D:\'</pre>
    </div>
  </div>
</div>

<div className="border border-gray-300 rounded-md p-3 dark:border-gray-600 space-y-2">
  <textarea
    value={structFieldText.metadata || ''}
    onChange={(e) => setStructFieldText(prev => ({ ...prev, metadata: e.target.value }))}
    onBlur={() => parseStructField('metadata', structFieldText.metadata || '')}
    disabled={isReadOnly || (mode === 'edit' && false)}
    className="w-full h-32 px-3 py-2 border-0 font-mono text-sm dark:bg-gray-700 dark:text-white resize-none"
    placeholder="Enter YAML or JSON object..."
  />
  {structFieldErrors.metadata && (
    <div className="text-sm text-red-600 dark:text-red-400">
      {structFieldErrors.metadata}
    </div>
  )}
  {!isReadOnly && !(mode === 'edit' && false) && (
    <button
      type="button"
      onClick={() => parseStructField('metadata', structFieldText.metadata || '')}
      className="px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-md hover:bg-blue-200"
    >
      Parse & Update
    </button>
  )}
</div>

{validationErrors.metadata && (
  <div className="text-sm text-red-600 dark:text-red-400 mt-1">
    {validationErrors.metadata}
  </div>
)}

    </div>
  </div>

        </div>
      )}

      {!nested && (
        <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200 dark:border-gray-700">
          <button
            onClick={onCancel}
            className="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200"
          >
            {isReadOnly ? 'Close' : 'Cancel'}
          </button>
          {!isReadOnly && (
            <button
              onClick={handleSubmit}
              className="px-4 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              {mode === 'create' ? 'Create' : 'Save'}
            </button>
          )}
        </div>
      )}
    </div>
  );
};
