/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by Aquarium buf-gen-web-ui-components. DO NOT EDIT.

import React, { useState, useEffect, useRef } from 'react';
import { create } from '@bufbuild/protobuf';
import { LabelDefinitionSchema, type LabelDefinition } from '../../gen/aquarium/v2/label_pb';
import * as yaml from 'js-yaml';
import * as Components from './index';
import { useStreaming } from '../../app/contexts/StreamingContext';

interface LabelDefinitionFormProps {
  mode: 'create' | 'edit' | 'view';
  initialData?: LabelDefinition;
  onSubmit: (data: LabelDefinition) => void;
  onCancel: () => void;
  title?: string;
  readonly?: boolean;
  nested?: boolean;
  onRegister?: (getData: () => any) => void;
}

interface LabelDefinitionFormState {
  driver: string;
  options: Record<string, any>;
  resources: any;
  authentication: any;
}
const defaultLabelDefinitionState: LabelDefinitionFormState = {
  driver: '',
  options: {},
  resources: null,
  authentication: undefined,
};


export const LabelDefinitionForm: React.FC<LabelDefinitionFormProps> = ({
  initialData,
  onSubmit,
  onCancel,
  mode,
  title,
  readonly,
  nested = false,
  onRegister
}) => {
  const [formData, setFormData] = useState<LabelDefinitionFormState>(defaultLabelDefinitionState);
  const [yamlText, setYamlText] = useState('');
  const [showYamlInput, setShowYamlInput] = useState(false);
  const [yamlError, setYamlError] = useState<string | null>(null);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [autofillMode, setAutofillMode] = useState<Record<string, 'dropdown' | 'text'>>({});
  const [structFieldText, setStructFieldText] = useState<Record<string, string>>({});
  const [structFieldErrors, setStructFieldErrors] = useState<Record<string, string>>({});
  const { data } = useStreaming();

  // Store references to nested component getData functions
  const nestedGetDataFns = useRef<Record<string, () => any>>({});

  // Initialize form data from initialData
  useEffect(() => {
    if (initialData) {
      const newFormData: LabelDefinitionFormState = {
        driver: initialData.driver || '',
        options: initialData.options || {},
        resources: initialData.resources && typeof initialData.resources === 'object' ? initialData.resources : null,
        authentication: initialData.authentication && typeof initialData.authentication === 'object' ? initialData.authentication : undefined,
      };
      setFormData(newFormData);

      // Initialize struct field text
      const newStructText: Record<string, string> = {};
      newStructText['options'] = initialData.options ? yaml.dump(initialData.options) : '';
      setStructFieldText(newStructText);
    }
  }, [initialData]);

  // Register getData function with parent if nested
  useEffect(() => {
    if (nested && onRegister) {
      onRegister(getData);
    }
  }, [nested, onRegister]);

  // Function to collect data from this component and all nested components
  const getData = () => {
    const currentFormData = { ...formData };

    // Collect data from nested components
    Object.keys(nestedGetDataFns.current).forEach(key => {
      const nestedGetData = nestedGetDataFns.current[key];
      if (nestedGetData) {
        // Handle array items: key format is "fieldName[index]"
        const arrayMatch = key.match(/^(.+?)\[(\d+)\]$/);
        if (arrayMatch) {
          const fieldName = arrayMatch[1];
          const index = parseInt(arrayMatch[2], 10);
          if (!Array.isArray(currentFormData[fieldName as keyof LabelDefinitionFormState])) {
            currentFormData[fieldName as keyof LabelDefinitionFormState] = [] as any;
          }
          (currentFormData[fieldName as keyof LabelDefinitionFormState] as any[])[index] = nestedGetData();
        } else if (key.includes('.')) {
          // Handle map items: key format is "fieldName.mapKey"
          const dotIndex = key.indexOf('.');
          const fieldName = key.substring(0, dotIndex);
          const mapKey = key.substring(dotIndex + 1);
          if (!currentFormData[fieldName as keyof LabelDefinitionFormState] || typeof currentFormData[fieldName as keyof LabelDefinitionFormState] !== 'object') {
            currentFormData[fieldName as keyof LabelDefinitionFormState] = {} as any;
          }
          (currentFormData[fieldName as keyof LabelDefinitionFormState] as any)[mapKey] = nestedGetData();
        } else {
          // Regular nested field
          currentFormData[key as keyof LabelDefinitionFormState] = nestedGetData();
        }
      }
    });

    return currentFormData;
  };

  // Register a nested component's getData function
  const registerNestedGetData = (fieldName: string, getDataFn: () => any) => {
    nestedGetDataFns.current[fieldName] = getDataFn;
  };

  // Unregister a nested component's getData function
  const unregisterNestedGetData = (fieldName: string) => {
    delete nestedGetDataFns.current[fieldName];
  };


  // Toggle YAML view and sync with current form data
const handleToggleYamlView = () => {
  if (!showYamlInput) {
    // Switching to YAML view - export current form data to YAML
    try {
      const data = create(LabelDefinitionSchema, {
        driver: formData.driver,
        options: formData.options,
        resources: formData.resources,
        authentication: formData.authentication || undefined,
      });

      // Convert protobuf to plain object for YAML
      const plainObj = JSON.parse(JSON.stringify(data, (key, value) =>
        typeof value === 'bigint' ? value.toString() : value
      ));

      const yamlStr = yaml.dump(plainObj, { indent: 2, lineWidth: -1 });
      setYamlText(yamlStr);
      setYamlError(null);
    } catch (error) {
      setYamlError('Failed to convert to YAML: ' + error);
    }
  }
  setShowYamlInput(!showYamlInput);
};

// Load from YAML (apply changes)
const handleYamlApply = () => {
  try {
    setYamlError(null);
    const parsedData = yaml.load(yamlText) as any;

    if (!parsedData || typeof parsedData !== 'object') {
      throw new Error('Invalid YAML format');
    }

    const newFormData: LabelDefinitionFormState = { ...defaultLabelDefinitionState };
    if (parsedData.driver !== undefined) {
      newFormData.driver = parsedData.driver;
    }
    if (parsedData.options !== undefined) {
      if (typeof parsedData.options === 'object') {
        newFormData.options = parsedData.options;
      }
    }
    if (parsedData.resources !== undefined) {
      newFormData.resources = parsedData.resources;
    }
    if (parsedData.authentication !== undefined) {
      newFormData.authentication = parsedData.authentication;
    }

    setFormData(newFormData);
    setShowYamlInput(false);
  } catch (error) {
    setYamlError('YAML parsing error: ' + error);
  }
};

// Copy YAML to clipboard
const handleCopyYaml = () => {
  navigator.clipboard.writeText(yamlText).then(() => {
    alert('YAML copied to clipboard!');
  }).catch(() => {
    alert('Failed to copy to clipboard');
  });
};

// Validate form data
const validateForm = (): boolean => {
  const errors: Record<string, string> = {};
  if (!formData.driver) {
    errors.driver = 'Driver is required';
  }
  if (!formData.options) {
    errors.options = 'Options is required';
  }
  if (!formData.resources) {
    errors.resources = 'Resources is required';
  }

  setValidationErrors(errors);
  return Object.keys(errors).length === 0;
};

// Handle form submission
const handleSubmit = () => {
  if (!validateForm()) {
    return;
  }

  try {
    // Collect data from this component and all nested components
    const collectedData = getData();

    // Convert form data to protobuf message
    const data = create(LabelDefinitionSchema, {
      driver: collectedData.driver,
      options: collectedData.options,
      resources: collectedData.resources,
      authentication: collectedData.authentication || undefined,
    });

    onSubmit(data);
  } catch (error) {
    setYamlError('Failed to create LabelDefinition: ' + error);
  }
};

// Handle field changes
const handleFieldChange = (field: string, value: any) => {
  setFormData(prev => ({
    ...prev,
    [field]: value
  }));

  // Clear validation error for this field
  if (validationErrors[field]) {
    setValidationErrors(prev => ({
      ...prev,
      [field]: ''
    }));
  }
};

// Handle array field changes
const handleArrayChange = (field: string, index: number, value: any) => {
  setFormData(prev => ({
    ...prev,
    [field]: prev[field as keyof LabelDefinitionFormState].map((item: any, i: number) =>
      i === index ? value : item
    )
  }));
};

// Add array item
const addArrayItem = (field: string, defaultValue: any) => {
  setFormData(prev => ({
    ...prev,
    [field]: [...(prev[field as keyof LabelDefinitionFormState] as any[]), defaultValue]
  }));
};

// Remove array item
const removeArrayItem = (field: string, index: number) => {
  // Unregister the nested component
  unregisterNestedGetData(field + '[' + index + ']');

  // Remove from formData
  setFormData(prev => ({
    ...prev,
    [field]: (prev[field as keyof LabelDefinitionFormState] as any[]).filter((_, i) => i !== index)
  }));

  // Re-register remaining items with updated indices
  setTimeout(() => {
    const remainingItems = (formData[field as keyof LabelDefinitionFormState] as any[]).length - 1;
    for (let i = index; i < remainingItems; i++) {
      const oldKey = field + '[' + (i + 1) + ']';
      const newKey = field + '[' + i + ']';
      if (nestedGetDataFns.current[oldKey]) {
        nestedGetDataFns.current[newKey] = nestedGetDataFns.current[oldKey];
        delete nestedGetDataFns.current[oldKey];
      }
    }
  }, 0);
};

const isReadOnly = readonly || mode === 'view';
const formTitle = title || (mode === 'create' ? 'Create LabelDefinition' : mode === 'edit' ? 'Edit LabelDefinition' : 'View LabelDefinition');

// Helper function to get autofill options
const getAutofillOptions = (type: string) => {
  switch (type.toLowerCase()) {
    case 'label':
      return data.labels || [];
    case 'user':
      return data.users || [];
    case 'role':
      return data.roles || [];
    case 'node':
      return data.nodes || [];
    default:
      return [];
  }
};

// Helper function to parse struct field
const parseStructField = (fieldName: string, text: string) => {
  try {
    const parsed = yaml.load(text);
    if (parsed && typeof parsed === 'object') {
      handleFieldChange(fieldName, parsed);
      setStructFieldErrors(prev => ({ ...prev, [fieldName]: '' }));
    } else {
      setStructFieldErrors(prev => ({ ...prev, [fieldName]: 'Invalid YAML/JSON format' }));
    }
  } catch (error) {
    setStructFieldErrors(prev => ({ ...prev, [fieldName]: 'Parse error: ' + error }));
  }
};

// Helper function to determine if field is simple (can be inline)
const isSimpleField = (field: any) => {
  return !field.IsRepeated && !field.IsMap && !field.IsMessage && !field.IsStruct && !field.IsTimestamp && !field.AutofillType;
};


  return (
    <div className="space-y-4">
      {!nested && (
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
            {formTitle}
          </h2>
          <div className="flex space-x-2">
            <button
              onClick={handleToggleYamlView}
              className="px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-md hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-200"
            >
              {showYamlInput ? 'Hide YAML' : 'View YAML'}
            </button>
          </div>
        </div>
      )}

      {!nested && showYamlInput && (
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              YAML View
            </label>
            <textarea
              value={yamlText}
              onChange={(e) => setYamlText(e.target.value)}
              disabled={isReadOnly}
              className="w-full h-96 px-3 py-2 border border-gray-300 rounded-md font-mono text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              placeholder="YAML configuration..."
            />
          </div>
          <div className="flex space-x-2">
            <button
              onClick={handleCopyYaml}
              className="px-4 py-2 text-sm bg-green-600 text-white rounded-md hover:bg-green-700"
            >
              Copy to Clipboard
            </button>
            {!isReadOnly && (
              <button
                onClick={handleYamlApply}
                className="px-4 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                Apply Changes
              </button>
            )}
            <button
              onClick={() => setShowYamlInput(false)}
              className="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300"
            >
              Close
            </button>
          </div>
          {yamlError && (
            <div className="text-sm text-red-600 dark:text-red-400">
              {yamlError}
            </div>
          )}
        </div>
      )}

      {(!nested || !showYamlInput) && (
        <div className="space-y-3">
{/* Driver field */}
  <div>
{/* Simple string field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      Driver *
    </label>
    <div className="relative group">
      <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
      <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
        <pre className="whitespace-pre-wrap text-xs leading-relaxed">Name of the driver to execute</pre>
      </div>
    </div>
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <input
      type="text"
      value={formData.driver}
      onChange={(e) => handleFieldChange('driver', e.target.value)}
      disabled={isReadOnly || (mode === 'edit' && false)}
      className="w-full px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
    />
    {validationErrors.driver && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.driver}
      </div>
    )}
  </div>
</div>

  </div>{/* Options field */}
  <div>
    {/* Complex field - traditional layout */}
    <div className="space-y-2">
<div className="flex items-center space-x-2">
  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
    Options *
  </label>
  <div className="relative group">
    <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
    <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
      <pre className="whitespace-pre-wrap text-xs leading-relaxed">Driver-specific options to execute the environment</pre>
    </div>
  </div>
</div>

<div className="border border-gray-300 rounded-md p-3 dark:border-gray-600 space-y-2">
  <textarea
    value={structFieldText.options || ''}
    onChange={(e) => setStructFieldText(prev => ({ ...prev, options: e.target.value }))}
    onBlur={() => parseStructField('options', structFieldText.options || '')}
    disabled={isReadOnly || (mode === 'edit' && false)}
    className="w-full h-32 px-3 py-2 border-0 font-mono text-sm dark:bg-gray-700 dark:text-white resize-none"
    placeholder="Enter YAML or JSON object..."
  />
  {structFieldErrors.options && (
    <div className="text-sm text-red-600 dark:text-red-400">
      {structFieldErrors.options}
    </div>
  )}
  {!isReadOnly && !(mode === 'edit' && false) && (
    <button
      type="button"
      onClick={() => parseStructField('options', structFieldText.options || '')}
      className="px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-md hover:bg-blue-200"
    >
      Parse & Update
    </button>
  )}
</div>

{validationErrors.options && (
  <div className="text-sm text-red-600 dark:text-red-400 mt-1">
    {validationErrors.options}
  </div>
)}

    </div>
  </div>{/* Resources field */}
  <div>
    {/* Complex field - traditional layout */}
    <div className="space-y-2">
<div className="flex items-center space-x-2">
  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
    Resources *
  </label>
  <div className="relative group">
    <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
    <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
      <pre className="whitespace-pre-wrap text-xs leading-relaxed">Resources Driver need to provide for the Label execution</pre>
    </div>
  </div>
</div>

{(() => {
  const ComponentName = 'ResourcesForm';
  const NestedComponent = (Components as any)[ComponentName];

  if (NestedComponent) {
    return (
      <div className="relative border-2 border-gray-200 rounded-lg p-3 dark:border-gray-600 bg-gray-50 dark:bg-gray-800">
        <div className="pl-2">
          <NestedComponent
            key={JSON.stringify(formData.resources)}
            mode={mode}
            initialData={formData.resources}
            onSubmit={() => {}}
            onCancel={() => {}}
            title={'Resources'}
            readonly={isReadOnly || (mode === 'edit' && false)}
            nested={true}
            onRegister={(getDataFn: () => any) => registerNestedGetData('resources', getDataFn)}
          />
        </div>
      </div>
    );
  }

  // Fallback to textarea for JSON editing
  return (
    <div className="border border-gray-300 rounded-md p-3 dark:border-gray-600 space-y-2">
      <div className="text-sm text-gray-500 mb-2">
        Resources (Component not available - using JSON editor)
      </div>
      <textarea
        value={JSON.stringify(formData.resources, null, 2)}
        onChange={(e) => {
          try {
            const parsed = JSON.parse(e.target.value);
            handleFieldChange('resources', parsed);
          } catch (error) {
            // Invalid JSON, keep the text value for user to fix
          }
        }}
        disabled={isReadOnly || (mode === 'edit' && false)}
        className="w-full h-32 px-3 py-2 border-0 font-mono text-sm dark:bg-gray-700 dark:text-white resize-none"
        placeholder="Enter JSON object for Resources..."
      />
    </div>
  );
})()}

{validationErrors.resources && (
  <div className="text-sm text-red-600 dark:text-red-400 mt-1">
    {validationErrors.resources}
  </div>
)}

    </div>
  </div>{/* Authentication field */}
  <div>
    {/* Complex field - traditional layout */}
    <div className="space-y-2">
<div className="flex items-center space-x-2">
  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
    Authentication
  </label>
  <div className="relative group">
    <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
    <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
      <pre className="whitespace-pre-wrap text-xs leading-relaxed">Authentication information to connect - is used by: * ProxySSH gate to allow access to the resource</pre>
    </div>
  </div>
</div>

{(() => {
  const ComponentName = 'AuthenticationForm';
  const NestedComponent = (Components as any)[ComponentName];
  // Optional message field - show Add/Remove buttons
  if (!formData.authentication) {
    return (
      <div className="border border-dashed border-gray-300 rounded-md p-6 text-center dark:border-gray-600">
        <div className="text-sm text-gray-500 dark:text-gray-400 mb-3">
          Authentication is not set
        </div>
        {!isReadOnly && !(mode === 'edit' && false) && (
          <button
            type="button"
            onClick={() => handleFieldChange('authentication', {})}
            className="px-4 py-2 text-sm bg-blue-100 text-blue-800 rounded-md hover:bg-blue-200"
          >
            Add Authentication
          </button>
        )}
      </div>
    );
  }

  if (NestedComponent) {
    return (
      <div className="relative border-2 border-gray-200 rounded-lg p-3 dark:border-gray-600 bg-gray-50 dark:bg-gray-800">
        <div className="flex items-center justify-between mb-3 pb-2 border-b border-gray-200 dark:border-gray-600">
          <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300">
            Authentication
          </h4>
          {!isReadOnly && !(mode === 'edit' && false) && (
            <button
              type="button"
              onClick={() => {
                handleFieldChange('authentication', null);
                unregisterNestedGetData('authentication');
              }}
              className="flex items-center justify-center w-6 h-6 text-red-500 hover:text-red-700 hover:bg-red-100 rounded-full transition-colors"
              title="Remove Authentication"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          )}
        </div>
        <div className="pl-2">
          <NestedComponent
            key={JSON.stringify(formData.authentication)}
            mode={mode}
            initialData={formData.authentication}
            onSubmit={() => {}}
            onCancel={() => {}}
            title={'Authentication'}
            readonly={isReadOnly || (mode === 'edit' && false)}
            nested={true}
            onRegister={(getDataFn: () => any) => registerNestedGetData('authentication', getDataFn)}
          />
        </div>
      </div>
    );
  }

  // Fallback to textarea for JSON editing
  return (
    <div className="border border-gray-300 rounded-md p-3 dark:border-gray-600 space-y-2">
      <div className="flex justify-between items-center mb-2">
        <div className="text-sm text-gray-500">
          Authentication (Component not available - using JSON editor)
        </div>
        {!isReadOnly && !(mode === 'edit' && false) && (
          <button
            type="button"
            onClick={() => handleFieldChange('authentication', null)}
            className="flex items-center justify-center w-6 h-6 text-red-500 hover:text-red-700 hover:bg-red-100 rounded-full transition-colors"
            title="Remove Authentication"
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        )}
      </div>
      <textarea
        value={JSON.stringify(formData.authentication, null, 2)}
        onChange={(e) => {
          try {
            const parsed = JSON.parse(e.target.value);
            handleFieldChange('authentication', parsed);
          } catch (error) {
            // Invalid JSON, keep the text value for user to fix
          }
        }}
        disabled={isReadOnly || (mode === 'edit' && false)}
        className="w-full h-32 px-3 py-2 border-0 font-mono text-sm dark:bg-gray-700 dark:text-white resize-none"
        placeholder="Enter JSON object for Authentication..."
      />
    </div>
  );
})()}

{validationErrors.authentication && (
  <div className="text-sm text-red-600 dark:text-red-400 mt-1">
    {validationErrors.authentication}
  </div>
)}

    </div>
  </div>

        </div>
      )}

      {!nested && (
        <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200 dark:border-gray-700">
          <button
            onClick={onCancel}
            className="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200"
          >
            {isReadOnly ? 'Close' : 'Cancel'}
          </button>
          {!isReadOnly && (
            <button
              onClick={handleSubmit}
              className="px-4 py-2 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              {mode === 'create' ? 'Create' : 'Save'}
            </button>
          )}
        </div>
      )}
    </div>
  );
};
