/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Author: Sergei Parshev (@sparshev)

// Tool to generate tracing wrapper functions for context-aware functions
package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"io/fs"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

// FunctionInfo holds information about a function that needs tracing
type FunctionInfo struct {
	Name       string
	RecvType   string      // For methods, the receiver type
	RecvName   string      // For methods, the receiver name
	IsMethod   bool        // True if this is a method
	IsExported bool        // True if function is exported
	Params     []ParamInfo // Function parameters
	Results    []ParamInfo // Function results
	Package    string      // Package name
	FilePath   string      // File path for the function
}

// ParamInfo holds information about function parameters/results
type ParamInfo struct {
	Name string
	Type string
}

// ImportInfo holds information about an import
type ImportInfo struct {
	Name string // Import name (can be empty for default imports)
	Path string // Import path
}

// TemplateData holds data for template generation
type TemplateData struct {
	PackageName   string
	TracerVarName string
	Functions     []FunctionInfo
	Imports       []ImportInfo
}

const releaseWrapperTemplate = `/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by trace-gen-functions tool. DO NOT EDIT.

//go:build !debug

package {{.PackageName}}

import (
	"context"

	{{ if .Imports }}
	{{- range .Imports }}
	{{if .Name}}{{.Name}} {{end}}"{{.Path}}"
	{{- end }}{{ end }}
)

{{range .Functions}}
func {{if .IsMethod}}({{.RecvName}} {{.RecvType}}) {{end}}{{title (trimSuffix .Name "Impl")}}({{range $i, $param := .Params}}{{if $i}}, {{end}}{{if $param.Name}}{{$param.Name}} {{end}}{{$param.Type}}{{end}}) {{if .Results}}({{range $i, $result := .Results}}{{if $i}}, {{end}}{{$result.Type}}{{end}}){{end}} {
	{{if .Results}}return {{end}}{{if .IsMethod}}{{.RecvName}}.{{end}}{{.Name}}({{range $i, $param := .Params}}{{if $i}}, {{end}}{{if $param.Name}}{{$param.Name}}{{else}}p{{$i}}{{end}}{{end}})
}
{{end}}
`
const debugWrapperTemplate = `/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by trace-gen-functions tool. DO NOT EDIT.

//go:build debug

package {{.PackageName}}

import (
	"context"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"

	{{ if .Imports }}
	{{- range .Imports }}
	{{if .Name}}{{.Name}} {{end}}"{{.Path}}"
	{{- end }}{{end}}
)

var {{.TracerVarName}} = otel.Tracer("aquarium-fish/{{.PackageName}}")

{{range .Functions}}
func {{if .IsMethod}}({{.RecvName}} {{.RecvType}}) {{end}}{{title (trimSuffix .Name "Impl")}}({{range $i, $param := .Params}}{{if $i}}, {{end}}{{if $param.Name}}{{$param.Name}} {{end}}{{$param.Type}}{{end}}) {{if .Results}}({{range $i, $result := .Results}}{{if $i}}, {{end}}{{$result.Type}}{{end}}){{end}} {
	{{if .Params}}{{if (index .Params 0).Name}}{{(index .Params 0).Name}}{{else}}ctx{{end}}{{else}}ctx{{end}}, span := {{$.TracerVarName}}.Start({{if .Params}}{{if (index .Params 0).Name}}{{(index .Params 0).Name}}{{else}}ctx{{end}}{{else}}ctx{{end}}, "{{$.PackageName}}.{{if .IsMethod}}{{trimPrefix .RecvType "*"}}.{{end}}{{.Name}}")
	defer span.End()

	{{if .Results}}{{range $i, $result := .Results}}{{if $i}}, {{end}}{{if eq $result.Type "error"}}err{{$i}}{{else if $result.Name}}{{$result.Name}}{{else}}r{{$i}}{{end}}{{end}} := {{end}}{{if .IsMethod}}{{.RecvName}}.{{end}}{{.Name}}({{range $i, $param := .Params}}{{if $i}}, {{end}}{{if $param.Name}}{{$param.Name}}{{else}}p{{$i}}{{end}}{{end}})
	{{if .Results}}
	{{range $i, $result := .Results}}{{if eq $result.Type "error"}}if err{{$i}} != nil {
		span.RecordError(err{{$i}})
		span.SetStatus(codes.Error, err{{$i}}.Error())
	}
	{{end}}{{end}}
	return {{range $i, $result := .Results}}{{if $i}}, {{end}}{{if eq $result.Type "error"}}err{{$i}}{{else if $result.Name}}{{$result.Name}}{{else}}r{{$i}}{{end}}{{end}}
	{{end}}
}
{{end}}
`

// Simplified version of strings.Title for ASCII strings only
func asciiTitle(in string) string {
	return strings.ToUpper(in[:1]) + in[1:]
}

func main() {
	if len(os.Args) < 2 {
		fmt.Fprintf(os.Stderr, "Usage: %s <directory>\n", os.Args[0])
		os.Exit(1)
	}

	targetDir := os.Args[1]

	fmt.Printf("Generating interface tracing functions for directory: %s\n", targetDir)

	if err := generateTracingFunctions(targetDir); err != nil {
		fmt.Fprintf(os.Stderr, "Error: %v\n", err)
		os.Exit(1)
	}

	fmt.Println("Tracing functions generated successfully")
}

func generateTracingFunctions(rootDir string) error {
	// Walk through all Go files in the directory
	return filepath.WalkDir(rootDir, func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}

		// Skip non-Go files and test files
		if !strings.HasSuffix(path, ".go") || strings.HasSuffix(path, "_test.go") {
			return nil
		}

		// Skip generated files
		if strings.HasSuffix(path, ".gen.go") ||
			strings.Contains(path, ".pb.go") ||
			strings.Contains(path, ".connect.go") {
			return nil
		}

		// Parse the Go file
		functions, err := parseGoFile(path)
		if err != nil {
			return fmt.Errorf("failed to parse %s: %v", path, err)
		}

		// Only generate wrapper files if there are Impl functions
		if len(functions) == 0 {
			return nil
		}

		// Generate interface files for this package
		if err := generateInterfaceWrappers(path, functions); err != nil {
			return fmt.Errorf("failed to generate interface wrappers for %s: %v", path, err)
		}

		return nil
	})
}

func parseGoFile(filePath string) ([]FunctionInfo, error) {
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, filePath, nil, parser.ParseComments)
	if err != nil {
		return nil, err
	}

	var functions []FunctionInfo

	ast.Inspect(node, func(n ast.Node) bool {
		switch x := n.(type) {
		case *ast.FuncDecl:
			if funcInfo := analyzeFunctionDecl(x, node.Name.Name, filePath); funcInfo != nil {
				functions = append(functions, *funcInfo)
			}
		}
		return true
	})

	return functions, nil
}

func analyzeFunctionDecl(fn *ast.FuncDecl, packageName, filePath string) *FunctionInfo {
	// Skip functions without parameters
	if fn.Type.Params == nil || len(fn.Type.Params.List) == 0 {
		return nil
	}

	// Skip functions without Impl suffix
	if !strings.HasSuffix(fn.Name.Name, "Impl") {
		return nil
	}

	// Skip exported functions for now (we can extend this later)
	if fn.Name.IsExported() {
		return nil
	}

	// Check if first parameter is context.Context
	firstParam := fn.Type.Params.List[0]
	if !isContextParameter(firstParam) {
		return nil
	}

	funcInfo := &FunctionInfo{
		Name:       fn.Name.Name,
		IsExported: fn.Name.IsExported(),
		Package:    packageName,
		FilePath:   filePath,
	}

	// Check if this is a method
	if fn.Recv != nil && len(fn.Recv.List) > 0 {
		recv := fn.Recv.List[0]
		funcInfo.IsMethod = true
		funcInfo.RecvType = typeToString(recv.Type)
		if len(recv.Names) > 0 {
			funcInfo.RecvName = recv.Names[0].Name
		} else {
			funcInfo.RecvName = strings.ToLower(funcInfo.RecvType[:1])
		}
	}

	// Extract parameters
	for _, param := range fn.Type.Params.List {
		paramType := typeToString(param.Type)
		// Skip if we can't determine the type
		if paramType == "" {
			fmt.Printf("Warning: skipping function %s due to unknown parameter type\n", fn.Name.Name)
			return nil
		}
		if len(param.Names) > 0 {
			for _, name := range param.Names {
				// Fix for unused ctx param in Impl functions
				if name.Name == "_" && paramType == "context.Context" {
					name.Name = "ctx"
				}
				funcInfo.Params = append(funcInfo.Params, ParamInfo{
					Name: name.Name,
					Type: paramType,
				})
			}
		} else {
			// Anonymous parameter
			funcInfo.Params = append(funcInfo.Params, ParamInfo{
				Name: "",
				Type: paramType,
			})
		}
	}

	// Extract results
	if fn.Type.Results != nil {
		for i, result := range fn.Type.Results.List {
			resultType := typeToString(result.Type)
			// Skip if we can't determine the type
			if resultType == "" {
				fmt.Printf("Warning: skipping function %s due to unknown result type\n", fn.Name.Name)
				return nil
			}
			if len(result.Names) > 0 {
				for _, name := range result.Names {
					funcInfo.Results = append(funcInfo.Results, ParamInfo{
						Name: name.Name,
						Type: resultType,
					})
				}
			} else {
				// Anonymous result
				funcInfo.Results = append(funcInfo.Results, ParamInfo{
					Name: fmt.Sprintf("r%d", i),
					Type: resultType,
				})
			}
		}
	}

	return funcInfo
}

func isContextParameter(param *ast.Field) bool {
	// Check if parameter type is context.Context
	if sel, ok := param.Type.(*ast.SelectorExpr); ok {
		if ident, ok := sel.X.(*ast.Ident); ok {
			return ident.Name == "context" && sel.Sel.Name == "Context"
		}
	}
	return false
}

func typeToString(expr ast.Expr) string {
	switch t := expr.(type) {
	case *ast.Ident:
		return t.Name
	case *ast.SelectorExpr:
		return typeToString(t.X) + "." + t.Sel.Name
	case *ast.StarExpr:
		return "*" + typeToString(t.X)
	case *ast.ArrayType:
		return "[]" + typeToString(t.Elt)
	case *ast.MapType:
		return "map[" + typeToString(t.Key) + "]" + typeToString(t.Value)
	case *ast.ChanType:
		var dir string
		switch t.Dir {
		case ast.SEND:
			dir = "chan<- "
		case ast.RECV:
			dir = "<-chan "
		default:
			dir = "chan "
		}
		return dir + typeToString(t.Value)
	case *ast.InterfaceType:
		return "interface{}"
	case *ast.FuncType:
		return "func" + functionTypeToString(t)
	case *ast.Ellipsis:
		return "..." + typeToString(t.Elt)
	default:
		// Return empty string for unknown types to avoid compilation errors
		return ""
	}
}

func functionTypeToString(ft *ast.FuncType) string {
	var buf strings.Builder

	buf.WriteString("(")
	if ft.Params != nil {
		for i, param := range ft.Params.List {
			if i > 0 {
				buf.WriteString(", ")
			}
			buf.WriteString(typeToString(param.Type))
		}
	}
	buf.WriteString(")")

	if ft.Results != nil && len(ft.Results.List) > 0 {
		buf.WriteString(" ")
		if len(ft.Results.List) > 1 {
			buf.WriteString("(")
		}
		for i, result := range ft.Results.List {
			if i > 0 {
				buf.WriteString(", ")
			}
			buf.WriteString(typeToString(result.Type))
		}
		if len(ft.Results.List) > 1 {
			buf.WriteString(")")
		}
	}

	return buf.String()
}

func generateInterfaceWrappers(originalFile string, functions []FunctionInfo) error {
	if len(functions) == 0 {
		return nil
	}

	// Create the wrapper file paths
	dir := filepath.Dir(originalFile)
	base := filepath.Base(originalFile)
	ext := filepath.Ext(base)
	name := strings.TrimSuffix(base, ext)
	releaseFile := filepath.Join(dir, name+".release.gen.go")
	debugFile := filepath.Join(dir, name+".debug.gen.go")

	// Extract imports from the original file
	allImports, err := extractImports(originalFile)
	if err != nil {
		return fmt.Errorf("failed to extract imports from %s: %v", originalFile, err)
	}

	// Collect used types and filter imports
	usedTypes := collectUsedTypes(functions)
	filteredImports := filterImports(allImports, usedTypes)

	fmt.Printf("Generating release interface wrapper: %s ...\n", releaseFile)

	// Generate the release file content
	content, err := generateReleaseWrapperContent(functions, filteredImports)
	if err != nil {
		return err
	}

	// Write the release file
	if err := os.WriteFile(releaseFile, content, 0644); err != nil { //nolint:gosec // G306 - No need to tighten 0644 further for autogenerated code
		return err
	}

	fmt.Printf("Generating debug interface wrapper: %s ...\n", debugFile)

	// Generate the debug file content
	content, err = generateDebugWrapperContent(functions, filteredImports)
	if err != nil {
		return err
	}

	// Write the debug file
	if err := os.WriteFile(debugFile, content, 0644); err != nil { //nolint:gosec // G306 - No need to tighten 0644 further for autogenerated code
		return err
	}

	return nil
}

func generateDebugWrapperContent(functions []FunctionInfo, imports []ImportInfo) ([]byte, error) {
	if len(functions) == 0 {
		return nil, nil
	}

	// Create template data
	packageName := functions[0].Package
	// Create unique tracer variable name based on package and file
	baseName := filepath.Base(functions[0].FilePath)
	fileName := strings.TrimSuffix(baseName, filepath.Ext(baseName))
	tracerVarName := fmt.Sprintf("debugTracer%s%s", asciiTitle(packageName), asciiTitle(fileName))

	data := TemplateData{
		PackageName:   packageName,
		TracerVarName: tracerVarName,
		Functions:     functions,
		Imports:       imports,
	}

	// Create template with custom functions
	tmpl, err := template.New("debugWrapperTemplate").Funcs(template.FuncMap{
		"title":      asciiTitle,
		"trimSuffix": strings.TrimSuffix,
		"trimPrefix": strings.TrimPrefix,
		"eq": func(a, b string) bool {
			return a == b
		},
	}).Parse(debugWrapperTemplate)
	if err != nil {
		return nil, fmt.Errorf("failed to parse template: %v", err)
	}

	// Execute template
	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, data); err != nil {
		return nil, fmt.Errorf("failed to execute template: %v", err)
	}

	// Format the generated code
	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		// Printing out the listing with line numbers
		lines := strings.Split(buf.String(), "\n")
		for i, line := range lines {
			fmt.Printf("%4d\t%s\n", i+1, line)
		}
		return buf.Bytes(), err // Return unformatted code if formatting fails
	}

	return formatted, nil
}

func generateReleaseWrapperContent(functions []FunctionInfo, imports []ImportInfo) ([]byte, error) {
	if len(functions) == 0 {
		return nil, nil
	}

	// Create template data
	packageName := functions[0].Package

	data := TemplateData{
		PackageName: packageName,
		Functions:   functions,
		Imports:     imports,
	}

	// Create template with custom functions
	tmpl, err := template.New("releaseWrapperTemplate").Funcs(template.FuncMap{
		"title":      asciiTitle,
		"trimSuffix": strings.TrimSuffix,
	}).Parse(releaseWrapperTemplate)
	if err != nil {
		return nil, fmt.Errorf("failed to parse template: %v", err)
	}

	// Execute template
	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, data); err != nil {
		return nil, fmt.Errorf("failed to execute template: %v", err)
	}

	// Format the generated code
	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		// Printing out the listing with line numbers
		lines := strings.Split(buf.String(), "\n")
		for i, line := range lines {
			fmt.Printf("%4d\t%s\n", i+1, line)
		}
		return buf.Bytes(), err // Return unformatted code if formatting fails
	}

	return formatted, nil
}

// extractImports extracts import information from a Go file
func extractImports(filePath string) ([]ImportInfo, error) {
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, filePath, nil, parser.ParseComments)
	if err != nil {
		return nil, err
	}

	var imports []ImportInfo
	for _, imp := range node.Imports {
		path := strings.Trim(imp.Path.Value, "\"")
		name := ""
		if imp.Name != nil {
			name = imp.Name.Name
		}
		imports = append(imports, ImportInfo{
			Name: name,
			Path: path,
		})
	}

	return imports, nil
}

// collectUsedTypes collects all types used in function signatures
func collectUsedTypes(functions []FunctionInfo) map[string]bool {
	usedTypes := make(map[string]bool)

	for _, fn := range functions {
		// Add receiver type
		if fn.IsMethod && fn.RecvType != "" {
			usedTypes[fn.RecvType] = true
		}

		// Add parameter types
		for _, param := range fn.Params {
			usedTypes[param.Type] = true
		}

		// Add result types
		for _, result := range fn.Results {
			usedTypes[result.Type] = true
		}
	}

	return usedTypes
}

// isBuiltinType checks if a type is a Go built-in type that doesn't need imports
func isBuiltinType(typeName string) bool {
	builtinTypes := map[string]bool{
		"any":         true,
		"bool":        true,
		"byte":        true,
		"complex64":   true,
		"complex128":  true,
		"error":       true,
		"float32":     true,
		"float64":     true,
		"int":         true,
		"int8":        true,
		"int16":       true,
		"int32":       true,
		"int64":       true,
		"rune":        true,
		"string":      true,
		"uint":        true,
		"uint8":       true,
		"uint16":      true,
		"uint32":      true,
		"uint64":      true,
		"uintptr":     true,
		"interface{}": true,
	}

	return builtinTypes[typeName]
}

// filterImports filters imports to only include those needed for the used types
func filterImports(allImports []ImportInfo, usedTypes map[string]bool) []ImportInfo {
	var neededImports []ImportInfo
	seen := make(map[string]bool)

	// Create a map of import path to import info for easy lookup
	importMap := make(map[string]ImportInfo)
	for _, imp := range allImports {
		importMap[imp.Path] = imp
	}

	// Analyze each used type to determine which imports are needed
	for usedType := range usedTypes {
		// Skip built-in types that don't need imports
		if isBuiltinType(usedType) {
			continue
		}

		// Handle qualified types (e.g., "typesv2.ApplicationUID")
		if !strings.Contains(usedType, ".") {
			continue
		}
		typ := strings.SplitN(usedType, ".", 2)[0]
		typ = strings.TrimPrefix(strings.TrimPrefix(typ, "[]"), "*")
		for _, imp := range allImports {
			if imp.Name == typ || (imp.Name == "" && strings.HasSuffix(imp.Path, "/"+typ)) {
				if !seen[imp.Path] {
					neededImports = append(neededImports, imp)
					seen[imp.Path] = true
				}
				break
			}
		}
	}

	return neededImports
}
