/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

package main

import (
	"bytes"
	"fmt"
	"os"
	"slices"
	"text/template"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"

	"github.com/adobe/aquarium-fish/lib/auth"
	"github.com/adobe/aquarium-fish/lib/build"
	aquariumv2 "github.com/adobe/aquarium-fish/lib/rpc/gen/proto/aquarium/v2"
)

const (
	rbacPackage = "aquarium.v2"
	rbacField   = "access_control"

	usage = "Aquarium Permission generator plugin.\n\nFlags:\n  -h, --help\tPrint this help and exit.\n      --version\tPrint the version and exit."
)

// Service represents a gRPC service with its methods and their roles
type Service struct {
	Name    string
	Methods []Method
}

// Method represents a gRPC method with its roles
type Method struct {
	Name         string
	AllowedRoles []string
}

func main() {
	if len(os.Args) == 2 && os.Args[1] == "--version" {
		fmt.Fprintln(os.Stdout, build.Version)
		os.Exit(0)
	}
	if len(os.Args) == 2 && (os.Args[1] == "-h" || os.Args[1] == "--help") {
		fmt.Fprintln(os.Stdout, usage)
		os.Exit(0)
	}
	if len(os.Args) != 1 {
		fmt.Fprintln(os.Stderr, usage)
		os.Exit(1)
	}
	protogen.Options{}.Run(func(plugin *protogen.Plugin) error {
		plugin.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL) | uint64(pluginpb.CodeGeneratorResponse_FEATURE_SUPPORTS_EDITIONS)
		plugin.SupportedEditionsMinimum = descriptorpb.Edition_EDITION_PROTO2
		plugin.SupportedEditionsMaximum = descriptorpb.Edition_EDITION_2023

		services := []Service{}
		uniqueRoles := []string{auth.AdminRoleName}

		for _, f := range plugin.Files {
			if !f.Generate {
				continue
			}

			for _, service := range f.Services {
				s := Service{
					Name:    service.GoName,
					Methods: make([]Method, 0),
				}

				for _, method := range service.Methods {
					opts := method.Desc.Options().(*descriptorpb.MethodOptions)
					ext := proto.GetExtension(opts, aquariumv2.E_AccessControl)
					ac, ok := ext.(*aquariumv2.RoleBasedAccessControl)

					roles := []string{auth.AdminRoleName} // Default role
					if ok && ac != nil && len(ac.AllowedRoles) > 0 {
						for _, role := range ac.AllowedRoles {
							if !slices.Contains(roles, role) {
								roles = append(roles, role)
							}
							if !slices.Contains(uniqueRoles, role) {
								uniqueRoles = append(uniqueRoles, role)
							}
						}
					}

					s.Methods = append(s.Methods, Method{
						Name:         method.GoName,
						AllowedRoles: roles,
					})
				}

				services = append(services, s)
			}
		}

		// Generate the permissions file
		g := plugin.NewGeneratedFile("permissions.gen.go", "")
		var buf bytes.Buffer
		err := permissionsTmpl.Execute(&buf, map[string]any{
			"Services": services,
			"Roles":    uniqueRoles,
		})
		if err != nil {
			return fmt.Errorf("execute template: %v", err)
		}

		g.P(buf.String())
		return nil
	})
}

var permissionsTmpl = template.Must(template.New("permissions").Parse(`
// Code generated by Aquarium buf-gen-permissions. DO NOT EDIT.

package auth

import (
	"github.com/adobe/aquarium-fish/lib/openapi/types"
)

// Service and Method constants
const (
{{- range .Services }}
	{{- $serviceName := .Name }}
	// {{ $serviceName }} service constants
	{{ $serviceName }} = "{{ $serviceName }}"
	{{- range .Methods }}
	{{ $serviceName }}{{ .Name }} = "{{ .Name }}"
	{{- end }}
{{ end }}
)

// All available permissions per role
var permissions = map[string][]types.Permission{
	{{- range $role := .Roles }}
	"{{ $role }}": {
	{{- range $.Services }}
		{{- $serviceName := .Name }}
		{{- range .Methods }}
		{{- $contains := false }}
		{{- range .AllowedRoles }}{{ if eq $role . }}{{ $contains = true }}{{ end }}{{ end }}
		{{- if $contains }}
		{Resource: {{ $serviceName }}, Action: {{ $serviceName }}{{ .Name }}},
		{{- end }}
		{{- end }}
	{{ end }}
	},
{{- end }}
}

// GetRolePermissions returns a map of all possible permissions for all known roles
func GetRolePermissions() map[string][]types.Permission {
	return permissions
}
`))
