{{define "autofill-field" -}}
{/* Autofill field - inline layout */}
<div className="flex items-center justify-between">
  <div className="flex items-center space-x-2 min-w-0 flex-1">
    <label className="text-sm font-medium text-gray-700 dark:text-gray-300 whitespace-nowrap">
      {{.DisplayName}}{{if not .IsOptional}} *{{end}}
    </label>
    {{- if .Comment }}
    <div className="relative group">
      <span className="cursor-help text-gray-400 hover:text-gray-600">(?)</span>
      <div className="absolute left-0 bottom-6 bg-gray-800 text-white text-xs rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity z-50 pointer-events-none max-w-sm w-max p-3 min-w-64 max-h-48 overflow-y-auto">
        <pre className="whitespace-pre-wrap text-xs leading-relaxed">{{ .Comment | htmlEscape }}</pre>
      </div>
    </div>
    {{- end }}
  </div>
  <div className="flex-1 max-w-xs ml-4">
    <div className="flex space-x-2">
      {autofillMode.{{.JSONName}} === 'text' ? (
        <input
          type="text"
          value={formData.{{.JSONName}}}
          onChange={(e) => handleFieldChange('{{.JSONName}}', e.target.value)}
          disabled={isReadOnly || (mode === 'edit' && {{.NoEdit}})}
          className="flex-1 px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          placeholder="Enter {{.AutofillType}} UID..."
        />
      ) : (
        <select
          value={formData.{{.JSONName}}}
          onChange={(e) => handleFieldChange('{{.JSONName}}', e.target.value)}
          disabled={isReadOnly || (mode === 'edit' && {{.NoEdit}})}
          className="flex-1 px-3 py-1 text-sm border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        >
          <option value="">Select {{.AutofillType}}...</option>
          {getAutofillOptions('{{.AutofillType}}').map((item: any) => {
            const key = item.uid || item.name || item.id || JSON.stringify(item);
            const label = item.name ? (item.name + (item.version ? (':' + item.version) : '')) : key;
            return (
              <option key={key} value={key}>
                {label}
              </option>
            );
          })}
        </select>
      )}
      {!isReadOnly && !(mode === 'edit' && {{.NoEdit}}) && (
        <button
          type="button"
          onClick={() => setAutofillMode(prev => ({ ...prev, {{.JSONName}}: prev.{{.JSONName}} === 'text' ? 'dropdown' : 'text' }))}
          className="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 dark:bg-gray-600 dark:text-gray-300 dark:hover:bg-gray-500"
          title={autofillMode.{{.JSONName}} === 'text' ? 'Switch to dropdown' : 'Switch to text input'}
        >
          {autofillMode.{{.JSONName}} === 'text' ? 'üìã' : '‚úèÔ∏è'}
        </button>
      )}
    </div>
    {validationErrors.{{.JSONName}} && (
      <div className="text-xs text-red-600 dark:text-red-400 mt-1">
        {validationErrors.{{.JSONName}}}
      </div>
    )}
  </div>
</div>
{{end}}
