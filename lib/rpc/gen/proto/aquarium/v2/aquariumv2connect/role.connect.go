// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: aquarium/v2/role.proto

package aquariumv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/adobe/aquarium-fish/lib/rpc/gen/proto/aquarium/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RoleServiceName is the fully-qualified name of the RoleService service.
	RoleServiceName = "aquarium.v2.RoleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoleServiceListProcedure is the fully-qualified name of the RoleService's List RPC.
	RoleServiceListProcedure = "/aquarium.v2.RoleService/List"
	// RoleServiceGetProcedure is the fully-qualified name of the RoleService's Get RPC.
	RoleServiceGetProcedure = "/aquarium.v2.RoleService/Get"
	// RoleServiceCreateProcedure is the fully-qualified name of the RoleService's Create RPC.
	RoleServiceCreateProcedure = "/aquarium.v2.RoleService/Create"
	// RoleServiceUpdateProcedure is the fully-qualified name of the RoleService's Update RPC.
	RoleServiceUpdateProcedure = "/aquarium.v2.RoleService/Update"
	// RoleServiceDeleteProcedure is the fully-qualified name of the RoleService's Delete RPC.
	RoleServiceDeleteProcedure = "/aquarium.v2.RoleService/Delete"
)

// RoleServiceClient is a client for the aquarium.v2.RoleService service.
type RoleServiceClient interface {
	// Get list of roles
	List(context.Context, *connect.Request[v2.RoleServiceListRequest]) (*connect.Response[v2.RoleServiceListResponse], error)
	// Get role by name
	Get(context.Context, *connect.Request[v2.RoleServiceGetRequest]) (*connect.Response[v2.RoleServiceGetResponse], error)
	// Create new role
	Create(context.Context, *connect.Request[v2.RoleServiceCreateRequest]) (*connect.Response[v2.RoleServiceCreateResponse], error)
	// Update existing role
	Update(context.Context, *connect.Request[v2.RoleServiceUpdateRequest]) (*connect.Response[v2.RoleServiceUpdateResponse], error)
	// Delete role
	Delete(context.Context, *connect.Request[v2.RoleServiceDeleteRequest]) (*connect.Response[v2.RoleServiceDeleteResponse], error)
}

// NewRoleServiceClient constructs a client for the aquarium.v2.RoleService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RoleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	roleServiceMethods := v2.File_aquarium_v2_role_proto.Services().ByName("RoleService").Methods()
	return &roleServiceClient{
		list: connect.NewClient[v2.RoleServiceListRequest, v2.RoleServiceListResponse](
			httpClient,
			baseURL+RoleServiceListProcedure,
			connect.WithSchema(roleServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v2.RoleServiceGetRequest, v2.RoleServiceGetResponse](
			httpClient,
			baseURL+RoleServiceGetProcedure,
			connect.WithSchema(roleServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[v2.RoleServiceCreateRequest, v2.RoleServiceCreateResponse](
			httpClient,
			baseURL+RoleServiceCreateProcedure,
			connect.WithSchema(roleServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v2.RoleServiceUpdateRequest, v2.RoleServiceUpdateResponse](
			httpClient,
			baseURL+RoleServiceUpdateProcedure,
			connect.WithSchema(roleServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v2.RoleServiceDeleteRequest, v2.RoleServiceDeleteResponse](
			httpClient,
			baseURL+RoleServiceDeleteProcedure,
			connect.WithSchema(roleServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
	}
}

// roleServiceClient implements RoleServiceClient.
type roleServiceClient struct {
	list   *connect.Client[v2.RoleServiceListRequest, v2.RoleServiceListResponse]
	get    *connect.Client[v2.RoleServiceGetRequest, v2.RoleServiceGetResponse]
	create *connect.Client[v2.RoleServiceCreateRequest, v2.RoleServiceCreateResponse]
	update *connect.Client[v2.RoleServiceUpdateRequest, v2.RoleServiceUpdateResponse]
	delete *connect.Client[v2.RoleServiceDeleteRequest, v2.RoleServiceDeleteResponse]
}

// List calls aquarium.v2.RoleService.List.
func (c *roleServiceClient) List(ctx context.Context, req *connect.Request[v2.RoleServiceListRequest]) (*connect.Response[v2.RoleServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Get calls aquarium.v2.RoleService.Get.
func (c *roleServiceClient) Get(ctx context.Context, req *connect.Request[v2.RoleServiceGetRequest]) (*connect.Response[v2.RoleServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Create calls aquarium.v2.RoleService.Create.
func (c *roleServiceClient) Create(ctx context.Context, req *connect.Request[v2.RoleServiceCreateRequest]) (*connect.Response[v2.RoleServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls aquarium.v2.RoleService.Update.
func (c *roleServiceClient) Update(ctx context.Context, req *connect.Request[v2.RoleServiceUpdateRequest]) (*connect.Response[v2.RoleServiceUpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls aquarium.v2.RoleService.Delete.
func (c *roleServiceClient) Delete(ctx context.Context, req *connect.Request[v2.RoleServiceDeleteRequest]) (*connect.Response[v2.RoleServiceDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// RoleServiceHandler is an implementation of the aquarium.v2.RoleService service.
type RoleServiceHandler interface {
	// Get list of roles
	List(context.Context, *connect.Request[v2.RoleServiceListRequest]) (*connect.Response[v2.RoleServiceListResponse], error)
	// Get role by name
	Get(context.Context, *connect.Request[v2.RoleServiceGetRequest]) (*connect.Response[v2.RoleServiceGetResponse], error)
	// Create new role
	Create(context.Context, *connect.Request[v2.RoleServiceCreateRequest]) (*connect.Response[v2.RoleServiceCreateResponse], error)
	// Update existing role
	Update(context.Context, *connect.Request[v2.RoleServiceUpdateRequest]) (*connect.Response[v2.RoleServiceUpdateResponse], error)
	// Delete role
	Delete(context.Context, *connect.Request[v2.RoleServiceDeleteRequest]) (*connect.Response[v2.RoleServiceDeleteResponse], error)
}

// NewRoleServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoleServiceHandler(svc RoleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	roleServiceMethods := v2.File_aquarium_v2_role_proto.Services().ByName("RoleService").Methods()
	roleServiceListHandler := connect.NewUnaryHandler(
		RoleServiceListProcedure,
		svc.List,
		connect.WithSchema(roleServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	roleServiceGetHandler := connect.NewUnaryHandler(
		RoleServiceGetProcedure,
		svc.Get,
		connect.WithSchema(roleServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	roleServiceCreateHandler := connect.NewUnaryHandler(
		RoleServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(roleServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	roleServiceUpdateHandler := connect.NewUnaryHandler(
		RoleServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(roleServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	roleServiceDeleteHandler := connect.NewUnaryHandler(
		RoleServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(roleServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	return "/aquarium.v2.RoleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RoleServiceListProcedure:
			roleServiceListHandler.ServeHTTP(w, r)
		case RoleServiceGetProcedure:
			roleServiceGetHandler.ServeHTTP(w, r)
		case RoleServiceCreateProcedure:
			roleServiceCreateHandler.ServeHTTP(w, r)
		case RoleServiceUpdateProcedure:
			roleServiceUpdateHandler.ServeHTTP(w, r)
		case RoleServiceDeleteProcedure:
			roleServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoleServiceHandler struct{}

func (UnimplementedRoleServiceHandler) List(context.Context, *connect.Request[v2.RoleServiceListRequest]) (*connect.Response[v2.RoleServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.RoleService.List is not implemented"))
}

func (UnimplementedRoleServiceHandler) Get(context.Context, *connect.Request[v2.RoleServiceGetRequest]) (*connect.Response[v2.RoleServiceGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.RoleService.Get is not implemented"))
}

func (UnimplementedRoleServiceHandler) Create(context.Context, *connect.Request[v2.RoleServiceCreateRequest]) (*connect.Response[v2.RoleServiceCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.RoleService.Create is not implemented"))
}

func (UnimplementedRoleServiceHandler) Update(context.Context, *connect.Request[v2.RoleServiceUpdateRequest]) (*connect.Response[v2.RoleServiceUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.RoleService.Update is not implemented"))
}

func (UnimplementedRoleServiceHandler) Delete(context.Context, *connect.Request[v2.RoleServiceDeleteRequest]) (*connect.Response[v2.RoleServiceDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.RoleService.Delete is not implemented"))
}
