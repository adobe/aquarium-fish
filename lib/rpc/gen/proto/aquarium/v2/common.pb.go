// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: aquarium/v2/common.proto

package aquariumv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Authentication information to enable connecting to the machine.
type Authentication struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The username to login into the ApplicationResource.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// The password to login into the ApplicationResource.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// SSH private key to use instead of password to login into the ApplicationResource.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// TCP port to connect with SSH client.
	Port          int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Authentication) Reset() {
	*x = Authentication{}
	mi := &file_aquarium_v2_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authentication) ProtoMessage() {}

func (x *Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_aquarium_v2_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authentication.ProtoReflect.Descriptor instead.
func (*Authentication) Descriptor() ([]byte, []int) {
	return file_aquarium_v2_common_proto_rawDescGZIP(), []int{0}
}

func (x *Authentication) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Authentication) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Authentication) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Authentication) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Common response wrapper for all API responses
type Response struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Operation status (true = success, false = failure)
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Human readable message about the operation result
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Response) Reset() {
	*x = Response{}
	mi := &file_aquarium_v2_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_aquarium_v2_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_aquarium_v2_common_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_aquarium_v2_common_proto protoreflect.FileDescriptor

const file_aquarium_v2_common_proto_rawDesc = "" +
	"\n" +
	"\x18aquarium/v2/common.proto\x12\vaquarium.v2\"n\n" +
	"\x0eAuthentication\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\x12\x10\n" +
	"\x03key\x18\x03 \x01(\tR\x03key\x12\x12\n" +
	"\x04port\x18\x04 \x01(\x05R\x04port\"<\n" +
	"\bResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\bR\x06status\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessageBIZGgithub.com/adobe/aquarium-fish/lib/rpc/gen/proto/aquarium/v2;aquariumv2b\x06proto3"

var (
	file_aquarium_v2_common_proto_rawDescOnce sync.Once
	file_aquarium_v2_common_proto_rawDescData []byte
)

func file_aquarium_v2_common_proto_rawDescGZIP() []byte {
	file_aquarium_v2_common_proto_rawDescOnce.Do(func() {
		file_aquarium_v2_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_aquarium_v2_common_proto_rawDesc), len(file_aquarium_v2_common_proto_rawDesc)))
	})
	return file_aquarium_v2_common_proto_rawDescData
}

var file_aquarium_v2_common_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_aquarium_v2_common_proto_goTypes = []any{
	(*Authentication)(nil), // 0: aquarium.v2.Authentication
	(*Response)(nil),       // 1: aquarium.v2.Response
}
var file_aquarium_v2_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_aquarium_v2_common_proto_init() }
func file_aquarium_v2_common_proto_init() {
	if File_aquarium_v2_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_aquarium_v2_common_proto_rawDesc), len(file_aquarium_v2_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aquarium_v2_common_proto_goTypes,
		DependencyIndexes: file_aquarium_v2_common_proto_depIdxs,
		MessageInfos:      file_aquarium_v2_common_proto_msgTypes,
	}.Build()
	File_aquarium_v2_common_proto = out.File
	file_aquarium_v2_common_proto_goTypes = nil
	file_aquarium_v2_common_proto_depIdxs = nil
}
