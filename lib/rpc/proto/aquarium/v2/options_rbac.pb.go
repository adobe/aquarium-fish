// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.

// Author: Sergei Parshev (@sparshev)

// Contains options for rpc's to alter RBAC behavior
// Example:
// rpc GetMe(UserServiceGetMeRequest) returns (UserServiceGetMeResponse) {
//   option (access_control) = {
//     allow_unauthenticated: false,
//     allowed_roles: ["User", "Administrator"]
//   };
// }

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: aquarium/v2/options_rbac.proto

package aquariumv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RoleBasedAccessControl defines the RBAC policy for a method
type RoleBasedAccessControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether unauthenticated access is allowed
	AllowUnauthenticated *bool `protobuf:"varint,1,opt,name=allow_unauthenticated,json=allowUnauthenticated,proto3,oneof" json:"allow_unauthenticated,omitempty"`
	NoPermissionNeeded   *bool `protobuf:"varint,2,opt,name=no_permission_needed,json=noPermissionNeeded,proto3,oneof" json:"no_permission_needed,omitempty"`
	// List of roles that are allowed to access this method
	// If empty, only Administrator role is allowed
	AllowedRoles []string `protobuf:"bytes,3,rep,name=allowed_roles,json=allowedRoles,proto3" json:"allowed_roles,omitempty"`
	// List of additional actions used by the RPC method
	AdditionalActions []string `protobuf:"bytes,4,rep,name=additional_actions,json=additionalActions,proto3" json:"additional_actions,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RoleBasedAccessControl) Reset() {
	*x = RoleBasedAccessControl{}
	mi := &file_aquarium_v2_options_rbac_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleBasedAccessControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleBasedAccessControl) ProtoMessage() {}

func (x *RoleBasedAccessControl) ProtoReflect() protoreflect.Message {
	mi := &file_aquarium_v2_options_rbac_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleBasedAccessControl.ProtoReflect.Descriptor instead.
func (*RoleBasedAccessControl) Descriptor() ([]byte, []int) {
	return file_aquarium_v2_options_rbac_proto_rawDescGZIP(), []int{0}
}

func (x *RoleBasedAccessControl) GetAllowUnauthenticated() bool {
	if x != nil && x.AllowUnauthenticated != nil {
		return *x.AllowUnauthenticated
	}
	return false
}

func (x *RoleBasedAccessControl) GetNoPermissionNeeded() bool {
	if x != nil && x.NoPermissionNeeded != nil {
		return *x.NoPermissionNeeded
	}
	return false
}

func (x *RoleBasedAccessControl) GetAllowedRoles() []string {
	if x != nil {
		return x.AllowedRoles
	}
	return nil
}

func (x *RoleBasedAccessControl) GetAdditionalActions() []string {
	if x != nil {
		return x.AdditionalActions
	}
	return nil
}

var file_aquarium_v2_options_rbac_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*RoleBasedAccessControl)(nil),
		Field:         50000,
		Name:          "aquarium.v2.access_control",
		Tag:           "bytes,50000,opt,name=access_control",
		Filename:      "aquarium/v2/options_rbac.proto",
	},
}

// Extension fields to descriptorpb.MethodOptions.
var (
	// Access control options for the method
	//
	// optional aquarium.v2.RoleBasedAccessControl access_control = 50000;
	E_AccessControl = &file_aquarium_v2_options_rbac_proto_extTypes[0]
)

var File_aquarium_v2_options_rbac_proto protoreflect.FileDescriptor

const file_aquarium_v2_options_rbac_proto_rawDesc = "" +
	"\n" +
	"\x1eaquarium/v2/options_rbac.proto\x12\vaquarium.v2\x1a google/protobuf/descriptor.proto\"\x90\x02\n" +
	"\x16RoleBasedAccessControl\x128\n" +
	"\x15allow_unauthenticated\x18\x01 \x01(\bH\x00R\x14allowUnauthenticated\x88\x01\x01\x125\n" +
	"\x14no_permission_needed\x18\x02 \x01(\bH\x01R\x12noPermissionNeeded\x88\x01\x01\x12#\n" +
	"\rallowed_roles\x18\x03 \x03(\tR\fallowedRoles\x12-\n" +
	"\x12additional_actions\x18\x04 \x03(\tR\x11additionalActionsB\x18\n" +
	"\x16_allow_unauthenticatedB\x17\n" +
	"\x15_no_permission_needed:o\n" +
	"\x0eaccess_control\x12\x1e.google.protobuf.MethodOptions\x18Ð†\x03 \x01(\v2#.aquarium.v2.RoleBasedAccessControlR\raccessControl\x88\x01\x01BEZCgithub.com/adobe/aquarium-fish/lib/rpc/proto/aquarium/v2;aquariumv2b\x06proto3"

var (
	file_aquarium_v2_options_rbac_proto_rawDescOnce sync.Once
	file_aquarium_v2_options_rbac_proto_rawDescData []byte
)

func file_aquarium_v2_options_rbac_proto_rawDescGZIP() []byte {
	file_aquarium_v2_options_rbac_proto_rawDescOnce.Do(func() {
		file_aquarium_v2_options_rbac_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_aquarium_v2_options_rbac_proto_rawDesc), len(file_aquarium_v2_options_rbac_proto_rawDesc)))
	})
	return file_aquarium_v2_options_rbac_proto_rawDescData
}

var file_aquarium_v2_options_rbac_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_aquarium_v2_options_rbac_proto_goTypes = []any{
	(*RoleBasedAccessControl)(nil),     // 0: aquarium.v2.RoleBasedAccessControl
	(*descriptorpb.MethodOptions)(nil), // 1: google.protobuf.MethodOptions
}
var file_aquarium_v2_options_rbac_proto_depIdxs = []int32{
	1, // 0: aquarium.v2.access_control:extendee -> google.protobuf.MethodOptions
	0, // 1: aquarium.v2.access_control:type_name -> aquarium.v2.RoleBasedAccessControl
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	1, // [1:2] is the sub-list for extension type_name
	0, // [0:1] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_aquarium_v2_options_rbac_proto_init() }
func file_aquarium_v2_options_rbac_proto_init() {
	if File_aquarium_v2_options_rbac_proto != nil {
		return
	}
	file_aquarium_v2_options_rbac_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_aquarium_v2_options_rbac_proto_rawDesc), len(file_aquarium_v2_options_rbac_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_aquarium_v2_options_rbac_proto_goTypes,
		DependencyIndexes: file_aquarium_v2_options_rbac_proto_depIdxs,
		MessageInfos:      file_aquarium_v2_options_rbac_proto_msgTypes,
		ExtensionInfos:    file_aquarium_v2_options_rbac_proto_extTypes,
	}.Build()
	File_aquarium_v2_options_rbac_proto = out.File
	file_aquarium_v2_options_rbac_proto_goTypes = nil
	file_aquarium_v2_options_rbac_proto_depIdxs = nil
}
