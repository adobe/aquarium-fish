// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.
// Author: Sergei Parshev (@sparshev)

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: aquarium/v2/application.proto

package aquariumv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/adobe/aquarium-fish/lib/rpc/proto/aquarium/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ApplicationServiceName is the fully-qualified name of the ApplicationService service.
	ApplicationServiceName = "aquarium.v2.ApplicationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApplicationServiceListProcedure is the fully-qualified name of the ApplicationService's List RPC.
	ApplicationServiceListProcedure = "/aquarium.v2.ApplicationService/List"
	// ApplicationServiceGetProcedure is the fully-qualified name of the ApplicationService's Get RPC.
	ApplicationServiceGetProcedure = "/aquarium.v2.ApplicationService/Get"
	// ApplicationServiceCreateProcedure is the fully-qualified name of the ApplicationService's Create
	// RPC.
	ApplicationServiceCreateProcedure = "/aquarium.v2.ApplicationService/Create"
	// ApplicationServiceGetStateProcedure is the fully-qualified name of the ApplicationService's
	// GetState RPC.
	ApplicationServiceGetStateProcedure = "/aquarium.v2.ApplicationService/GetState"
	// ApplicationServiceGetResourceProcedure is the fully-qualified name of the ApplicationService's
	// GetResource RPC.
	ApplicationServiceGetResourceProcedure = "/aquarium.v2.ApplicationService/GetResource"
	// ApplicationServiceListTaskProcedure is the fully-qualified name of the ApplicationService's
	// ListTask RPC.
	ApplicationServiceListTaskProcedure = "/aquarium.v2.ApplicationService/ListTask"
	// ApplicationServiceCreateTaskProcedure is the fully-qualified name of the ApplicationService's
	// CreateTask RPC.
	ApplicationServiceCreateTaskProcedure = "/aquarium.v2.ApplicationService/CreateTask"
	// ApplicationServiceGetTaskProcedure is the fully-qualified name of the ApplicationService's
	// GetTask RPC.
	ApplicationServiceGetTaskProcedure = "/aquarium.v2.ApplicationService/GetTask"
	// ApplicationServiceDeallocateProcedure is the fully-qualified name of the ApplicationService's
	// Deallocate RPC.
	ApplicationServiceDeallocateProcedure = "/aquarium.v2.ApplicationService/Deallocate"
)

// ApplicationServiceClient is a client for the aquarium.v2.ApplicationService service.
type ApplicationServiceClient interface {
	// Get list of applications
	List(context.Context, *connect.Request[v2.ApplicationServiceListRequest]) (*connect.Response[v2.ApplicationServiceListResponse], error)
	// Get application by UID
	Get(context.Context, *connect.Request[v2.ApplicationServiceGetRequest]) (*connect.Response[v2.ApplicationServiceGetResponse], error)
	// Create new application
	Create(context.Context, *connect.Request[v2.ApplicationServiceCreateRequest]) (*connect.Response[v2.ApplicationServiceCreateResponse], error)
	// Get application state
	GetState(context.Context, *connect.Request[v2.ApplicationServiceGetStateRequest]) (*connect.Response[v2.ApplicationServiceGetStateResponse], error)
	// Get application resource
	GetResource(context.Context, *connect.Request[v2.ApplicationServiceGetResourceRequest]) (*connect.Response[v2.ApplicationServiceGetResourceResponse], error)
	// List application tasks
	ListTask(context.Context, *connect.Request[v2.ApplicationServiceListTaskRequest]) (*connect.Response[v2.ApplicationServiceListTaskResponse], error)
	// Create application task
	CreateTask(context.Context, *connect.Request[v2.ApplicationServiceCreateTaskRequest]) (*connect.Response[v2.ApplicationServiceCreateTaskResponse], error)
	// Get application task
	GetTask(context.Context, *connect.Request[v2.ApplicationServiceGetTaskRequest]) (*connect.Response[v2.ApplicationServiceGetTaskResponse], error)
	// Deallocate application
	Deallocate(context.Context, *connect.Request[v2.ApplicationServiceDeallocateRequest]) (*connect.Response[v2.ApplicationServiceDeallocateResponse], error)
}

// NewApplicationServiceClient constructs a client for the aquarium.v2.ApplicationService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApplicationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ApplicationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	applicationServiceMethods := v2.File_aquarium_v2_application_proto.Services().ByName("ApplicationService").Methods()
	return &applicationServiceClient{
		list: connect.NewClient[v2.ApplicationServiceListRequest, v2.ApplicationServiceListResponse](
			httpClient,
			baseURL+ApplicationServiceListProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v2.ApplicationServiceGetRequest, v2.ApplicationServiceGetResponse](
			httpClient,
			baseURL+ApplicationServiceGetProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[v2.ApplicationServiceCreateRequest, v2.ApplicationServiceCreateResponse](
			httpClient,
			baseURL+ApplicationServiceCreateProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		getState: connect.NewClient[v2.ApplicationServiceGetStateRequest, v2.ApplicationServiceGetStateResponse](
			httpClient,
			baseURL+ApplicationServiceGetStateProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("GetState")),
			connect.WithClientOptions(opts...),
		),
		getResource: connect.NewClient[v2.ApplicationServiceGetResourceRequest, v2.ApplicationServiceGetResourceResponse](
			httpClient,
			baseURL+ApplicationServiceGetResourceProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("GetResource")),
			connect.WithClientOptions(opts...),
		),
		listTask: connect.NewClient[v2.ApplicationServiceListTaskRequest, v2.ApplicationServiceListTaskResponse](
			httpClient,
			baseURL+ApplicationServiceListTaskProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("ListTask")),
			connect.WithClientOptions(opts...),
		),
		createTask: connect.NewClient[v2.ApplicationServiceCreateTaskRequest, v2.ApplicationServiceCreateTaskResponse](
			httpClient,
			baseURL+ApplicationServiceCreateTaskProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("CreateTask")),
			connect.WithClientOptions(opts...),
		),
		getTask: connect.NewClient[v2.ApplicationServiceGetTaskRequest, v2.ApplicationServiceGetTaskResponse](
			httpClient,
			baseURL+ApplicationServiceGetTaskProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("GetTask")),
			connect.WithClientOptions(opts...),
		),
		deallocate: connect.NewClient[v2.ApplicationServiceDeallocateRequest, v2.ApplicationServiceDeallocateResponse](
			httpClient,
			baseURL+ApplicationServiceDeallocateProcedure,
			connect.WithSchema(applicationServiceMethods.ByName("Deallocate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// applicationServiceClient implements ApplicationServiceClient.
type applicationServiceClient struct {
	list        *connect.Client[v2.ApplicationServiceListRequest, v2.ApplicationServiceListResponse]
	get         *connect.Client[v2.ApplicationServiceGetRequest, v2.ApplicationServiceGetResponse]
	create      *connect.Client[v2.ApplicationServiceCreateRequest, v2.ApplicationServiceCreateResponse]
	getState    *connect.Client[v2.ApplicationServiceGetStateRequest, v2.ApplicationServiceGetStateResponse]
	getResource *connect.Client[v2.ApplicationServiceGetResourceRequest, v2.ApplicationServiceGetResourceResponse]
	listTask    *connect.Client[v2.ApplicationServiceListTaskRequest, v2.ApplicationServiceListTaskResponse]
	createTask  *connect.Client[v2.ApplicationServiceCreateTaskRequest, v2.ApplicationServiceCreateTaskResponse]
	getTask     *connect.Client[v2.ApplicationServiceGetTaskRequest, v2.ApplicationServiceGetTaskResponse]
	deallocate  *connect.Client[v2.ApplicationServiceDeallocateRequest, v2.ApplicationServiceDeallocateResponse]
}

// List calls aquarium.v2.ApplicationService.List.
func (c *applicationServiceClient) List(ctx context.Context, req *connect.Request[v2.ApplicationServiceListRequest]) (*connect.Response[v2.ApplicationServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Get calls aquarium.v2.ApplicationService.Get.
func (c *applicationServiceClient) Get(ctx context.Context, req *connect.Request[v2.ApplicationServiceGetRequest]) (*connect.Response[v2.ApplicationServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Create calls aquarium.v2.ApplicationService.Create.
func (c *applicationServiceClient) Create(ctx context.Context, req *connect.Request[v2.ApplicationServiceCreateRequest]) (*connect.Response[v2.ApplicationServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// GetState calls aquarium.v2.ApplicationService.GetState.
func (c *applicationServiceClient) GetState(ctx context.Context, req *connect.Request[v2.ApplicationServiceGetStateRequest]) (*connect.Response[v2.ApplicationServiceGetStateResponse], error) {
	return c.getState.CallUnary(ctx, req)
}

// GetResource calls aquarium.v2.ApplicationService.GetResource.
func (c *applicationServiceClient) GetResource(ctx context.Context, req *connect.Request[v2.ApplicationServiceGetResourceRequest]) (*connect.Response[v2.ApplicationServiceGetResourceResponse], error) {
	return c.getResource.CallUnary(ctx, req)
}

// ListTask calls aquarium.v2.ApplicationService.ListTask.
func (c *applicationServiceClient) ListTask(ctx context.Context, req *connect.Request[v2.ApplicationServiceListTaskRequest]) (*connect.Response[v2.ApplicationServiceListTaskResponse], error) {
	return c.listTask.CallUnary(ctx, req)
}

// CreateTask calls aquarium.v2.ApplicationService.CreateTask.
func (c *applicationServiceClient) CreateTask(ctx context.Context, req *connect.Request[v2.ApplicationServiceCreateTaskRequest]) (*connect.Response[v2.ApplicationServiceCreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// GetTask calls aquarium.v2.ApplicationService.GetTask.
func (c *applicationServiceClient) GetTask(ctx context.Context, req *connect.Request[v2.ApplicationServiceGetTaskRequest]) (*connect.Response[v2.ApplicationServiceGetTaskResponse], error) {
	return c.getTask.CallUnary(ctx, req)
}

// Deallocate calls aquarium.v2.ApplicationService.Deallocate.
func (c *applicationServiceClient) Deallocate(ctx context.Context, req *connect.Request[v2.ApplicationServiceDeallocateRequest]) (*connect.Response[v2.ApplicationServiceDeallocateResponse], error) {
	return c.deallocate.CallUnary(ctx, req)
}

// ApplicationServiceHandler is an implementation of the aquarium.v2.ApplicationService service.
type ApplicationServiceHandler interface {
	// Get list of applications
	List(context.Context, *connect.Request[v2.ApplicationServiceListRequest]) (*connect.Response[v2.ApplicationServiceListResponse], error)
	// Get application by UID
	Get(context.Context, *connect.Request[v2.ApplicationServiceGetRequest]) (*connect.Response[v2.ApplicationServiceGetResponse], error)
	// Create new application
	Create(context.Context, *connect.Request[v2.ApplicationServiceCreateRequest]) (*connect.Response[v2.ApplicationServiceCreateResponse], error)
	// Get application state
	GetState(context.Context, *connect.Request[v2.ApplicationServiceGetStateRequest]) (*connect.Response[v2.ApplicationServiceGetStateResponse], error)
	// Get application resource
	GetResource(context.Context, *connect.Request[v2.ApplicationServiceGetResourceRequest]) (*connect.Response[v2.ApplicationServiceGetResourceResponse], error)
	// List application tasks
	ListTask(context.Context, *connect.Request[v2.ApplicationServiceListTaskRequest]) (*connect.Response[v2.ApplicationServiceListTaskResponse], error)
	// Create application task
	CreateTask(context.Context, *connect.Request[v2.ApplicationServiceCreateTaskRequest]) (*connect.Response[v2.ApplicationServiceCreateTaskResponse], error)
	// Get application task
	GetTask(context.Context, *connect.Request[v2.ApplicationServiceGetTaskRequest]) (*connect.Response[v2.ApplicationServiceGetTaskResponse], error)
	// Deallocate application
	Deallocate(context.Context, *connect.Request[v2.ApplicationServiceDeallocateRequest]) (*connect.Response[v2.ApplicationServiceDeallocateResponse], error)
}

// NewApplicationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApplicationServiceHandler(svc ApplicationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	applicationServiceMethods := v2.File_aquarium_v2_application_proto.Services().ByName("ApplicationService").Methods()
	applicationServiceListHandler := connect.NewUnaryHandler(
		ApplicationServiceListProcedure,
		svc.List,
		connect.WithSchema(applicationServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceGetHandler := connect.NewUnaryHandler(
		ApplicationServiceGetProcedure,
		svc.Get,
		connect.WithSchema(applicationServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceCreateHandler := connect.NewUnaryHandler(
		ApplicationServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(applicationServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceGetStateHandler := connect.NewUnaryHandler(
		ApplicationServiceGetStateProcedure,
		svc.GetState,
		connect.WithSchema(applicationServiceMethods.ByName("GetState")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceGetResourceHandler := connect.NewUnaryHandler(
		ApplicationServiceGetResourceProcedure,
		svc.GetResource,
		connect.WithSchema(applicationServiceMethods.ByName("GetResource")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceListTaskHandler := connect.NewUnaryHandler(
		ApplicationServiceListTaskProcedure,
		svc.ListTask,
		connect.WithSchema(applicationServiceMethods.ByName("ListTask")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceCreateTaskHandler := connect.NewUnaryHandler(
		ApplicationServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(applicationServiceMethods.ByName("CreateTask")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceGetTaskHandler := connect.NewUnaryHandler(
		ApplicationServiceGetTaskProcedure,
		svc.GetTask,
		connect.WithSchema(applicationServiceMethods.ByName("GetTask")),
		connect.WithHandlerOptions(opts...),
	)
	applicationServiceDeallocateHandler := connect.NewUnaryHandler(
		ApplicationServiceDeallocateProcedure,
		svc.Deallocate,
		connect.WithSchema(applicationServiceMethods.ByName("Deallocate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/aquarium.v2.ApplicationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApplicationServiceListProcedure:
			applicationServiceListHandler.ServeHTTP(w, r)
		case ApplicationServiceGetProcedure:
			applicationServiceGetHandler.ServeHTTP(w, r)
		case ApplicationServiceCreateProcedure:
			applicationServiceCreateHandler.ServeHTTP(w, r)
		case ApplicationServiceGetStateProcedure:
			applicationServiceGetStateHandler.ServeHTTP(w, r)
		case ApplicationServiceGetResourceProcedure:
			applicationServiceGetResourceHandler.ServeHTTP(w, r)
		case ApplicationServiceListTaskProcedure:
			applicationServiceListTaskHandler.ServeHTTP(w, r)
		case ApplicationServiceCreateTaskProcedure:
			applicationServiceCreateTaskHandler.ServeHTTP(w, r)
		case ApplicationServiceGetTaskProcedure:
			applicationServiceGetTaskHandler.ServeHTTP(w, r)
		case ApplicationServiceDeallocateProcedure:
			applicationServiceDeallocateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApplicationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApplicationServiceHandler struct{}

func (UnimplementedApplicationServiceHandler) List(context.Context, *connect.Request[v2.ApplicationServiceListRequest]) (*connect.Response[v2.ApplicationServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.ApplicationService.List is not implemented"))
}

func (UnimplementedApplicationServiceHandler) Get(context.Context, *connect.Request[v2.ApplicationServiceGetRequest]) (*connect.Response[v2.ApplicationServiceGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.ApplicationService.Get is not implemented"))
}

func (UnimplementedApplicationServiceHandler) Create(context.Context, *connect.Request[v2.ApplicationServiceCreateRequest]) (*connect.Response[v2.ApplicationServiceCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.ApplicationService.Create is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetState(context.Context, *connect.Request[v2.ApplicationServiceGetStateRequest]) (*connect.Response[v2.ApplicationServiceGetStateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.ApplicationService.GetState is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetResource(context.Context, *connect.Request[v2.ApplicationServiceGetResourceRequest]) (*connect.Response[v2.ApplicationServiceGetResourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.ApplicationService.GetResource is not implemented"))
}

func (UnimplementedApplicationServiceHandler) ListTask(context.Context, *connect.Request[v2.ApplicationServiceListTaskRequest]) (*connect.Response[v2.ApplicationServiceListTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.ApplicationService.ListTask is not implemented"))
}

func (UnimplementedApplicationServiceHandler) CreateTask(context.Context, *connect.Request[v2.ApplicationServiceCreateTaskRequest]) (*connect.Response[v2.ApplicationServiceCreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.ApplicationService.CreateTask is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetTask(context.Context, *connect.Request[v2.ApplicationServiceGetTaskRequest]) (*connect.Response[v2.ApplicationServiceGetTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.ApplicationService.GetTask is not implemented"))
}

func (UnimplementedApplicationServiceHandler) Deallocate(context.Context, *connect.Request[v2.ApplicationServiceDeallocateRequest]) (*connect.Response[v2.ApplicationServiceDeallocateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.ApplicationService.Deallocate is not implemented"))
}
