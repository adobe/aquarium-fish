// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.
// Author: Sergei Parshev (@sparshev)

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: aquarium/v2/gate_proxyssh_access.proto

package aquariumv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/adobe/aquarium-fish/lib/rpc/proto/aquarium/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GateProxySSHServiceName is the fully-qualified name of the GateProxySSHService service.
	GateProxySSHServiceName = "aquarium.v2.GateProxySSHService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GateProxySSHServiceGetResourceAccessProcedure is the fully-qualified name of the
	// GateProxySSHService's GetResourceAccess RPC.
	GateProxySSHServiceGetResourceAccessProcedure = "/aquarium.v2.GateProxySSHService/GetResourceAccess"
)

// GateProxySSHServiceClient is a client for the aquarium.v2.GateProxySSHService service.
type GateProxySSHServiceClient interface {
	// GetResourceAccess returns credentials to access the ApplicationResource
	GetResourceAccess(context.Context, *connect.Request[v2.GateProxySSHServiceGetResourceAccessRequest]) (*connect.Response[v2.GateProxySSHServiceGetResourceAccessResponse], error)
}

// NewGateProxySSHServiceClient constructs a client for the aquarium.v2.GateProxySSHService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGateProxySSHServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GateProxySSHServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gateProxySSHServiceMethods := v2.File_aquarium_v2_gate_proxyssh_access_proto.Services().ByName("GateProxySSHService").Methods()
	return &gateProxySSHServiceClient{
		getResourceAccess: connect.NewClient[v2.GateProxySSHServiceGetResourceAccessRequest, v2.GateProxySSHServiceGetResourceAccessResponse](
			httpClient,
			baseURL+GateProxySSHServiceGetResourceAccessProcedure,
			connect.WithSchema(gateProxySSHServiceMethods.ByName("GetResourceAccess")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gateProxySSHServiceClient implements GateProxySSHServiceClient.
type gateProxySSHServiceClient struct {
	getResourceAccess *connect.Client[v2.GateProxySSHServiceGetResourceAccessRequest, v2.GateProxySSHServiceGetResourceAccessResponse]
}

// GetResourceAccess calls aquarium.v2.GateProxySSHService.GetResourceAccess.
func (c *gateProxySSHServiceClient) GetResourceAccess(ctx context.Context, req *connect.Request[v2.GateProxySSHServiceGetResourceAccessRequest]) (*connect.Response[v2.GateProxySSHServiceGetResourceAccessResponse], error) {
	return c.getResourceAccess.CallUnary(ctx, req)
}

// GateProxySSHServiceHandler is an implementation of the aquarium.v2.GateProxySSHService service.
type GateProxySSHServiceHandler interface {
	// GetResourceAccess returns credentials to access the ApplicationResource
	GetResourceAccess(context.Context, *connect.Request[v2.GateProxySSHServiceGetResourceAccessRequest]) (*connect.Response[v2.GateProxySSHServiceGetResourceAccessResponse], error)
}

// NewGateProxySSHServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGateProxySSHServiceHandler(svc GateProxySSHServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gateProxySSHServiceMethods := v2.File_aquarium_v2_gate_proxyssh_access_proto.Services().ByName("GateProxySSHService").Methods()
	gateProxySSHServiceGetResourceAccessHandler := connect.NewUnaryHandler(
		GateProxySSHServiceGetResourceAccessProcedure,
		svc.GetResourceAccess,
		connect.WithSchema(gateProxySSHServiceMethods.ByName("GetResourceAccess")),
		connect.WithHandlerOptions(opts...),
	)
	return "/aquarium.v2.GateProxySSHService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GateProxySSHServiceGetResourceAccessProcedure:
			gateProxySSHServiceGetResourceAccessHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGateProxySSHServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGateProxySSHServiceHandler struct{}

func (UnimplementedGateProxySSHServiceHandler) GetResourceAccess(context.Context, *connect.Request[v2.GateProxySSHServiceGetResourceAccessRequest]) (*connect.Response[v2.GateProxySSHServiceGetResourceAccessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.GateProxySSHService.GetResourceAccess is not implemented"))
}
