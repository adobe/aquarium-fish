// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.
// Author: Sergei Parshev (@sparshev)

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: aquarium/v2/user.proto

package aquariumv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/adobe/aquarium-fish/lib/rpc/proto/aquarium/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "aquarium.v2.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetMeProcedure is the fully-qualified name of the UserService's GetMe RPC.
	UserServiceGetMeProcedure = "/aquarium.v2.UserService/GetMe"
	// UserServiceListProcedure is the fully-qualified name of the UserService's List RPC.
	UserServiceListProcedure = "/aquarium.v2.UserService/List"
	// UserServiceGetProcedure is the fully-qualified name of the UserService's Get RPC.
	UserServiceGetProcedure = "/aquarium.v2.UserService/Get"
	// UserServiceCreateProcedure is the fully-qualified name of the UserService's Create RPC.
	UserServiceCreateProcedure = "/aquarium.v2.UserService/Create"
	// UserServiceUpdateProcedure is the fully-qualified name of the UserService's Update RPC.
	UserServiceUpdateProcedure = "/aquarium.v2.UserService/Update"
	// UserServiceRemoveProcedure is the fully-qualified name of the UserService's Remove RPC.
	UserServiceRemoveProcedure = "/aquarium.v2.UserService/Remove"
	// UserServiceListGroupProcedure is the fully-qualified name of the UserService's ListGroup RPC.
	UserServiceListGroupProcedure = "/aquarium.v2.UserService/ListGroup"
	// UserServiceGetGroupProcedure is the fully-qualified name of the UserService's GetGroup RPC.
	UserServiceGetGroupProcedure = "/aquarium.v2.UserService/GetGroup"
	// UserServiceCreateGroupProcedure is the fully-qualified name of the UserService's CreateGroup RPC.
	UserServiceCreateGroupProcedure = "/aquarium.v2.UserService/CreateGroup"
	// UserServiceUpdateGroupProcedure is the fully-qualified name of the UserService's UpdateGroup RPC.
	UserServiceUpdateGroupProcedure = "/aquarium.v2.UserService/UpdateGroup"
	// UserServiceRemoveGroupProcedure is the fully-qualified name of the UserService's RemoveGroup RPC.
	UserServiceRemoveGroupProcedure = "/aquarium.v2.UserService/RemoveGroup"
)

// UserServiceClient is a client for the aquarium.v2.UserService service.
type UserServiceClient interface {
	// Get current user information
	GetMe(context.Context, *connect.Request[v2.UserServiceGetMeRequest]) (*connect.Response[v2.UserServiceGetMeResponse], error)
	// Get list of users
	List(context.Context, *connect.Request[v2.UserServiceListRequest]) (*connect.Response[v2.UserServiceListResponse], error)
	// Get user by name
	Get(context.Context, *connect.Request[v2.UserServiceGetRequest]) (*connect.Response[v2.UserServiceGetResponse], error)
	// Create new user
	Create(context.Context, *connect.Request[v2.UserServiceCreateRequest]) (*connect.Response[v2.UserServiceCreateResponse], error)
	// Update existing user
	Update(context.Context, *connect.Request[v2.UserServiceUpdateRequest]) (*connect.Response[v2.UserServiceUpdateResponse], error)
	// Remove user
	Remove(context.Context, *connect.Request[v2.UserServiceRemoveRequest]) (*connect.Response[v2.UserServiceRemoveResponse], error)
	// Get list of user groups
	ListGroup(context.Context, *connect.Request[v2.UserServiceListGroupRequest]) (*connect.Response[v2.UserServiceListGroupResponse], error)
	// Get user group by name
	GetGroup(context.Context, *connect.Request[v2.UserServiceGetGroupRequest]) (*connect.Response[v2.UserServiceGetGroupResponse], error)
	// Create new user group
	CreateGroup(context.Context, *connect.Request[v2.UserServiceCreateGroupRequest]) (*connect.Response[v2.UserServiceCreateGroupResponse], error)
	// Update existing user group
	UpdateGroup(context.Context, *connect.Request[v2.UserServiceUpdateGroupRequest]) (*connect.Response[v2.UserServiceUpdateGroupResponse], error)
	// Remove user group
	RemoveGroup(context.Context, *connect.Request[v2.UserServiceRemoveGroupRequest]) (*connect.Response[v2.UserServiceRemoveGroupResponse], error)
}

// NewUserServiceClient constructs a client for the aquarium.v2.UserService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := v2.File_aquarium_v2_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		getMe: connect.NewClient[v2.UserServiceGetMeRequest, v2.UserServiceGetMeResponse](
			httpClient,
			baseURL+UserServiceGetMeProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetMe")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v2.UserServiceListRequest, v2.UserServiceListResponse](
			httpClient,
			baseURL+UserServiceListProcedure,
			connect.WithSchema(userServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v2.UserServiceGetRequest, v2.UserServiceGetResponse](
			httpClient,
			baseURL+UserServiceGetProcedure,
			connect.WithSchema(userServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[v2.UserServiceCreateRequest, v2.UserServiceCreateResponse](
			httpClient,
			baseURL+UserServiceCreateProcedure,
			connect.WithSchema(userServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v2.UserServiceUpdateRequest, v2.UserServiceUpdateResponse](
			httpClient,
			baseURL+UserServiceUpdateProcedure,
			connect.WithSchema(userServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		remove: connect.NewClient[v2.UserServiceRemoveRequest, v2.UserServiceRemoveResponse](
			httpClient,
			baseURL+UserServiceRemoveProcedure,
			connect.WithSchema(userServiceMethods.ByName("Remove")),
			connect.WithClientOptions(opts...),
		),
		listGroup: connect.NewClient[v2.UserServiceListGroupRequest, v2.UserServiceListGroupResponse](
			httpClient,
			baseURL+UserServiceListGroupProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListGroup")),
			connect.WithClientOptions(opts...),
		),
		getGroup: connect.NewClient[v2.UserServiceGetGroupRequest, v2.UserServiceGetGroupResponse](
			httpClient,
			baseURL+UserServiceGetGroupProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetGroup")),
			connect.WithClientOptions(opts...),
		),
		createGroup: connect.NewClient[v2.UserServiceCreateGroupRequest, v2.UserServiceCreateGroupResponse](
			httpClient,
			baseURL+UserServiceCreateGroupProcedure,
			connect.WithSchema(userServiceMethods.ByName("CreateGroup")),
			connect.WithClientOptions(opts...),
		),
		updateGroup: connect.NewClient[v2.UserServiceUpdateGroupRequest, v2.UserServiceUpdateGroupResponse](
			httpClient,
			baseURL+UserServiceUpdateGroupProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateGroup")),
			connect.WithClientOptions(opts...),
		),
		removeGroup: connect.NewClient[v2.UserServiceRemoveGroupRequest, v2.UserServiceRemoveGroupResponse](
			httpClient,
			baseURL+UserServiceRemoveGroupProcedure,
			connect.WithSchema(userServiceMethods.ByName("RemoveGroup")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getMe       *connect.Client[v2.UserServiceGetMeRequest, v2.UserServiceGetMeResponse]
	list        *connect.Client[v2.UserServiceListRequest, v2.UserServiceListResponse]
	get         *connect.Client[v2.UserServiceGetRequest, v2.UserServiceGetResponse]
	create      *connect.Client[v2.UserServiceCreateRequest, v2.UserServiceCreateResponse]
	update      *connect.Client[v2.UserServiceUpdateRequest, v2.UserServiceUpdateResponse]
	remove      *connect.Client[v2.UserServiceRemoveRequest, v2.UserServiceRemoveResponse]
	listGroup   *connect.Client[v2.UserServiceListGroupRequest, v2.UserServiceListGroupResponse]
	getGroup    *connect.Client[v2.UserServiceGetGroupRequest, v2.UserServiceGetGroupResponse]
	createGroup *connect.Client[v2.UserServiceCreateGroupRequest, v2.UserServiceCreateGroupResponse]
	updateGroup *connect.Client[v2.UserServiceUpdateGroupRequest, v2.UserServiceUpdateGroupResponse]
	removeGroup *connect.Client[v2.UserServiceRemoveGroupRequest, v2.UserServiceRemoveGroupResponse]
}

// GetMe calls aquarium.v2.UserService.GetMe.
func (c *userServiceClient) GetMe(ctx context.Context, req *connect.Request[v2.UserServiceGetMeRequest]) (*connect.Response[v2.UserServiceGetMeResponse], error) {
	return c.getMe.CallUnary(ctx, req)
}

// List calls aquarium.v2.UserService.List.
func (c *userServiceClient) List(ctx context.Context, req *connect.Request[v2.UserServiceListRequest]) (*connect.Response[v2.UserServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Get calls aquarium.v2.UserService.Get.
func (c *userServiceClient) Get(ctx context.Context, req *connect.Request[v2.UserServiceGetRequest]) (*connect.Response[v2.UserServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Create calls aquarium.v2.UserService.Create.
func (c *userServiceClient) Create(ctx context.Context, req *connect.Request[v2.UserServiceCreateRequest]) (*connect.Response[v2.UserServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls aquarium.v2.UserService.Update.
func (c *userServiceClient) Update(ctx context.Context, req *connect.Request[v2.UserServiceUpdateRequest]) (*connect.Response[v2.UserServiceUpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Remove calls aquarium.v2.UserService.Remove.
func (c *userServiceClient) Remove(ctx context.Context, req *connect.Request[v2.UserServiceRemoveRequest]) (*connect.Response[v2.UserServiceRemoveResponse], error) {
	return c.remove.CallUnary(ctx, req)
}

// ListGroup calls aquarium.v2.UserService.ListGroup.
func (c *userServiceClient) ListGroup(ctx context.Context, req *connect.Request[v2.UserServiceListGroupRequest]) (*connect.Response[v2.UserServiceListGroupResponse], error) {
	return c.listGroup.CallUnary(ctx, req)
}

// GetGroup calls aquarium.v2.UserService.GetGroup.
func (c *userServiceClient) GetGroup(ctx context.Context, req *connect.Request[v2.UserServiceGetGroupRequest]) (*connect.Response[v2.UserServiceGetGroupResponse], error) {
	return c.getGroup.CallUnary(ctx, req)
}

// CreateGroup calls aquarium.v2.UserService.CreateGroup.
func (c *userServiceClient) CreateGroup(ctx context.Context, req *connect.Request[v2.UserServiceCreateGroupRequest]) (*connect.Response[v2.UserServiceCreateGroupResponse], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// UpdateGroup calls aquarium.v2.UserService.UpdateGroup.
func (c *userServiceClient) UpdateGroup(ctx context.Context, req *connect.Request[v2.UserServiceUpdateGroupRequest]) (*connect.Response[v2.UserServiceUpdateGroupResponse], error) {
	return c.updateGroup.CallUnary(ctx, req)
}

// RemoveGroup calls aquarium.v2.UserService.RemoveGroup.
func (c *userServiceClient) RemoveGroup(ctx context.Context, req *connect.Request[v2.UserServiceRemoveGroupRequest]) (*connect.Response[v2.UserServiceRemoveGroupResponse], error) {
	return c.removeGroup.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the aquarium.v2.UserService service.
type UserServiceHandler interface {
	// Get current user information
	GetMe(context.Context, *connect.Request[v2.UserServiceGetMeRequest]) (*connect.Response[v2.UserServiceGetMeResponse], error)
	// Get list of users
	List(context.Context, *connect.Request[v2.UserServiceListRequest]) (*connect.Response[v2.UserServiceListResponse], error)
	// Get user by name
	Get(context.Context, *connect.Request[v2.UserServiceGetRequest]) (*connect.Response[v2.UserServiceGetResponse], error)
	// Create new user
	Create(context.Context, *connect.Request[v2.UserServiceCreateRequest]) (*connect.Response[v2.UserServiceCreateResponse], error)
	// Update existing user
	Update(context.Context, *connect.Request[v2.UserServiceUpdateRequest]) (*connect.Response[v2.UserServiceUpdateResponse], error)
	// Remove user
	Remove(context.Context, *connect.Request[v2.UserServiceRemoveRequest]) (*connect.Response[v2.UserServiceRemoveResponse], error)
	// Get list of user groups
	ListGroup(context.Context, *connect.Request[v2.UserServiceListGroupRequest]) (*connect.Response[v2.UserServiceListGroupResponse], error)
	// Get user group by name
	GetGroup(context.Context, *connect.Request[v2.UserServiceGetGroupRequest]) (*connect.Response[v2.UserServiceGetGroupResponse], error)
	// Create new user group
	CreateGroup(context.Context, *connect.Request[v2.UserServiceCreateGroupRequest]) (*connect.Response[v2.UserServiceCreateGroupResponse], error)
	// Update existing user group
	UpdateGroup(context.Context, *connect.Request[v2.UserServiceUpdateGroupRequest]) (*connect.Response[v2.UserServiceUpdateGroupResponse], error)
	// Remove user group
	RemoveGroup(context.Context, *connect.Request[v2.UserServiceRemoveGroupRequest]) (*connect.Response[v2.UserServiceRemoveGroupResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := v2.File_aquarium_v2_user_proto.Services().ByName("UserService").Methods()
	userServiceGetMeHandler := connect.NewUnaryHandler(
		UserServiceGetMeProcedure,
		svc.GetMe,
		connect.WithSchema(userServiceMethods.ByName("GetMe")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListHandler := connect.NewUnaryHandler(
		UserServiceListProcedure,
		svc.List,
		connect.WithSchema(userServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetHandler := connect.NewUnaryHandler(
		UserServiceGetProcedure,
		svc.Get,
		connect.WithSchema(userServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceCreateHandler := connect.NewUnaryHandler(
		UserServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(userServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateHandler := connect.NewUnaryHandler(
		UserServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(userServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRemoveHandler := connect.NewUnaryHandler(
		UserServiceRemoveProcedure,
		svc.Remove,
		connect.WithSchema(userServiceMethods.ByName("Remove")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListGroupHandler := connect.NewUnaryHandler(
		UserServiceListGroupProcedure,
		svc.ListGroup,
		connect.WithSchema(userServiceMethods.ByName("ListGroup")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetGroupHandler := connect.NewUnaryHandler(
		UserServiceGetGroupProcedure,
		svc.GetGroup,
		connect.WithSchema(userServiceMethods.ByName("GetGroup")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceCreateGroupHandler := connect.NewUnaryHandler(
		UserServiceCreateGroupProcedure,
		svc.CreateGroup,
		connect.WithSchema(userServiceMethods.ByName("CreateGroup")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateGroupHandler := connect.NewUnaryHandler(
		UserServiceUpdateGroupProcedure,
		svc.UpdateGroup,
		connect.WithSchema(userServiceMethods.ByName("UpdateGroup")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRemoveGroupHandler := connect.NewUnaryHandler(
		UserServiceRemoveGroupProcedure,
		svc.RemoveGroup,
		connect.WithSchema(userServiceMethods.ByName("RemoveGroup")),
		connect.WithHandlerOptions(opts...),
	)
	return "/aquarium.v2.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetMeProcedure:
			userServiceGetMeHandler.ServeHTTP(w, r)
		case UserServiceListProcedure:
			userServiceListHandler.ServeHTTP(w, r)
		case UserServiceGetProcedure:
			userServiceGetHandler.ServeHTTP(w, r)
		case UserServiceCreateProcedure:
			userServiceCreateHandler.ServeHTTP(w, r)
		case UserServiceUpdateProcedure:
			userServiceUpdateHandler.ServeHTTP(w, r)
		case UserServiceRemoveProcedure:
			userServiceRemoveHandler.ServeHTTP(w, r)
		case UserServiceListGroupProcedure:
			userServiceListGroupHandler.ServeHTTP(w, r)
		case UserServiceGetGroupProcedure:
			userServiceGetGroupHandler.ServeHTTP(w, r)
		case UserServiceCreateGroupProcedure:
			userServiceCreateGroupHandler.ServeHTTP(w, r)
		case UserServiceUpdateGroupProcedure:
			userServiceUpdateGroupHandler.ServeHTTP(w, r)
		case UserServiceRemoveGroupProcedure:
			userServiceRemoveGroupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetMe(context.Context, *connect.Request[v2.UserServiceGetMeRequest]) (*connect.Response[v2.UserServiceGetMeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.UserService.GetMe is not implemented"))
}

func (UnimplementedUserServiceHandler) List(context.Context, *connect.Request[v2.UserServiceListRequest]) (*connect.Response[v2.UserServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.UserService.List is not implemented"))
}

func (UnimplementedUserServiceHandler) Get(context.Context, *connect.Request[v2.UserServiceGetRequest]) (*connect.Response[v2.UserServiceGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.UserService.Get is not implemented"))
}

func (UnimplementedUserServiceHandler) Create(context.Context, *connect.Request[v2.UserServiceCreateRequest]) (*connect.Response[v2.UserServiceCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.UserService.Create is not implemented"))
}

func (UnimplementedUserServiceHandler) Update(context.Context, *connect.Request[v2.UserServiceUpdateRequest]) (*connect.Response[v2.UserServiceUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.UserService.Update is not implemented"))
}

func (UnimplementedUserServiceHandler) Remove(context.Context, *connect.Request[v2.UserServiceRemoveRequest]) (*connect.Response[v2.UserServiceRemoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.UserService.Remove is not implemented"))
}

func (UnimplementedUserServiceHandler) ListGroup(context.Context, *connect.Request[v2.UserServiceListGroupRequest]) (*connect.Response[v2.UserServiceListGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.UserService.ListGroup is not implemented"))
}

func (UnimplementedUserServiceHandler) GetGroup(context.Context, *connect.Request[v2.UserServiceGetGroupRequest]) (*connect.Response[v2.UserServiceGetGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.UserService.GetGroup is not implemented"))
}

func (UnimplementedUserServiceHandler) CreateGroup(context.Context, *connect.Request[v2.UserServiceCreateGroupRequest]) (*connect.Response[v2.UserServiceCreateGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.UserService.CreateGroup is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateGroup(context.Context, *connect.Request[v2.UserServiceUpdateGroupRequest]) (*connect.Response[v2.UserServiceUpdateGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.UserService.UpdateGroup is not implemented"))
}

func (UnimplementedUserServiceHandler) RemoveGroup(context.Context, *connect.Request[v2.UserServiceRemoveGroupRequest]) (*connect.Response[v2.UserServiceRemoveGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.UserService.RemoveGroup is not implemented"))
}
