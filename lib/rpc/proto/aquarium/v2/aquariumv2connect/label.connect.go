// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.
// Author: Sergei Parshev (@sparshev)

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: aquarium/v2/label.proto

package aquariumv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/adobe/aquarium-fish/lib/rpc/proto/aquarium/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LabelServiceName is the fully-qualified name of the LabelService service.
	LabelServiceName = "aquarium.v2.LabelService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LabelServiceListProcedure is the fully-qualified name of the LabelService's List RPC.
	LabelServiceListProcedure = "/aquarium.v2.LabelService/List"
	// LabelServiceGetProcedure is the fully-qualified name of the LabelService's Get RPC.
	LabelServiceGetProcedure = "/aquarium.v2.LabelService/Get"
	// LabelServiceCreateProcedure is the fully-qualified name of the LabelService's Create RPC.
	LabelServiceCreateProcedure = "/aquarium.v2.LabelService/Create"
	// LabelServiceUpdateProcedure is the fully-qualified name of the LabelService's Update RPC.
	LabelServiceUpdateProcedure = "/aquarium.v2.LabelService/Update"
	// LabelServiceRemoveProcedure is the fully-qualified name of the LabelService's Remove RPC.
	LabelServiceRemoveProcedure = "/aquarium.v2.LabelService/Remove"
)

// LabelServiceClient is a client for the aquarium.v2.LabelService service.
type LabelServiceClient interface {
	// Get list of labels
	List(context.Context, *connect.Request[v2.LabelServiceListRequest]) (*connect.Response[v2.LabelServiceListResponse], error)
	// Get label by UID
	Get(context.Context, *connect.Request[v2.LabelServiceGetRequest]) (*connect.Response[v2.LabelServiceGetResponse], error)
	// Create new label
	// Not only admin users can create labels, but also regular users can create temporary
	// editable labels.
	Create(context.Context, *connect.Request[v2.LabelServiceCreateRequest]) (*connect.Response[v2.LabelServiceCreateResponse], error)
	// Update existing label ONLY with version = 0
	Update(context.Context, *connect.Request[v2.LabelServiceUpdateRequest]) (*connect.Response[v2.LabelServiceUpdateResponse], error)
	// Remove label by UID
	Remove(context.Context, *connect.Request[v2.LabelServiceRemoveRequest]) (*connect.Response[v2.LabelServiceRemoveResponse], error)
}

// NewLabelServiceClient constructs a client for the aquarium.v2.LabelService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLabelServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LabelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	labelServiceMethods := v2.File_aquarium_v2_label_proto.Services().ByName("LabelService").Methods()
	return &labelServiceClient{
		list: connect.NewClient[v2.LabelServiceListRequest, v2.LabelServiceListResponse](
			httpClient,
			baseURL+LabelServiceListProcedure,
			connect.WithSchema(labelServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v2.LabelServiceGetRequest, v2.LabelServiceGetResponse](
			httpClient,
			baseURL+LabelServiceGetProcedure,
			connect.WithSchema(labelServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[v2.LabelServiceCreateRequest, v2.LabelServiceCreateResponse](
			httpClient,
			baseURL+LabelServiceCreateProcedure,
			connect.WithSchema(labelServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v2.LabelServiceUpdateRequest, v2.LabelServiceUpdateResponse](
			httpClient,
			baseURL+LabelServiceUpdateProcedure,
			connect.WithSchema(labelServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		remove: connect.NewClient[v2.LabelServiceRemoveRequest, v2.LabelServiceRemoveResponse](
			httpClient,
			baseURL+LabelServiceRemoveProcedure,
			connect.WithSchema(labelServiceMethods.ByName("Remove")),
			connect.WithClientOptions(opts...),
		),
	}
}

// labelServiceClient implements LabelServiceClient.
type labelServiceClient struct {
	list   *connect.Client[v2.LabelServiceListRequest, v2.LabelServiceListResponse]
	get    *connect.Client[v2.LabelServiceGetRequest, v2.LabelServiceGetResponse]
	create *connect.Client[v2.LabelServiceCreateRequest, v2.LabelServiceCreateResponse]
	update *connect.Client[v2.LabelServiceUpdateRequest, v2.LabelServiceUpdateResponse]
	remove *connect.Client[v2.LabelServiceRemoveRequest, v2.LabelServiceRemoveResponse]
}

// List calls aquarium.v2.LabelService.List.
func (c *labelServiceClient) List(ctx context.Context, req *connect.Request[v2.LabelServiceListRequest]) (*connect.Response[v2.LabelServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Get calls aquarium.v2.LabelService.Get.
func (c *labelServiceClient) Get(ctx context.Context, req *connect.Request[v2.LabelServiceGetRequest]) (*connect.Response[v2.LabelServiceGetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Create calls aquarium.v2.LabelService.Create.
func (c *labelServiceClient) Create(ctx context.Context, req *connect.Request[v2.LabelServiceCreateRequest]) (*connect.Response[v2.LabelServiceCreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls aquarium.v2.LabelService.Update.
func (c *labelServiceClient) Update(ctx context.Context, req *connect.Request[v2.LabelServiceUpdateRequest]) (*connect.Response[v2.LabelServiceUpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Remove calls aquarium.v2.LabelService.Remove.
func (c *labelServiceClient) Remove(ctx context.Context, req *connect.Request[v2.LabelServiceRemoveRequest]) (*connect.Response[v2.LabelServiceRemoveResponse], error) {
	return c.remove.CallUnary(ctx, req)
}

// LabelServiceHandler is an implementation of the aquarium.v2.LabelService service.
type LabelServiceHandler interface {
	// Get list of labels
	List(context.Context, *connect.Request[v2.LabelServiceListRequest]) (*connect.Response[v2.LabelServiceListResponse], error)
	// Get label by UID
	Get(context.Context, *connect.Request[v2.LabelServiceGetRequest]) (*connect.Response[v2.LabelServiceGetResponse], error)
	// Create new label
	// Not only admin users can create labels, but also regular users can create temporary
	// editable labels.
	Create(context.Context, *connect.Request[v2.LabelServiceCreateRequest]) (*connect.Response[v2.LabelServiceCreateResponse], error)
	// Update existing label ONLY with version = 0
	Update(context.Context, *connect.Request[v2.LabelServiceUpdateRequest]) (*connect.Response[v2.LabelServiceUpdateResponse], error)
	// Remove label by UID
	Remove(context.Context, *connect.Request[v2.LabelServiceRemoveRequest]) (*connect.Response[v2.LabelServiceRemoveResponse], error)
}

// NewLabelServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLabelServiceHandler(svc LabelServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	labelServiceMethods := v2.File_aquarium_v2_label_proto.Services().ByName("LabelService").Methods()
	labelServiceListHandler := connect.NewUnaryHandler(
		LabelServiceListProcedure,
		svc.List,
		connect.WithSchema(labelServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	labelServiceGetHandler := connect.NewUnaryHandler(
		LabelServiceGetProcedure,
		svc.Get,
		connect.WithSchema(labelServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	labelServiceCreateHandler := connect.NewUnaryHandler(
		LabelServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(labelServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	labelServiceUpdateHandler := connect.NewUnaryHandler(
		LabelServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(labelServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	labelServiceRemoveHandler := connect.NewUnaryHandler(
		LabelServiceRemoveProcedure,
		svc.Remove,
		connect.WithSchema(labelServiceMethods.ByName("Remove")),
		connect.WithHandlerOptions(opts...),
	)
	return "/aquarium.v2.LabelService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LabelServiceListProcedure:
			labelServiceListHandler.ServeHTTP(w, r)
		case LabelServiceGetProcedure:
			labelServiceGetHandler.ServeHTTP(w, r)
		case LabelServiceCreateProcedure:
			labelServiceCreateHandler.ServeHTTP(w, r)
		case LabelServiceUpdateProcedure:
			labelServiceUpdateHandler.ServeHTTP(w, r)
		case LabelServiceRemoveProcedure:
			labelServiceRemoveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLabelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLabelServiceHandler struct{}

func (UnimplementedLabelServiceHandler) List(context.Context, *connect.Request[v2.LabelServiceListRequest]) (*connect.Response[v2.LabelServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.LabelService.List is not implemented"))
}

func (UnimplementedLabelServiceHandler) Get(context.Context, *connect.Request[v2.LabelServiceGetRequest]) (*connect.Response[v2.LabelServiceGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.LabelService.Get is not implemented"))
}

func (UnimplementedLabelServiceHandler) Create(context.Context, *connect.Request[v2.LabelServiceCreateRequest]) (*connect.Response[v2.LabelServiceCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.LabelService.Create is not implemented"))
}

func (UnimplementedLabelServiceHandler) Update(context.Context, *connect.Request[v2.LabelServiceUpdateRequest]) (*connect.Response[v2.LabelServiceUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.LabelService.Update is not implemented"))
}

func (UnimplementedLabelServiceHandler) Remove(context.Context, *connect.Request[v2.LabelServiceRemoveRequest]) (*connect.Response[v2.LabelServiceRemoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.LabelService.Remove is not implemented"))
}
