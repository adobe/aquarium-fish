// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.
// Author: Sergei Parshev (@sparshev)

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: aquarium/v2/auth.proto

package aquariumv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/adobe/aquarium-fish/lib/rpc/proto/aquarium/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "aquarium.v2.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceLoginProcedure is the fully-qualified name of the AuthService's Login RPC.
	AuthServiceLoginProcedure = "/aquarium.v2.AuthService/Login"
	// AuthServiceRefreshTokenProcedure is the fully-qualified name of the AuthService's RefreshToken
	// RPC.
	AuthServiceRefreshTokenProcedure = "/aquarium.v2.AuthService/RefreshToken"
	// AuthServiceGetPermissionsProcedure is the fully-qualified name of the AuthService's
	// GetPermissions RPC.
	AuthServiceGetPermissionsProcedure = "/aquarium.v2.AuthService/GetPermissions"
	// AuthServiceValidateTokenProcedure is the fully-qualified name of the AuthService's ValidateToken
	// RPC.
	AuthServiceValidateTokenProcedure = "/aquarium.v2.AuthService/ValidateToken"
)

// AuthServiceClient is a client for the aquarium.v2.AuthService service.
type AuthServiceClient interface {
	// Login authenticates a user and returns a JWT token
	Login(context.Context, *connect.Request[v2.AuthServiceLoginRequest]) (*connect.Response[v2.AuthServiceLoginResponse], error)
	// RefreshToken refreshes an existing JWT token
	RefreshToken(context.Context, *connect.Request[v2.AuthServiceRefreshTokenRequest]) (*connect.Response[v2.AuthServiceRefreshTokenResponse], error)
	// GetPermissions returns the current user's permissions
	GetPermissions(context.Context, *connect.Request[v2.AuthServiceGetPermissionsRequest]) (*connect.Response[v2.AuthServiceGetPermissionsResponse], error)
	// ValidateToken validates a JWT token
	ValidateToken(context.Context, *connect.Request[v2.AuthServiceValidateTokenRequest]) (*connect.Response[v2.AuthServiceValidateTokenResponse], error)
}

// NewAuthServiceClient constructs a client for the aquarium.v2.AuthService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := v2.File_aquarium_v2_auth_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		login: connect.NewClient[v2.AuthServiceLoginRequest, v2.AuthServiceLoginResponse](
			httpClient,
			baseURL+AuthServiceLoginProcedure,
			connect.WithSchema(authServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v2.AuthServiceRefreshTokenRequest, v2.AuthServiceRefreshTokenResponse](
			httpClient,
			baseURL+AuthServiceRefreshTokenProcedure,
			connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		getPermissions: connect.NewClient[v2.AuthServiceGetPermissionsRequest, v2.AuthServiceGetPermissionsResponse](
			httpClient,
			baseURL+AuthServiceGetPermissionsProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetPermissions")),
			connect.WithClientOptions(opts...),
		),
		validateToken: connect.NewClient[v2.AuthServiceValidateTokenRequest, v2.AuthServiceValidateTokenResponse](
			httpClient,
			baseURL+AuthServiceValidateTokenProcedure,
			connect.WithSchema(authServiceMethods.ByName("ValidateToken")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	login          *connect.Client[v2.AuthServiceLoginRequest, v2.AuthServiceLoginResponse]
	refreshToken   *connect.Client[v2.AuthServiceRefreshTokenRequest, v2.AuthServiceRefreshTokenResponse]
	getPermissions *connect.Client[v2.AuthServiceGetPermissionsRequest, v2.AuthServiceGetPermissionsResponse]
	validateToken  *connect.Client[v2.AuthServiceValidateTokenRequest, v2.AuthServiceValidateTokenResponse]
}

// Login calls aquarium.v2.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect.Request[v2.AuthServiceLoginRequest]) (*connect.Response[v2.AuthServiceLoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// RefreshToken calls aquarium.v2.AuthService.RefreshToken.
func (c *authServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v2.AuthServiceRefreshTokenRequest]) (*connect.Response[v2.AuthServiceRefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// GetPermissions calls aquarium.v2.AuthService.GetPermissions.
func (c *authServiceClient) GetPermissions(ctx context.Context, req *connect.Request[v2.AuthServiceGetPermissionsRequest]) (*connect.Response[v2.AuthServiceGetPermissionsResponse], error) {
	return c.getPermissions.CallUnary(ctx, req)
}

// ValidateToken calls aquarium.v2.AuthService.ValidateToken.
func (c *authServiceClient) ValidateToken(ctx context.Context, req *connect.Request[v2.AuthServiceValidateTokenRequest]) (*connect.Response[v2.AuthServiceValidateTokenResponse], error) {
	return c.validateToken.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the aquarium.v2.AuthService service.
type AuthServiceHandler interface {
	// Login authenticates a user and returns a JWT token
	Login(context.Context, *connect.Request[v2.AuthServiceLoginRequest]) (*connect.Response[v2.AuthServiceLoginResponse], error)
	// RefreshToken refreshes an existing JWT token
	RefreshToken(context.Context, *connect.Request[v2.AuthServiceRefreshTokenRequest]) (*connect.Response[v2.AuthServiceRefreshTokenResponse], error)
	// GetPermissions returns the current user's permissions
	GetPermissions(context.Context, *connect.Request[v2.AuthServiceGetPermissionsRequest]) (*connect.Response[v2.AuthServiceGetPermissionsResponse], error)
	// ValidateToken validates a JWT token
	ValidateToken(context.Context, *connect.Request[v2.AuthServiceValidateTokenRequest]) (*connect.Response[v2.AuthServiceValidateTokenResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := v2.File_aquarium_v2_auth_proto.Services().ByName("AuthService").Methods()
	authServiceLoginHandler := connect.NewUnaryHandler(
		AuthServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRefreshTokenHandler := connect.NewUnaryHandler(
		AuthServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetPermissionsHandler := connect.NewUnaryHandler(
		AuthServiceGetPermissionsProcedure,
		svc.GetPermissions,
		connect.WithSchema(authServiceMethods.ByName("GetPermissions")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceValidateTokenHandler := connect.NewUnaryHandler(
		AuthServiceValidateTokenProcedure,
		svc.ValidateToken,
		connect.WithSchema(authServiceMethods.ByName("ValidateToken")),
		connect.WithHandlerOptions(opts...),
	)
	return "/aquarium.v2.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceLoginProcedure:
			authServiceLoginHandler.ServeHTTP(w, r)
		case AuthServiceRefreshTokenProcedure:
			authServiceRefreshTokenHandler.ServeHTTP(w, r)
		case AuthServiceGetPermissionsProcedure:
			authServiceGetPermissionsHandler.ServeHTTP(w, r)
		case AuthServiceValidateTokenProcedure:
			authServiceValidateTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect.Request[v2.AuthServiceLoginRequest]) (*connect.Response[v2.AuthServiceLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) RefreshToken(context.Context, *connect.Request[v2.AuthServiceRefreshTokenRequest]) (*connect.Response[v2.AuthServiceRefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.AuthService.RefreshToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetPermissions(context.Context, *connect.Request[v2.AuthServiceGetPermissionsRequest]) (*connect.Response[v2.AuthServiceGetPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.AuthService.GetPermissions is not implemented"))
}

func (UnimplementedAuthServiceHandler) ValidateToken(context.Context, *connect.Request[v2.AuthServiceValidateTokenRequest]) (*connect.Response[v2.AuthServiceValidateTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("aquarium.v2.AuthService.ValidateToken is not implemented"))
}
