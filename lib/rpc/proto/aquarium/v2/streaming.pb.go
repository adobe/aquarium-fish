// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.

// Author: Sergei Parshev (@sparshev)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: aquarium/v2/streaming.proto

package aquariumv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Subscription types for database objects
type SubscriptionType int32

const (
	SubscriptionType_SUBSCRIPTION_TYPE_UNSPECIFIED          SubscriptionType = 0
	SubscriptionType_SUBSCRIPTION_TYPE_APPLICATION          SubscriptionType = 1
	SubscriptionType_SUBSCRIPTION_TYPE_APPLICATION_STATE    SubscriptionType = 2
	SubscriptionType_SUBSCRIPTION_TYPE_APPLICATION_RESOURCE SubscriptionType = 3
	SubscriptionType_SUBSCRIPTION_TYPE_APPLICATION_TASK     SubscriptionType = 4
	SubscriptionType_SUBSCRIPTION_TYPE_LABEL                SubscriptionType = 5
	SubscriptionType_SUBSCRIPTION_TYPE_NODE                 SubscriptionType = 6
	SubscriptionType_SUBSCRIPTION_TYPE_USER                 SubscriptionType = 7
	SubscriptionType_SUBSCRIPTION_TYPE_ROLE                 SubscriptionType = 8
)

// Enum value maps for SubscriptionType.
var (
	SubscriptionType_name = map[int32]string{
		0: "SUBSCRIPTION_TYPE_UNSPECIFIED",
		1: "SUBSCRIPTION_TYPE_APPLICATION",
		2: "SUBSCRIPTION_TYPE_APPLICATION_STATE",
		3: "SUBSCRIPTION_TYPE_APPLICATION_RESOURCE",
		4: "SUBSCRIPTION_TYPE_APPLICATION_TASK",
		5: "SUBSCRIPTION_TYPE_LABEL",
		6: "SUBSCRIPTION_TYPE_NODE",
		7: "SUBSCRIPTION_TYPE_USER",
		8: "SUBSCRIPTION_TYPE_ROLE",
	}
	SubscriptionType_value = map[string]int32{
		"SUBSCRIPTION_TYPE_UNSPECIFIED":          0,
		"SUBSCRIPTION_TYPE_APPLICATION":          1,
		"SUBSCRIPTION_TYPE_APPLICATION_STATE":    2,
		"SUBSCRIPTION_TYPE_APPLICATION_RESOURCE": 3,
		"SUBSCRIPTION_TYPE_APPLICATION_TASK":     4,
		"SUBSCRIPTION_TYPE_LABEL":                5,
		"SUBSCRIPTION_TYPE_NODE":                 6,
		"SUBSCRIPTION_TYPE_USER":                 7,
		"SUBSCRIPTION_TYPE_ROLE":                 8,
	}
)

func (x SubscriptionType) Enum() *SubscriptionType {
	p := new(SubscriptionType)
	*p = x
	return p
}

func (x SubscriptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_aquarium_v2_streaming_proto_enumTypes[0].Descriptor()
}

func (SubscriptionType) Type() protoreflect.EnumType {
	return &file_aquarium_v2_streaming_proto_enumTypes[0]
}

func (x SubscriptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionType.Descriptor instead.
func (SubscriptionType) EnumDescriptor() ([]byte, []int) {
	return file_aquarium_v2_streaming_proto_rawDescGZIP(), []int{0}
}

// Types of database changes
type ChangeType int32

const (
	ChangeType_CHANGE_TYPE_UNSPECIFIED ChangeType = 0
	ChangeType_CHANGE_TYPE_CREATED     ChangeType = 1
	ChangeType_CHANGE_TYPE_UPDATED     ChangeType = 2
	ChangeType_CHANGE_TYPE_DELETED     ChangeType = 3
)

// Enum value maps for ChangeType.
var (
	ChangeType_name = map[int32]string{
		0: "CHANGE_TYPE_UNSPECIFIED",
		1: "CHANGE_TYPE_CREATED",
		2: "CHANGE_TYPE_UPDATED",
		3: "CHANGE_TYPE_DELETED",
	}
	ChangeType_value = map[string]int32{
		"CHANGE_TYPE_UNSPECIFIED": 0,
		"CHANGE_TYPE_CREATED":     1,
		"CHANGE_TYPE_UPDATED":     2,
		"CHANGE_TYPE_DELETED":     3,
	}
)

func (x ChangeType) Enum() *ChangeType {
	p := new(ChangeType)
	*p = x
	return p
}

func (x ChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_aquarium_v2_streaming_proto_enumTypes[1].Descriptor()
}

func (ChangeType) Type() protoreflect.EnumType {
	return &file_aquarium_v2_streaming_proto_enumTypes[1]
}

func (x ChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeType.Descriptor instead.
func (ChangeType) EnumDescriptor() ([]byte, []int) {
	return file_aquarium_v2_streaming_proto_rawDescGZIP(), []int{1}
}

// StreamingServiceConnectRequest represents a request sent through the bidirectional stream
type StreamingServiceConnectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique request ID for correlation
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Type of the request (e.g., "ApplicationServiceCreateRequest")
	RequestType string `protobuf:"bytes,2,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	// The actual request data
	RequestData   *anypb.Any `protobuf:"bytes,3,opt,name=request_data,json=requestData,proto3" json:"request_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamingServiceConnectRequest) Reset() {
	*x = StreamingServiceConnectRequest{}
	mi := &file_aquarium_v2_streaming_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingServiceConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingServiceConnectRequest) ProtoMessage() {}

func (x *StreamingServiceConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aquarium_v2_streaming_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingServiceConnectRequest.ProtoReflect.Descriptor instead.
func (*StreamingServiceConnectRequest) Descriptor() ([]byte, []int) {
	return file_aquarium_v2_streaming_proto_rawDescGZIP(), []int{0}
}

func (x *StreamingServiceConnectRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *StreamingServiceConnectRequest) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *StreamingServiceConnectRequest) GetRequestData() *anypb.Any {
	if x != nil {
		return x.RequestData
	}
	return nil
}

// StreamingServiceConnectResponse represents a response sent through the bidirectional stream
type StreamingServiceConnectResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Request ID this response corresponds to
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Type of the response (e.g., "ApplicationServiceCreateResponse")
	ResponseType string `protobuf:"bytes,2,opt,name=response_type,json=responseType,proto3" json:"response_type,omitempty"`
	// The actual response data
	ResponseData *anypb.Any `protobuf:"bytes,3,opt,name=response_data,json=responseData,proto3" json:"response_data,omitempty"`
	// Error information if the request failed
	Error         *StreamError `protobuf:"bytes,4,opt,name=error,proto3,oneof" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamingServiceConnectResponse) Reset() {
	*x = StreamingServiceConnectResponse{}
	mi := &file_aquarium_v2_streaming_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingServiceConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingServiceConnectResponse) ProtoMessage() {}

func (x *StreamingServiceConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aquarium_v2_streaming_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingServiceConnectResponse.ProtoReflect.Descriptor instead.
func (*StreamingServiceConnectResponse) Descriptor() ([]byte, []int) {
	return file_aquarium_v2_streaming_proto_rawDescGZIP(), []int{1}
}

func (x *StreamingServiceConnectResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *StreamingServiceConnectResponse) GetResponseType() string {
	if x != nil {
		return x.ResponseType
	}
	return ""
}

func (x *StreamingServiceConnectResponse) GetResponseData() *anypb.Any {
	if x != nil {
		return x.ResponseData
	}
	return nil
}

func (x *StreamingServiceConnectResponse) GetError() *StreamError {
	if x != nil {
		return x.Error
	}
	return nil
}

// StreamError represents an error in stream processing
type StreamError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error code (following Connect RPC codes)
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Human readable error message
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamError) Reset() {
	*x = StreamError{}
	mi := &file_aquarium_v2_streaming_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamError) ProtoMessage() {}

func (x *StreamError) ProtoReflect() protoreflect.Message {
	mi := &file_aquarium_v2_streaming_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamError.ProtoReflect.Descriptor instead.
func (*StreamError) Descriptor() ([]byte, []int) {
	return file_aquarium_v2_streaming_proto_rawDescGZIP(), []int{2}
}

func (x *StreamError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StreamError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// StreamingServiceSubscribeRequest defines what database objects to subscribe to
type StreamingServiceSubscribeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of object types to subscribe to
	SubscriptionTypes []SubscriptionType `protobuf:"varint,1,rep,packed,name=subscription_types,json=subscriptionTypes,proto3,enum=aquarium.v2.SubscriptionType" json:"subscription_types,omitempty"`
	// Optional filters for subscription (e.g., application_uid, owner_name)
	Filters       map[string]string `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamingServiceSubscribeRequest) Reset() {
	*x = StreamingServiceSubscribeRequest{}
	mi := &file_aquarium_v2_streaming_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingServiceSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingServiceSubscribeRequest) ProtoMessage() {}

func (x *StreamingServiceSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aquarium_v2_streaming_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingServiceSubscribeRequest.ProtoReflect.Descriptor instead.
func (*StreamingServiceSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_aquarium_v2_streaming_proto_rawDescGZIP(), []int{3}
}

func (x *StreamingServiceSubscribeRequest) GetSubscriptionTypes() []SubscriptionType {
	if x != nil {
		return x.SubscriptionTypes
	}
	return nil
}

func (x *StreamingServiceSubscribeRequest) GetFilters() map[string]string {
	if x != nil {
		return x.Filters
	}
	return nil
}

// StreamingServiceSubscribeResponse represents a database change notification
type StreamingServiceSubscribeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of the database object that changed
	ObjectType SubscriptionType `protobuf:"varint,1,opt,name=object_type,json=objectType,proto3,enum=aquarium.v2.SubscriptionType" json:"object_type,omitempty"`
	// Type of change (CREATED, UPDATED, DELETED)
	ChangeType ChangeType `protobuf:"varint,2,opt,name=change_type,json=changeType,proto3,enum=aquarium.v2.ChangeType" json:"change_type,omitempty"`
	// Timestamp when the change occurred
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The actual object data
	ObjectData    *anypb.Any `protobuf:"bytes,4,opt,name=object_data,json=objectData,proto3" json:"object_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamingServiceSubscribeResponse) Reset() {
	*x = StreamingServiceSubscribeResponse{}
	mi := &file_aquarium_v2_streaming_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingServiceSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingServiceSubscribeResponse) ProtoMessage() {}

func (x *StreamingServiceSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aquarium_v2_streaming_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingServiceSubscribeResponse.ProtoReflect.Descriptor instead.
func (*StreamingServiceSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_aquarium_v2_streaming_proto_rawDescGZIP(), []int{4}
}

func (x *StreamingServiceSubscribeResponse) GetObjectType() SubscriptionType {
	if x != nil {
		return x.ObjectType
	}
	return SubscriptionType_SUBSCRIPTION_TYPE_UNSPECIFIED
}

func (x *StreamingServiceSubscribeResponse) GetChangeType() ChangeType {
	if x != nil {
		return x.ChangeType
	}
	return ChangeType_CHANGE_TYPE_UNSPECIFIED
}

func (x *StreamingServiceSubscribeResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *StreamingServiceSubscribeResponse) GetObjectData() *anypb.Any {
	if x != nil {
		return x.ObjectData
	}
	return nil
}

var File_aquarium_v2_streaming_proto protoreflect.FileDescriptor

const file_aquarium_v2_streaming_proto_rawDesc = "" +
	"\n" +
	"\x1baquarium/v2/streaming.proto\x12\vaquarium.v2\x1a\x19google/protobuf/any.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x16aquarium/v2/rbac.proto\"\x9b\x01\n" +
	"\x1eStreamingServiceConnectRequest\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12!\n" +
	"\frequest_type\x18\x02 \x01(\tR\vrequestType\x127\n" +
	"\frequest_data\x18\x03 \x01(\v2\x14.google.protobuf.AnyR\vrequestData\"\xdf\x01\n" +
	"\x1fStreamingServiceConnectResponse\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12#\n" +
	"\rresponse_type\x18\x02 \x01(\tR\fresponseType\x129\n" +
	"\rresponse_data\x18\x03 \x01(\v2\x14.google.protobuf.AnyR\fresponseData\x123\n" +
	"\x05error\x18\x04 \x01(\v2\x18.aquarium.v2.StreamErrorH\x00R\x05error\x88\x01\x01B\b\n" +
	"\x06_error\";\n" +
	"\vStreamError\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\x82\x02\n" +
	" StreamingServiceSubscribeRequest\x12L\n" +
	"\x12subscription_types\x18\x01 \x03(\x0e2\x1d.aquarium.v2.SubscriptionTypeR\x11subscriptionTypes\x12T\n" +
	"\afilters\x18\x02 \x03(\v2:.aquarium.v2.StreamingServiceSubscribeRequest.FiltersEntryR\afilters\x1a:\n" +
	"\fFiltersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8e\x02\n" +
	"!StreamingServiceSubscribeResponse\x12>\n" +
	"\vobject_type\x18\x01 \x01(\x0e2\x1d.aquarium.v2.SubscriptionTypeR\n" +
	"objectType\x128\n" +
	"\vchange_type\x18\x02 \x01(\x0e2\x17.aquarium.v2.ChangeTypeR\n" +
	"changeType\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x125\n" +
	"\vobject_data\x18\x04 \x01(\v2\x14.google.protobuf.AnyR\n" +
	"objectData*\xc6\x02\n" +
	"\x10SubscriptionType\x12!\n" +
	"\x1dSUBSCRIPTION_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dSUBSCRIPTION_TYPE_APPLICATION\x10\x01\x12'\n" +
	"#SUBSCRIPTION_TYPE_APPLICATION_STATE\x10\x02\x12*\n" +
	"&SUBSCRIPTION_TYPE_APPLICATION_RESOURCE\x10\x03\x12&\n" +
	"\"SUBSCRIPTION_TYPE_APPLICATION_TASK\x10\x04\x12\x1b\n" +
	"\x17SUBSCRIPTION_TYPE_LABEL\x10\x05\x12\x1a\n" +
	"\x16SUBSCRIPTION_TYPE_NODE\x10\x06\x12\x1a\n" +
	"\x16SUBSCRIPTION_TYPE_USER\x10\a\x12\x1a\n" +
	"\x16SUBSCRIPTION_TYPE_ROLE\x10\b*t\n" +
	"\n" +
	"ChangeType\x12\x1b\n" +
	"\x17CHANGE_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13CHANGE_TYPE_CREATED\x10\x01\x12\x17\n" +
	"\x13CHANGE_TYPE_UPDATED\x10\x02\x12\x17\n" +
	"\x13CHANGE_TYPE_DELETED\x10\x032\x82\x02\n" +
	"\x10StreamingService\x12t\n" +
	"\aConnect\x12+.aquarium.v2.StreamingServiceConnectRequest\x1a,.aquarium.v2.StreamingServiceConnectResponse\"\n" +
	"\x82\xb5\x18\x06\x1a\x04User(\x010\x01\x12x\n" +
	"\tSubscribe\x12-.aquarium.v2.StreamingServiceSubscribeRequest\x1a..aquarium.v2.StreamingServiceSubscribeResponse\"\n" +
	"\x82\xb5\x18\x06\x1a\x04User0\x01BEZCgithub.com/adobe/aquarium-fish/lib/rpc/proto/aquarium/v2;aquariumv2b\x06proto3"

var (
	file_aquarium_v2_streaming_proto_rawDescOnce sync.Once
	file_aquarium_v2_streaming_proto_rawDescData []byte
)

func file_aquarium_v2_streaming_proto_rawDescGZIP() []byte {
	file_aquarium_v2_streaming_proto_rawDescOnce.Do(func() {
		file_aquarium_v2_streaming_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_aquarium_v2_streaming_proto_rawDesc), len(file_aquarium_v2_streaming_proto_rawDesc)))
	})
	return file_aquarium_v2_streaming_proto_rawDescData
}

var file_aquarium_v2_streaming_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_aquarium_v2_streaming_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_aquarium_v2_streaming_proto_goTypes = []any{
	(SubscriptionType)(0),                     // 0: aquarium.v2.SubscriptionType
	(ChangeType)(0),                           // 1: aquarium.v2.ChangeType
	(*StreamingServiceConnectRequest)(nil),    // 2: aquarium.v2.StreamingServiceConnectRequest
	(*StreamingServiceConnectResponse)(nil),   // 3: aquarium.v2.StreamingServiceConnectResponse
	(*StreamError)(nil),                       // 4: aquarium.v2.StreamError
	(*StreamingServiceSubscribeRequest)(nil),  // 5: aquarium.v2.StreamingServiceSubscribeRequest
	(*StreamingServiceSubscribeResponse)(nil), // 6: aquarium.v2.StreamingServiceSubscribeResponse
	nil,                           // 7: aquarium.v2.StreamingServiceSubscribeRequest.FiltersEntry
	(*anypb.Any)(nil),             // 8: google.protobuf.Any
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_aquarium_v2_streaming_proto_depIdxs = []int32{
	8,  // 0: aquarium.v2.StreamingServiceConnectRequest.request_data:type_name -> google.protobuf.Any
	8,  // 1: aquarium.v2.StreamingServiceConnectResponse.response_data:type_name -> google.protobuf.Any
	4,  // 2: aquarium.v2.StreamingServiceConnectResponse.error:type_name -> aquarium.v2.StreamError
	0,  // 3: aquarium.v2.StreamingServiceSubscribeRequest.subscription_types:type_name -> aquarium.v2.SubscriptionType
	7,  // 4: aquarium.v2.StreamingServiceSubscribeRequest.filters:type_name -> aquarium.v2.StreamingServiceSubscribeRequest.FiltersEntry
	0,  // 5: aquarium.v2.StreamingServiceSubscribeResponse.object_type:type_name -> aquarium.v2.SubscriptionType
	1,  // 6: aquarium.v2.StreamingServiceSubscribeResponse.change_type:type_name -> aquarium.v2.ChangeType
	9,  // 7: aquarium.v2.StreamingServiceSubscribeResponse.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 8: aquarium.v2.StreamingServiceSubscribeResponse.object_data:type_name -> google.protobuf.Any
	2,  // 9: aquarium.v2.StreamingService.Connect:input_type -> aquarium.v2.StreamingServiceConnectRequest
	5,  // 10: aquarium.v2.StreamingService.Subscribe:input_type -> aquarium.v2.StreamingServiceSubscribeRequest
	3,  // 11: aquarium.v2.StreamingService.Connect:output_type -> aquarium.v2.StreamingServiceConnectResponse
	6,  // 12: aquarium.v2.StreamingService.Subscribe:output_type -> aquarium.v2.StreamingServiceSubscribeResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_aquarium_v2_streaming_proto_init() }
func file_aquarium_v2_streaming_proto_init() {
	if File_aquarium_v2_streaming_proto != nil {
		return
	}
	file_aquarium_v2_rbac_proto_init()
	file_aquarium_v2_streaming_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_aquarium_v2_streaming_proto_rawDesc), len(file_aquarium_v2_streaming_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aquarium_v2_streaming_proto_goTypes,
		DependencyIndexes: file_aquarium_v2_streaming_proto_depIdxs,
		EnumInfos:         file_aquarium_v2_streaming_proto_enumTypes,
		MessageInfos:      file_aquarium_v2_streaming_proto_msgTypes,
	}.Build()
	File_aquarium_v2_streaming_proto = out.File
	file_aquarium_v2_streaming_proto_goTypes = nil
	file_aquarium_v2_streaming_proto_depIdxs = nil
}
