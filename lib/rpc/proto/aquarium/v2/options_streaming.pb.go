// Copyright 2025 Adobe. All rights reserved.
// This file is licensed to you under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License. You may obtain a copy
// of the License at http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
// OF ANY KIND, either express or implied. See the License for the specific language
// governing permissions and limitations under the License.

// Author: Sergei Parshev (@sparshev)

// Contains options for messages and services to alter streaming behavior
// Example:
// message ApplicationState {
//   option (subscribe_config) = {
//     permission_check: "ApplicationStateGetState"
//   };
//   // ... message fields
// }

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: aquarium/v2/options_streaming.proto

package aquariumv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StreamingConfig defines streaming configuration for a message
type SubscribeConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// RBAC permission method needed for access to this message (e.g., "ApplicationServiceGetState")
	// It will use "All" suffix to check if non-owned objects could be delivered
	PermissionCheck *string `protobuf:"bytes,1,opt,name=permission_check,json=permissionCheck,proto3,oneof" json:"permission_check,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SubscribeConfig) Reset() {
	*x = SubscribeConfig{}
	mi := &file_aquarium_v2_options_streaming_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeConfig) ProtoMessage() {}

func (x *SubscribeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aquarium_v2_options_streaming_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeConfig.ProtoReflect.Descriptor instead.
func (*SubscribeConfig) Descriptor() ([]byte, []int) {
	return file_aquarium_v2_options_streaming_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeConfig) GetPermissionCheck() string {
	if x != nil && x.PermissionCheck != nil {
		return *x.PermissionCheck
	}
	return ""
}

var file_aquarium_v2_options_streaming_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*SubscribeConfig)(nil),
		Field:         50001,
		Name:          "aquarium.v2.subscribe_config",
		Tag:           "bytes,50001,opt,name=subscribe_config",
		Filename:      "aquarium/v2/options_streaming.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50002,
		Name:          "aquarium.v2.skip_service_streaming",
		Tag:           "varint,50002,opt,name=skip_service_streaming",
		Filename:      "aquarium/v2/options_streaming.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// Streaming configuration for the message
	//
	// optional aquarium.v2.SubscribeConfig subscribe_config = 50001;
	E_SubscribeConfig = &file_aquarium_v2_options_streaming_proto_extTypes[0]
)

// Extension fields to descriptorpb.ServiceOptions.
var (
	// Streaming configuration for the service
	//
	// optional bool skip_service_streaming = 50002;
	E_SkipServiceStreaming = &file_aquarium_v2_options_streaming_proto_extTypes[1]
)

var File_aquarium_v2_options_streaming_proto protoreflect.FileDescriptor

const file_aquarium_v2_options_streaming_proto_rawDesc = "" +
	"\n" +
	"#aquarium/v2/options_streaming.proto\x12\vaquarium.v2\x1a google/protobuf/descriptor.proto\"V\n" +
	"\x0fSubscribeConfig\x12.\n" +
	"\x10permission_check\x18\x01 \x01(\tH\x00R\x0fpermissionCheck\x88\x01\x01B\x13\n" +
	"\x11_permission_check:m\n" +
	"\x10subscribe_config\x12\x1f.google.protobuf.MessageOptions\x18ц\x03 \x01(\v2\x1c.aquarium.v2.SubscribeConfigR\x0fsubscribeConfig\x88\x01\x01:Z\n" +
	"\x16skip_service_streaming\x12\x1f.google.protobuf.ServiceOptions\x18҆\x03 \x01(\bR\x14skipServiceStreaming\x88\x01\x01BEZCgithub.com/adobe/aquarium-fish/lib/rpc/proto/aquarium/v2;aquariumv2b\x06proto3"

var (
	file_aquarium_v2_options_streaming_proto_rawDescOnce sync.Once
	file_aquarium_v2_options_streaming_proto_rawDescData []byte
)

func file_aquarium_v2_options_streaming_proto_rawDescGZIP() []byte {
	file_aquarium_v2_options_streaming_proto_rawDescOnce.Do(func() {
		file_aquarium_v2_options_streaming_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_aquarium_v2_options_streaming_proto_rawDesc), len(file_aquarium_v2_options_streaming_proto_rawDesc)))
	})
	return file_aquarium_v2_options_streaming_proto_rawDescData
}

var file_aquarium_v2_options_streaming_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_aquarium_v2_options_streaming_proto_goTypes = []any{
	(*SubscribeConfig)(nil),             // 0: aquarium.v2.SubscribeConfig
	(*descriptorpb.MessageOptions)(nil), // 1: google.protobuf.MessageOptions
	(*descriptorpb.ServiceOptions)(nil), // 2: google.protobuf.ServiceOptions
}
var file_aquarium_v2_options_streaming_proto_depIdxs = []int32{
	1, // 0: aquarium.v2.subscribe_config:extendee -> google.protobuf.MessageOptions
	2, // 1: aquarium.v2.skip_service_streaming:extendee -> google.protobuf.ServiceOptions
	0, // 2: aquarium.v2.subscribe_config:type_name -> aquarium.v2.SubscribeConfig
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	2, // [2:3] is the sub-list for extension type_name
	0, // [0:2] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_aquarium_v2_options_streaming_proto_init() }
func file_aquarium_v2_options_streaming_proto_init() {
	if File_aquarium_v2_options_streaming_proto != nil {
		return
	}
	file_aquarium_v2_options_streaming_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_aquarium_v2_options_streaming_proto_rawDesc), len(file_aquarium_v2_options_streaming_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_aquarium_v2_options_streaming_proto_goTypes,
		DependencyIndexes: file_aquarium_v2_options_streaming_proto_depIdxs,
		MessageInfos:      file_aquarium_v2_options_streaming_proto_msgTypes,
		ExtensionInfos:    file_aquarium_v2_options_streaming_proto_extTypes,
	}.Build()
	File_aquarium_v2_options_streaming_proto = out.File
	file_aquarium_v2_options_streaming_proto_goTypes = nil
	file_aquarium_v2_options_streaming_proto_depIdxs = nil
}
