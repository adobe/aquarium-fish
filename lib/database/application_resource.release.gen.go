//go:build !debug

/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by trace-gen-functions tool. DO NOT EDIT.

package database

import (
	"context"

	typesv2 "github.com/adobe/aquarium-fish/lib/types/aquarium/v2"
)

func (d *Database) ApplicationResourceList(ctx context.Context) ([]typesv2.ApplicationResource, error) {
	return d.applicationResourceListImpl(ctx)
}

func (d *Database) ApplicationResourceListNode(ctx context.Context, nodeUID typesv2.NodeUID) ([]typesv2.ApplicationResource, error) {
	return d.applicationResourceListNodeImpl(ctx, nodeUID)
}

func (d *Database) ApplicationResourceCreate(ctx context.Context, r *typesv2.ApplicationResource) error {
	return d.applicationResourceCreateImpl(ctx, r)
}

func (d *Database) ApplicationResourceDelete(ctx context.Context, uid typesv2.ApplicationResourceUID) error {
	return d.applicationResourceDeleteImpl(ctx, uid)
}

func (d *Database) ApplicationResourceSave(ctx context.Context, res *typesv2.ApplicationResource) error {
	return d.applicationResourceSaveImpl(ctx, res)
}

func (d *Database) ApplicationResourceGet(ctx context.Context, uid typesv2.ApplicationResourceUID) (*typesv2.ApplicationResource, error) {
	return d.applicationResourceGetImpl(ctx, uid)
}

func (d *Database) ApplicationResourceGetByIP(ctx context.Context, ip string) (*typesv2.ApplicationResource, error) {
	return d.applicationResourceGetByIPImpl(ctx, ip)
}

func (d *Database) ApplicationResourceGetByApplication(ctx context.Context, appUID typesv2.ApplicationUID) (*typesv2.ApplicationResource, error) {
	return d.applicationResourceGetByApplicationImpl(ctx, appUID)
}

func (d *Database) SubscribeApplicationResource(ctx context.Context, ch chan ApplicationResourceSubscriptionEvent) {
	d.subscribeApplicationResourceImpl(ctx, ch)
}

func (d *Database) UnsubscribeApplicationResource(ctx context.Context, ch chan ApplicationResourceSubscriptionEvent) {
	d.unsubscribeApplicationResourceImpl(ctx, ch)
}
