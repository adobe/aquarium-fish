//go:build debug

/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by trace-gen-functions tool. DO NOT EDIT.

package database

import (
	"context"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"

	typesv2 "github.com/adobe/aquarium-fish/lib/types/aquarium/v2"
)

var debugTracerDatabaseRole = otel.Tracer("aquarium-fish/database")

func (d *Database) SubscribeRole(ctx context.Context, ch chan RoleSubscriptionEvent) {
	ctx, span := debugTracerDatabaseRole.Start(ctx, "database.Database.SubscribeRole")
	defer span.End()

	d.subscribeRoleImpl(ctx, ch)

}

func (d *Database) UnsubscribeRole(ctx context.Context, ch chan RoleSubscriptionEvent) {
	ctx, span := debugTracerDatabaseRole.Start(ctx, "database.Database.UnsubscribeRole")
	defer span.End()

	d.unsubscribeRoleImpl(ctx, ch)

}

func (d *Database) RoleList(ctx context.Context) ([]typesv2.Role, error) {
	ctx, span := debugTracerDatabaseRole.Start(ctx, "database.Database.RoleList")
	defer span.End()

	rs, err1 := d.roleListImpl(ctx)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return rs, err1

}

func (d *Database) RoleGet(ctx context.Context, name string) (*typesv2.Role, error) {
	ctx, span := debugTracerDatabaseRole.Start(ctx, "database.Database.RoleGet")
	defer span.End()

	r, err1 := d.roleGetImpl(ctx, name)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return r, err1

}

func (d *Database) RoleCreate(ctx context.Context, r *typesv2.Role) error {
	ctx, span := debugTracerDatabaseRole.Start(ctx, "database.Database.RoleCreate")
	defer span.End()

	err0 := d.roleCreateImpl(ctx, r)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) RoleSave(ctx context.Context, r *typesv2.Role) error {
	ctx, span := debugTracerDatabaseRole.Start(ctx, "database.Database.RoleSave")
	defer span.End()

	err0 := d.roleSaveImpl(ctx, r)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) RoleDelete(ctx context.Context, name string) error {
	ctx, span := debugTracerDatabaseRole.Start(ctx, "database.Database.RoleDelete")
	defer span.End()

	err0 := d.roleDeleteImpl(ctx, name)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}
