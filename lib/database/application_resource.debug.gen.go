//go:build debug

/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by trace-gen-functions tool. DO NOT EDIT.

package database

import (
	"context"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"

	typesv2 "github.com/adobe/aquarium-fish/lib/types/aquarium/v2"
)

var debugTracerDatabaseApplication_resource = otel.Tracer("aquarium-fish/database")

func (d *Database) ApplicationResourceList(ctx context.Context) ([]typesv2.ApplicationResource, error) {
	ctx, span := debugTracerDatabaseApplication_resource.Start(ctx, "database.Database.applicationResourceListImpl")
	defer span.End()

	rs, err1 := d.applicationResourceListImpl(ctx)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return rs, err1

}

func (d *Database) ApplicationResourceListNode(ctx context.Context, nodeUID typesv2.NodeUID) ([]typesv2.ApplicationResource, error) {
	ctx, span := debugTracerDatabaseApplication_resource.Start(ctx, "database.Database.applicationResourceListNodeImpl")
	defer span.End()

	rs, err1 := d.applicationResourceListNodeImpl(ctx, nodeUID)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return rs, err1

}

func (d *Database) ApplicationResourceCreate(ctx context.Context, r *typesv2.ApplicationResource) error {
	ctx, span := debugTracerDatabaseApplication_resource.Start(ctx, "database.Database.applicationResourceCreateImpl")
	defer span.End()

	err0 := d.applicationResourceCreateImpl(ctx, r)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) ApplicationResourceDelete(ctx context.Context, uid typesv2.ApplicationResourceUID) error {
	ctx, span := debugTracerDatabaseApplication_resource.Start(ctx, "database.Database.applicationResourceDeleteImpl")
	defer span.End()

	err0 := d.applicationResourceDeleteImpl(ctx, uid)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) ApplicationResourceSave(ctx context.Context, res *typesv2.ApplicationResource) error {
	ctx, span := debugTracerDatabaseApplication_resource.Start(ctx, "database.Database.applicationResourceSaveImpl")
	defer span.End()

	err0 := d.applicationResourceSaveImpl(ctx, res)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) ApplicationResourceGet(ctx context.Context, uid typesv2.ApplicationResourceUID) (*typesv2.ApplicationResource, error) {
	ctx, span := debugTracerDatabaseApplication_resource.Start(ctx, "database.Database.applicationResourceGetImpl")
	defer span.End()

	res, err1 := d.applicationResourceGetImpl(ctx, uid)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return res, err1

}

func (d *Database) ApplicationResourceGetByIP(ctx context.Context, ip string) (*typesv2.ApplicationResource, error) {
	ctx, span := debugTracerDatabaseApplication_resource.Start(ctx, "database.Database.applicationResourceGetByIPImpl")
	defer span.End()

	res, err1 := d.applicationResourceGetByIPImpl(ctx, ip)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return res, err1

}

func (d *Database) ApplicationResourceGetByApplication(ctx context.Context, appUID typesv2.ApplicationUID) (*typesv2.ApplicationResource, error) {
	ctx, span := debugTracerDatabaseApplication_resource.Start(ctx, "database.Database.applicationResourceGetByApplicationImpl")
	defer span.End()

	res, err1 := d.applicationResourceGetByApplicationImpl(ctx, appUID)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return res, err1

}

func (d *Database) SubscribeApplicationResource(ctx context.Context, ch chan ApplicationResourceSubscriptionEvent) {
	ctx, span := debugTracerDatabaseApplication_resource.Start(ctx, "database.Database.subscribeApplicationResourceImpl")
	defer span.End()

	d.subscribeApplicationResourceImpl(ctx, ch)

}

func (d *Database) UnsubscribeApplicationResource(ctx context.Context, ch chan ApplicationResourceSubscriptionEvent) {
	ctx, span := debugTracerDatabaseApplication_resource.Start(ctx, "database.Database.unsubscribeApplicationResourceImpl")
	defer span.End()

	d.unsubscribeApplicationResourceImpl(ctx, ch)

}
