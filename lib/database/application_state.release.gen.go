//go:build !debug

/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by trace-gen-functions tool. DO NOT EDIT.

package database

import (
	"context"

	typesv2 "github.com/adobe/aquarium-fish/lib/types/aquarium/v2"
)

func (d *Database) SubscribeApplicationState(ctx context.Context, ch chan ApplicationStateSubscriptionEvent) {
	d.subscribeApplicationStateImpl(ctx, ch)
}

func (d *Database) UnsubscribeApplicationState(ctx context.Context, ch chan ApplicationStateSubscriptionEvent) {
	d.unsubscribeApplicationStateImpl(ctx, ch)
}

func (d *Database) ApplicationStateList(ctx context.Context) ([]typesv2.ApplicationState, error) {
	return d.applicationStateListImpl(ctx)
}

func (d *Database) ApplicationStateCreate(ctx context.Context, as *typesv2.ApplicationState) error {
	return d.applicationStateCreateImpl(ctx, as)
}

func (d *Database) ApplicationStateGet(ctx context.Context, uid typesv2.ApplicationStateUID) (*typesv2.ApplicationState, error) {
	return d.applicationStateGetImpl(ctx, uid)
}

func (d *Database) ApplicationStateDelete(ctx context.Context, uid typesv2.ApplicationStateUID) error {
	return d.applicationStateDeleteImpl(ctx, uid)
}

func (d *Database) ApplicationStateListByApplication(ctx context.Context, appUID typesv2.ApplicationUID) ([]typesv2.ApplicationState, error) {
	return d.applicationStateListByApplicationImpl(ctx, appUID)
}

func (d *Database) ApplicationStateNewCount(ctx context.Context, appUID typesv2.ApplicationUID) uint {
	return d.applicationStateNewCountImpl(ctx, appUID)
}

func (d *Database) ApplicationStateListLatest(ctx context.Context) ([]typesv2.ApplicationState, error) {
	return d.applicationStateListLatestImpl(ctx)
}

func (d *Database) ApplicationStateListNewElected(ctx context.Context) ([]typesv2.ApplicationState, error) {
	return d.applicationStateListNewElectedImpl(ctx)
}

func (d *Database) ApplicationStateGetByApplication(ctx context.Context, appUID typesv2.ApplicationUID) (*typesv2.ApplicationState, error) {
	return d.applicationStateGetByApplicationImpl(ctx, appUID)
}
