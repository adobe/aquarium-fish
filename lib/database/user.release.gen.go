//go:build !debug

/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by trace-gen-functions tool. DO NOT EDIT.

package database

import (
	"context"

	typesv2 "github.com/adobe/aquarium-fish/lib/types/aquarium/v2"
)

func (d *Database) SubscribeUser(ctx context.Context, ch chan UserSubscriptionEvent) {
	d.subscribeUserImpl(ctx, ch)
}

func (d *Database) UnsubscribeUser(ctx context.Context, ch chan UserSubscriptionEvent) {
	d.unsubscribeUserImpl(ctx, ch)
}

func (d *Database) SubscribeUserGroup(ctx context.Context, ch chan UserGroupSubscriptionEvent) {
	d.subscribeUserGroupImpl(ctx, ch)
}

func (d *Database) UnsubscribeUserGroup(ctx context.Context, ch chan UserGroupSubscriptionEvent) {
	d.unsubscribeUserGroupImpl(ctx, ch)
}

func (d *Database) UserList(ctx context.Context) ([]typesv2.User, error) {
	return d.userListImpl(ctx)
}

func (d *Database) UserCreate(ctx context.Context, u *typesv2.User) error {
	return d.userCreateImpl(ctx, u)
}

func (d *Database) UserSave(ctx context.Context, u *typesv2.User) error {
	return d.userSaveImpl(ctx, u)
}

func (d *Database) UserGet(ctx context.Context, name string) (*typesv2.User, error) {
	return d.userGetImpl(ctx, name)
}

func (d *Database) UserDelete(ctx context.Context, name string) error {
	return d.userDeleteImpl(ctx, name)
}

func (d *Database) UserAuth(ctx context.Context, name string, password string) *typesv2.User {
	return d.userAuthImpl(ctx, name, password)
}

func (d *Database) UserNew(ctx context.Context, name string, password string) (string, *typesv2.User, error) {
	return d.userNewImpl(ctx, name, password)
}

func (d *Database) UserGroupList(ctx context.Context) ([]typesv2.UserGroup, error) {
	return d.userGroupListImpl(ctx)
}

func (d *Database) UserGroupCreate(ctx context.Context, g *typesv2.UserGroup) error {
	return d.userGroupCreateImpl(ctx, g)
}

func (d *Database) UserGroupSave(ctx context.Context, g *typesv2.UserGroup) error {
	return d.userGroupSaveImpl(ctx, g)
}

func (d *Database) UserGroupGet(ctx context.Context, name string) (*typesv2.UserGroup, error) {
	return d.userGroupGetImpl(ctx, name)
}

func (d *Database) UserGroupDelete(ctx context.Context, name string) error {
	return d.userGroupDeleteImpl(ctx, name)
}

func (d *Database) UserGroupListByUser(ctx context.Context, userName string) ([]*typesv2.UserGroup, error) {
	return d.userGroupListByUserImpl(ctx, userName)
}

func (d *Database) MergeUserConfigWithGroups(ctx context.Context, user *typesv2.User, groups []*typesv2.UserGroup) *typesv2.UserConfig {
	return d.mergeUserConfigWithGroupsImpl(ctx, user, groups)
}

func (d *Database) EnrichUserWithGroupConfig(ctx context.Context, user *typesv2.User) {
	d.enrichUserWithGroupConfigImpl(ctx, user)
}
