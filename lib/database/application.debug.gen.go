//go:build debug

/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by trace-gen-functions tool. DO NOT EDIT.

package database

import (
	"context"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"

	typesv2 "github.com/adobe/aquarium-fish/lib/types/aquarium/v2"
)

var debugTracerDatabaseApplication = otel.Tracer("aquarium-fish/database")

func (d *Database) ApplicationList(ctx context.Context) ([]typesv2.Application, error) {
	ctx, span := debugTracerDatabaseApplication.Start(ctx, "database.Database.applicationListImpl")
	defer span.End()

	as, err1 := d.applicationListImpl(ctx)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return as, err1

}

func (d *Database) ApplicationCreate(ctx context.Context, a *typesv2.Application) error {
	ctx, span := debugTracerDatabaseApplication.Start(ctx, "database.Database.applicationCreateImpl")
	defer span.End()

	err0 := d.applicationCreateImpl(ctx, a)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) ApplicationGet(ctx context.Context, uid typesv2.ApplicationUID) (*typesv2.Application, error) {
	ctx, span := debugTracerDatabaseApplication.Start(ctx, "database.Database.applicationGetImpl")
	defer span.End()

	a, err1 := d.applicationGetImpl(ctx, uid)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return a, err1

}

func (d *Database) ApplicationDelete(ctx context.Context, uid typesv2.ApplicationUID) error {
	ctx, span := debugTracerDatabaseApplication.Start(ctx, "database.Database.applicationDeleteImpl")
	defer span.End()

	err0 := d.applicationDeleteImpl(ctx, uid)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) ApplicationIsAllocated(ctx context.Context, appUID typesv2.ApplicationUID) error {
	ctx, span := debugTracerDatabaseApplication.Start(ctx, "database.Database.applicationIsAllocatedImpl")
	defer span.End()

	err0 := d.applicationIsAllocatedImpl(ctx, appUID)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) ApplicationDeallocate(ctx context.Context, appUID typesv2.ApplicationUID, requestor string) (*typesv2.ApplicationState, error) {
	ctx, span := debugTracerDatabaseApplication.Start(ctx, "database.Database.applicationDeallocateImpl")
	defer span.End()

	r0, err1 := d.applicationDeallocateImpl(ctx, appUID, requestor)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return r0, err1

}
