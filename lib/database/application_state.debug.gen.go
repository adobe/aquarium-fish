//go:build debug

/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by trace-gen-functions tool. DO NOT EDIT.

package database

import (
	"context"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"

	typesv2 "github.com/adobe/aquarium-fish/lib/types/aquarium/v2"
)

var debugTracerDatabaseApplication_state = otel.Tracer("aquarium-fish/database")

func (d *Database) SubscribeApplicationState(ctx context.Context, ch chan *typesv2.ApplicationState) {
	ctx, span := debugTracerDatabaseApplication_state.Start(ctx, "database.Database.subscribeApplicationStateImpl")
	defer span.End()

	d.subscribeApplicationStateImpl(ctx, ch)

}

func (d *Database) UnsubscribeApplicationState(ctx context.Context, ch chan *typesv2.ApplicationState) {
	ctx, span := debugTracerDatabaseApplication_state.Start(ctx, "database.Database.unsubscribeApplicationStateImpl")
	defer span.End()

	d.unsubscribeApplicationStateImpl(ctx, ch)

}

func (d *Database) ApplicationStateList(ctx context.Context) ([]typesv2.ApplicationState, error) {
	ctx, span := debugTracerDatabaseApplication_state.Start(ctx, "database.Database.applicationStateListImpl")
	defer span.End()

	ass, err1 := d.applicationStateListImpl(ctx)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return ass, err1

}

func (d *Database) ApplicationStateCreate(ctx context.Context, as *typesv2.ApplicationState) error {
	ctx, span := debugTracerDatabaseApplication_state.Start(ctx, "database.Database.applicationStateCreateImpl")
	defer span.End()

	err0 := d.applicationStateCreateImpl(ctx, as)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) ApplicationStateGet(ctx context.Context, uid typesv2.ApplicationStateUID) (*typesv2.ApplicationState, error) {
	ctx, span := debugTracerDatabaseApplication_state.Start(ctx, "database.Database.applicationStateGetImpl")
	defer span.End()

	as, err1 := d.applicationStateGetImpl(ctx, uid)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return as, err1

}

func (d *Database) ApplicationStateDelete(ctx context.Context, uid typesv2.ApplicationStateUID) error {
	ctx, span := debugTracerDatabaseApplication_state.Start(ctx, "database.Database.applicationStateDeleteImpl")
	defer span.End()

	err0 := d.applicationStateDeleteImpl(ctx, uid)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) ApplicationStateListByApplication(ctx context.Context, appUID typesv2.ApplicationUID) ([]typesv2.ApplicationState, error) {
	ctx, span := debugTracerDatabaseApplication_state.Start(ctx, "database.Database.applicationStateListByApplicationImpl")
	defer span.End()

	states, err1 := d.applicationStateListByApplicationImpl(ctx, appUID)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return states, err1

}

func (d *Database) ApplicationStateNewCount(ctx context.Context, appUID typesv2.ApplicationUID) uint {
	ctx, span := debugTracerDatabaseApplication_state.Start(ctx, "database.Database.applicationStateNewCountImpl")
	defer span.End()

	count := d.applicationStateNewCountImpl(ctx, appUID)

	return count

}

func (d *Database) ApplicationStateListLatest(ctx context.Context) ([]typesv2.ApplicationState, error) {
	ctx, span := debugTracerDatabaseApplication_state.Start(ctx, "database.Database.applicationStateListLatestImpl")
	defer span.End()

	out, err1 := d.applicationStateListLatestImpl(ctx)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return out, err1

}

func (d *Database) ApplicationStateListNewElected(ctx context.Context) ([]typesv2.ApplicationState, error) {
	ctx, span := debugTracerDatabaseApplication_state.Start(ctx, "database.Database.applicationStateListNewElectedImpl")
	defer span.End()

	ass, err1 := d.applicationStateListNewElectedImpl(ctx)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return ass, err1

}

func (d *Database) ApplicationStateGetByApplication(ctx context.Context, appUID typesv2.ApplicationUID) (*typesv2.ApplicationState, error) {
	ctx, span := debugTracerDatabaseApplication_state.Start(ctx, "database.Database.applicationStateGetByApplicationImpl")
	defer span.End()

	state, err1 := d.applicationStateGetByApplicationImpl(ctx, appUID)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return state, err1

}
