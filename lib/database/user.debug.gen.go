//go:build debug

/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by trace-gen-functions tool. DO NOT EDIT.

package database

import (
	"context"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"

	typesv2 "github.com/adobe/aquarium-fish/lib/types/aquarium/v2"
)

var debugTracerDatabaseUser = otel.Tracer("aquarium-fish/database")

func (d *Database) SubscribeUser(ctx context.Context, ch chan UserSubscriptionEvent) {
	ctx, span := debugTracerDatabaseUser.Start(ctx, "database.Database.subscribeUserImpl")
	defer span.End()

	d.subscribeUserImpl(ctx, ch)

}

func (d *Database) UnsubscribeUser(ctx context.Context, ch chan UserSubscriptionEvent) {
	ctx, span := debugTracerDatabaseUser.Start(ctx, "database.Database.unsubscribeUserImpl")
	defer span.End()

	d.unsubscribeUserImpl(ctx, ch)

}

func (d *Database) UserList(ctx context.Context) ([]typesv2.User, error) {
	ctx, span := debugTracerDatabaseUser.Start(ctx, "database.Database.userListImpl")
	defer span.End()

	us, err1 := d.userListImpl(ctx)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return us, err1

}

func (d *Database) UserCreate(ctx context.Context, u *typesv2.User) error {
	ctx, span := debugTracerDatabaseUser.Start(ctx, "database.Database.userCreateImpl")
	defer span.End()

	err0 := d.userCreateImpl(ctx, u)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) UserSave(ctx context.Context, u *typesv2.User) error {
	ctx, span := debugTracerDatabaseUser.Start(ctx, "database.Database.userSaveImpl")
	defer span.End()

	err0 := d.userSaveImpl(ctx, u)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) UserGet(ctx context.Context, name string) (*typesv2.User, error) {
	ctx, span := debugTracerDatabaseUser.Start(ctx, "database.Database.userGetImpl")
	defer span.End()

	u, err1 := d.userGetImpl(ctx, name)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return u, err1

}

func (d *Database) UserDelete(ctx context.Context, name string) error {
	ctx, span := debugTracerDatabaseUser.Start(ctx, "database.Database.userDeleteImpl")
	defer span.End()

	err0 := d.userDeleteImpl(ctx, name)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) UserAuth(ctx context.Context, name string, password string) *typesv2.User {
	ctx, span := debugTracerDatabaseUser.Start(ctx, "database.Database.userAuthImpl")
	defer span.End()

	r0 := d.userAuthImpl(ctx, name, password)

	return r0

}

func (d *Database) UserNew(ctx context.Context, name string, password string) (string, *typesv2.User, error) {
	ctx, span := debugTracerDatabaseUser.Start(ctx, "database.Database.userNewImpl")
	defer span.End()

	r0, r1, err2 := d.userNewImpl(ctx, name, password)

	if err2 != nil {
		span.RecordError(err2)
		span.SetStatus(codes.Error, err2.Error())
	}

	return r0, r1, err2

}
