//go:build debug

/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by trace-gen-functions tool. DO NOT EDIT.

package database

import (
	"context"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"

	typesv2 "github.com/adobe/aquarium-fish/lib/types/aquarium/v2"
)

var debugTracerDatabaseLabel = otel.Tracer("aquarium-fish/database")

func (d *Database) SubscribeLabel(ctx context.Context, ch chan LabelSubscriptionEvent) {
	ctx, span := debugTracerDatabaseLabel.Start(ctx, "database.Database.subscribeLabelImpl")
	defer span.End()

	d.subscribeLabelImpl(ctx, ch)

}

func (d *Database) UnsubscribeLabel(ctx context.Context, ch chan LabelSubscriptionEvent) {
	ctx, span := debugTracerDatabaseLabel.Start(ctx, "database.Database.unsubscribeLabelImpl")
	defer span.End()

	d.unsubscribeLabelImpl(ctx, ch)

}

func (d *Database) LabelList(ctx context.Context, filters LabelListParams) ([]typesv2.Label, error) {
	ctx, span := debugTracerDatabaseLabel.Start(ctx, "database.Database.labelListImpl")
	defer span.End()

	labels, err1 := d.labelListImpl(ctx, filters)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return labels, err1

}

func (d *Database) LabelCreate(ctx context.Context, l *typesv2.Label) error {
	ctx, span := debugTracerDatabaseLabel.Start(ctx, "database.Database.labelCreateImpl")
	defer span.End()

	err0 := d.labelCreateImpl(ctx, l)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) LabelGet(ctx context.Context, uid typesv2.LabelUID) (*typesv2.Label, error) {
	ctx, span := debugTracerDatabaseLabel.Start(ctx, "database.Database.labelGetImpl")
	defer span.End()

	label, err1 := d.labelGetImpl(ctx, uid)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return label, err1

}

func (d *Database) LabelDelete(ctx context.Context, uid typesv2.LabelUID) error {
	ctx, span := debugTracerDatabaseLabel.Start(ctx, "database.Database.labelDeleteImpl")
	defer span.End()

	err0 := d.labelDeleteImpl(ctx, uid)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}
