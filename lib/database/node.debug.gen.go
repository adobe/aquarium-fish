//go:build debug

/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by trace-gen-functions tool. DO NOT EDIT.

package database

import (
	"context"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/codes"

	typesv2 "github.com/adobe/aquarium-fish/lib/types/aquarium/v2"
)

var debugTracerDatabaseNode = otel.Tracer("aquarium-fish/database")

func (d *Database) SubscribeNode(ctx context.Context, ch chan NodeSubscriptionEvent) {
	ctx, span := debugTracerDatabaseNode.Start(ctx, "database.Database.SubscribeNode")
	defer span.End()

	d.subscribeNodeImpl(ctx, ch)

}

func (d *Database) UnsubscribeNode(ctx context.Context, ch chan NodeSubscriptionEvent) {
	ctx, span := debugTracerDatabaseNode.Start(ctx, "database.Database.UnsubscribeNode")
	defer span.End()

	d.unsubscribeNodeImpl(ctx, ch)

}

func (d *Database) NodeList(ctx context.Context) ([]typesv2.Node, error) {
	ctx, span := debugTracerDatabaseNode.Start(ctx, "database.Database.NodeList")
	defer span.End()

	ns, err1 := d.nodeListImpl(ctx)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return ns, err1

}

func (d *Database) NodeGet(ctx context.Context, name string) (*typesv2.Node, error) {
	ctx, span := debugTracerDatabaseNode.Start(ctx, "database.Database.NodeGet")
	defer span.End()

	node, err1 := d.nodeGetImpl(ctx, name)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return node, err1

}

func (d *Database) NodeActiveList(ctx context.Context) ([]typesv2.Node, error) {
	ctx, span := debugTracerDatabaseNode.Start(ctx, "database.Database.NodeActiveList")
	defer span.End()

	ns, err1 := d.nodeActiveListImpl(ctx)

	if err1 != nil {
		span.RecordError(err1)
		span.SetStatus(codes.Error, err1.Error())
	}

	return ns, err1

}

func (d *Database) NodeCreate(ctx context.Context, n *typesv2.Node) error {
	ctx, span := debugTracerDatabaseNode.Start(ctx, "database.Database.NodeCreate")
	defer span.End()

	err0 := d.nodeCreateImpl(ctx, n)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) NodeSave(ctx context.Context, node *typesv2.Node) error {
	ctx, span := debugTracerDatabaseNode.Start(ctx, "database.Database.NodeSave")
	defer span.End()

	err0 := d.nodeSaveImpl(ctx, node)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}

func (d *Database) NodePing(ctx context.Context) error {
	ctx, span := debugTracerDatabaseNode.Start(ctx, "database.Database.NodePing")
	defer span.End()

	err0 := d.nodePingImpl(ctx)

	if err0 != nil {
		span.RecordError(err0)
		span.SetStatus(codes.Error, err0.Error())
	}

	return err0

}
