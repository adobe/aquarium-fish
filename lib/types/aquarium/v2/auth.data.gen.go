/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by Aquarium buf-gen-pb-data. DO NOT EDIT.

package aquariumv2

import (
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"

	pbTypes "github.com/adobe/aquarium-fish/lib/rpc/proto/aquarium/v2"
)

// JWTToken is a data for JWTToken without internal locks
type JWTToken struct {
	ExpiresAt        time.Time `json:"expires_at,omitempty"`
	RefreshExpiresAt time.Time `json:"refresh_expires_at,omitempty"`
	RefreshToken     string    `json:"refresh_token,omitempty"`
	Token            string    `json:"token,omitempty"`
}

// FromJWTToken creates a JWTToken from JWTToken
func FromJWTToken(src *pbTypes.JWTToken) JWTToken {
	if src == nil {
		return JWTToken{}
	}

	result := JWTToken{}
	if src.GetExpiresAt() != nil {
		result.ExpiresAt = src.GetExpiresAt().AsTime()
	}
	if src.GetRefreshExpiresAt() != nil {
		result.RefreshExpiresAt = src.GetRefreshExpiresAt().AsTime()
	}
	result.RefreshToken = src.GetRefreshToken()
	result.Token = src.GetToken()
	return result
}

// ToJWTToken converts JWTToken to JWTToken
func (j JWTToken) ToJWTToken() *pbTypes.JWTToken {
	result := &pbTypes.JWTToken{}

	result.ExpiresAt = timestamppb.New(j.ExpiresAt)
	result.RefreshExpiresAt = timestamppb.New(j.RefreshExpiresAt)
	result.RefreshToken = j.RefreshToken
	result.Token = j.Token
	return result
}

// UserPermission is a data for UserPermission without internal locks
type UserPermission struct {
	Action      string `json:"action,omitempty"`
	Description string `json:"description,omitempty"`
	Resource    string `json:"resource,omitempty"`
}

// FromUserPermission creates a UserPermission from UserPermission
func FromUserPermission(src *pbTypes.UserPermission) UserPermission {
	if src == nil {
		return UserPermission{}
	}

	result := UserPermission{}
	result.Action = src.GetAction()
	result.Description = src.GetDescription()
	result.Resource = src.GetResource()
	return result
}

// ToUserPermission converts UserPermission to UserPermission
func (u UserPermission) ToUserPermission() *pbTypes.UserPermission {
	result := &pbTypes.UserPermission{}

	result.Action = u.Action
	result.Description = u.Description
	result.Resource = u.Resource
	return result
}

// UserSession is a data for UserSession without internal locks
type UserSession struct {
	CreatedAt   time.Time        `json:"created_at,omitempty"`
	LastUsed    time.Time        `json:"last_used,omitempty"`
	Permissions []UserPermission `json:"permissions,omitempty"`
	Roles       []string         `json:"roles,omitempty"`
	UserName    string           `json:"user_name,omitempty"`
}

// FromUserSession creates a UserSession from UserSession
func FromUserSession(src *pbTypes.UserSession) UserSession {
	if src == nil {
		return UserSession{}
	}

	result := UserSession{}
	if src.GetCreatedAt() != nil {
		result.CreatedAt = src.GetCreatedAt().AsTime()
	}
	if src.GetLastUsed() != nil {
		result.LastUsed = src.GetLastUsed().AsTime()
	}
	for _, item := range src.GetPermissions() {
		if item != nil {
			result.Permissions = append(result.Permissions, FromUserPermission(item))
		}
	}
	result.Roles = src.GetRoles()
	result.UserName = src.GetUserName()
	return result
}

// ToUserSession converts UserSession to UserSession
func (u UserSession) ToUserSession() *pbTypes.UserSession {
	result := &pbTypes.UserSession{}

	result.CreatedAt = timestamppb.New(u.CreatedAt)
	result.LastUsed = timestamppb.New(u.LastUsed)
	for _, item := range u.Permissions {
		result.Permissions = append(result.Permissions, item.ToUserPermission())
	}
	result.Roles = u.Roles
	result.UserName = u.UserName
	return result
}
