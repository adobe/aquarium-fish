/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by Aquarium buf-gen-pb-data. DO NOT EDIT.

package aquariumv2

import (
	"time"

	"github.com/google/uuid"

	"google.golang.org/protobuf/types/known/timestamppb"

	pbTypes "github.com/adobe/aquarium-fish/lib/rpc/proto/aquarium/v2"
)

type GateProxySSHAccessUID = uuid.UUID

// GateProxySSHAccess is a data for GateProxySSHAccess without internal locks
type GateProxySSHAccess struct {
	Address                string    `json:"address,omitempty"`
	ApplicationResourceUid uuid.UUID `json:"application_resource_uid,omitempty"`
	CreatedAt              time.Time `json:"created_at,omitempty"`
	Key                    string    `json:"key,omitempty"`
	Password               string    `json:"password,omitempty"`
	Static                 bool      `json:"static,omitempty"`
	Uid                    uuid.UUID `json:"uid,omitempty"`
	Username               string    `json:"username,omitempty"`
}

// FromGateProxySSHAccess creates a GateProxySSHAccess from GateProxySSHAccess
func FromGateProxySSHAccess(src *pbTypes.GateProxySSHAccess) GateProxySSHAccess {
	if src == nil {
		return GateProxySSHAccess{}
	}

	result := GateProxySSHAccess{}
	result.Address = src.GetAddress()
	if uid, err := uuid.Parse(src.GetApplicationResourceUid()); err == nil {
		result.ApplicationResourceUid = uid
	}
	if src.GetCreatedAt() != nil {
		result.CreatedAt = src.GetCreatedAt().AsTime()
	}
	result.Key = src.GetKey()
	result.Password = src.GetPassword()
	result.Static = src.GetStatic()
	if uid, err := uuid.Parse(src.GetUid()); err == nil {
		result.Uid = uid
	}
	result.Username = src.GetUsername()
	return result
}

// ToGateProxySSHAccess converts GateProxySSHAccess to GateProxySSHAccess
func (g GateProxySSHAccess) ToGateProxySSHAccess() *pbTypes.GateProxySSHAccess {
	result := &pbTypes.GateProxySSHAccess{}

	result.Address = g.Address
	result.ApplicationResourceUid = g.ApplicationResourceUid.String()
	result.CreatedAt = timestamppb.New(g.CreatedAt)
	result.Key = g.Key
	result.Password = g.Password
	result.Static = g.Static
	result.Uid = g.Uid.String()
	result.Username = g.Username
	return result
}
