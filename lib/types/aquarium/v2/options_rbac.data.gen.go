/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by Aquarium buf-gen-pb-data. DO NOT EDIT.

package aquariumv2

import (
	pbTypes "github.com/adobe/aquarium-fish/lib/rpc/proto/aquarium/v2"
)

// RoleBasedAccessControl is a data for RoleBasedAccessControl without internal locks
type RoleBasedAccessControl struct {
	AdditionalActions    []string `json:"additional_actions,omitempty"`
	AllowUnauthenticated *bool    `json:"allow_unauthenticated,omitempty"`
	AllowedRoles         []string `json:"allowed_roles,omitempty"`
	NoPermissionNeeded   *bool    `json:"no_permission_needed,omitempty"`
}

// FromRoleBasedAccessControl creates a RoleBasedAccessControl from RoleBasedAccessControl
func FromRoleBasedAccessControl(src *pbTypes.RoleBasedAccessControl) RoleBasedAccessControl {
	if src == nil {
		return RoleBasedAccessControl{}
	}

	result := RoleBasedAccessControl{}
	result.AdditionalActions = src.GetAdditionalActions()
	if src.AllowUnauthenticated != nil {
		val := src.GetAllowUnauthenticated()
		result.AllowUnauthenticated = &val
	}
	result.AllowedRoles = src.GetAllowedRoles()
	if src.NoPermissionNeeded != nil {
		val := src.GetNoPermissionNeeded()
		result.NoPermissionNeeded = &val
	}
	return result
}

// ToRoleBasedAccessControl converts RoleBasedAccessControl to RoleBasedAccessControl
func (r RoleBasedAccessControl) ToRoleBasedAccessControl() *pbTypes.RoleBasedAccessControl {
	result := &pbTypes.RoleBasedAccessControl{}

	result.AdditionalActions = r.AdditionalActions
	if r.AllowUnauthenticated != nil {
		result.AllowUnauthenticated = r.AllowUnauthenticated
	}
	result.AllowedRoles = r.AllowedRoles
	if r.NoPermissionNeeded != nil {
		result.NoPermissionNeeded = r.NoPermissionNeeded
	}
	return result
}
