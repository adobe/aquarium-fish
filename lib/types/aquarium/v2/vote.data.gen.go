/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by Aquarium buf-gen-pb-data. DO NOT EDIT.

package aquariumv2

import (
	"time"

	"github.com/google/uuid"

	"google.golang.org/protobuf/types/known/timestamppb"

	pbTypes "github.com/adobe/aquarium-fish/lib/rpc/proto/aquarium/v2"
)

type VoteUID = uuid.UUID

// Vote is a data for Vote without internal locks
type Vote struct {
	ApplicationUid uuid.UUID `json:"application_uid,omitempty"`
	Available      int32     `json:"available,omitempty"`
	CreatedAt      time.Time `json:"created_at,omitempty"`
	NodeUid        uuid.UUID `json:"node_uid,omitempty"`
	Rand           uint32    `json:"rand,omitempty"`
	Round          uint32    `json:"round,omitempty"`
	RuleResult     uint32    `json:"rule_result,omitempty"`
	Uid            uuid.UUID `json:"uid,omitempty"`
}

// FromVote creates a Vote from Vote
func FromVote(src *pbTypes.Vote) Vote {
	if src == nil {
		return Vote{}
	}

	result := Vote{}
	if uid, err := uuid.Parse(src.GetApplicationUid()); err == nil {
		result.ApplicationUid = uid
	}
	result.Available = src.GetAvailable()
	if src.GetCreatedAt() != nil {
		result.CreatedAt = src.GetCreatedAt().AsTime()
	}
	if uid, err := uuid.Parse(src.GetNodeUid()); err == nil {
		result.NodeUid = uid
	}
	result.Rand = src.GetRand()
	result.Round = src.GetRound()
	result.RuleResult = src.GetRuleResult()
	if uid, err := uuid.Parse(src.GetUid()); err == nil {
		result.Uid = uid
	}
	return result
}

// ToVote converts Vote to Vote
func (v Vote) ToVote() *pbTypes.Vote {
	result := &pbTypes.Vote{}

	result.ApplicationUid = v.ApplicationUid.String()
	result.Available = v.Available
	result.CreatedAt = timestamppb.New(v.CreatedAt)
	result.NodeUid = v.NodeUid.String()
	result.Rand = v.Rand
	result.Round = v.Round
	result.RuleResult = v.RuleResult
	result.Uid = v.Uid.String()
	return result
}
