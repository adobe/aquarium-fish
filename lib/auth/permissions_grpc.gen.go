/**
 * Copyright 2025 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

// Code generated by Aquarium buf-gen-permissions. DO NOT EDIT.

package auth

// Service and Method constants
const (
	// ApplicationService service constants
	ApplicationService               = "ApplicationService"
	ApplicationServiceCreate         = "Create"
	ApplicationServiceCreateTask     = "CreateTask"
	ApplicationServiceCreateTaskAll  = "CreateTaskAll"
	ApplicationServiceDeallocate     = "Deallocate"
	ApplicationServiceDeallocateAll  = "DeallocateAll"
	ApplicationServiceGet            = "Get"
	ApplicationServiceGetAll         = "GetAll"
	ApplicationServiceGetResource    = "GetResource"
	ApplicationServiceGetResourceAll = "GetResourceAll"
	ApplicationServiceGetState       = "GetState"
	ApplicationServiceGetStateAll    = "GetStateAll"
	ApplicationServiceGetTask        = "GetTask"
	ApplicationServiceGetTaskAll     = "GetTaskAll"
	ApplicationServiceList           = "List"
	ApplicationServiceListAll        = "ListAll"
	ApplicationServiceListTask       = "ListTask"
	ApplicationServiceListTaskAll    = "ListTaskAll"

	// AuthService service constants
	AuthService               = "AuthService"
	AuthServiceLogin          = "Login"
	AuthServiceGetPermissions = "GetPermissions"
	AuthServiceRefreshToken   = "RefreshToken"
	AuthServiceValidateToken  = "ValidateToken"

	// GateProxySSHService service constants
	GateProxySSHService                     = "GateProxySSHService"
	GateProxySSHServiceGetResourceAccess    = "GetResourceAccess"
	GateProxySSHServiceGetResourceAccessAll = "GetResourceAccessAll"

	// LabelService service constants
	LabelService       = "LabelService"
	LabelServiceCreate = "Create"
	LabelServiceDelete = "Delete"
	LabelServiceGet    = "Get"
	LabelServiceList   = "List"

	// NodeService service constants
	NodeService               = "NodeService"
	NodeServiceGetThis        = "GetThis"
	NodeServiceList           = "List"
	NodeServiceSetMaintenance = "SetMaintenance"

	// RoleService service constants
	RoleService       = "RoleService"
	RoleServiceCreate = "Create"
	RoleServiceDelete = "Delete"
	RoleServiceGet    = "Get"
	RoleServiceList   = "List"
	RoleServiceUpdate = "Update"

	// StreamingService service constants
	StreamingService          = "StreamingService"
	StreamingServiceConnect   = "Connect"
	StreamingServiceSubscribe = "Subscribe"

	// UserService service constants
	UserService               = "UserService"
	UserServiceGetMe          = "GetMe"
	UserServiceCreate         = "Create"
	UserServiceDelete         = "Delete"
	UserServiceGet            = "Get"
	UserServiceList           = "List"
	UserServiceUpdate         = "Update"
	UserServiceUpdateAll      = "UpdateAll"
	UserServiceUpdatePassword = "UpdatePassword"
	UserServiceUpdateRoles    = "UpdateRoles"
)

// Auth-excluded service-methods
var authExcluded = map[string][]string{
	"AuthService": {
		"Login",
	},
}

// IsEcludedFromAuth helps connectrpc to exclude methods from Auth validation
func IsEcludedFromAuth(service, method string) bool {
	if methods, ok := authExcluded[service]; ok {
		for _, m := range methods {
			if m == method {
				return true
			}
		}
	}
	return false
}

// RBAC-excluded service-methods
var rbacExcluded = map[string][]string{
	"AuthService": {
		"Login",
		"GetPermissions",
		"RefreshToken",
		"ValidateToken",
	},

	"UserService": {
		"GetMe",
	},
}

// IsEcludedFromRBAC helps connectrpc to exclude methods from RBAC validation
func IsEcludedFromRBAC(service, method string) bool {
	if methods, ok := rbacExcluded[service]; ok {
		for _, m := range methods {
			if m == method {
				return true
			}
		}
	}
	return false
}
