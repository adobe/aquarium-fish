// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
