// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4/X/BgAA//9HaumxMqUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
