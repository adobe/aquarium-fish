// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"f+/5zs7udnL56fJ/AwAA//9fEEA2V6sAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
