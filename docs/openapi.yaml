---
# Aquarium Fish OpenAPI specification
# Use editor: https://editor.swagger.io/
openapi: 3.0.0

servers:
  - url: https://0.0.0.0:8001/
    description: Main API available for the Users and Meta API for the ApplicationResources

info:
  description: API of the Fish node/cluster
  version: 1.0.0
  title: Aquarium Fish
  contact:
    name: Sergei Parshev
    url: 'https://github.com/adobe/aquarium-fish'
  license:
    name: Apache 2.0

externalDocs:
  url: 'https://github.com/adobe/aquarium-fish/wiki/Aquarium'

paths:
  /api/v1/user/:
    get:
      summary: Get list of Users
      description: Returns a list of existing Users
      operationId: UserListGet
      tags:
        - User
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basic_auth: []
    post:
      summary: Create or update User
      description: Creates or updates & return the User, it will generate password if not provided
      operationId: UserCreateUpdatePost
      tags:
        - User
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAPIPassword'
          application/yaml:
            schema:
              $ref: '#/components/schemas/UserAPIPassword'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAPIPassword'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basic_auth: []

  /api/v1/user/me/:
    get:
      summary: Get the current User
      description: Returns the current logged in User information
      operationId: UserMeGet
      tags:
        - User
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
      security:
        - basic_auth: []

  /api/v1/user/{name}:
    get:
      summary: Get User by name
      description: Returns a single User by it's name
      operationId: UserGet
      tags:
        - User
      parameters:
        - name: name
          in: path
          description: Name of the User
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
      security:
        - basic_auth: []
    delete:
      summary: Delete the User by name
      description: Will remove the User with specified name
      operationId: UserDelete
      tags:
        - User
      parameters:
        - name: name
          in: path
          description: Name of the User
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Only admin can do that
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
      security:
        - basic_auth: []

  /api/v1/label/:
    get:
      summary: Get list of Labels
      description: Returns a list of existing Labels
      operationId: LabelListGet
      tags:
        - Label
      parameters:
        - name: filter  # Deprecated: keeping it for backward-compatibility till the release
          in: query
          description: DEPRECATED, supports only name='<value>' and version=<version> request
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: Filter the list by name of the label
          required: false
          schema:
            type: string
        - name: version
          in: query
          description: Filter the list by version of the label, "last" will return only latest versions of labels
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basic_auth: []
    post:
      summary: Create new Label
      description: Creates & return the created Label
      operationId: LabelCreatePost
      tags:
        - Label
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Label'
          application/yaml:
            schema:
              $ref: '#/components/schemas/Label'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basic_auth: []

  /api/v1/label/{uid}:
    get:
      summary: Get Label by UID
      description: Returns a single Label by it's UID
      operationId: LabelGet
      tags:
        - Label
      parameters:
        - name: uid
          in: path
          description: UID of the Label
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Label not found
      security:
        - basic_auth: []
    delete:
      summary: Delete Label by UID
      description: Deletes the Label by it's UID
      operationId: LabelDelete
      tags:
        - Label
      parameters:
        - name: uid
          in: path
          description: UID of the Label
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Label not found
      security:
        - basic_auth: []

  /api/v1/applicationresource/{uid}/access:
    get:
      summary: Get SSH access credentials by ApplicationResource UID
      description: Display any known SSH access information for the ApplicationResource
      operationId: ApplicationResourceAccessPut
      tags:
        - ApplicationResourceAccess
      parameters:
        - name: uid
          in: path
          description: UID of the object
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResourceAccess'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: ApplicationResource not found
      security:
        - basic_auth: []

  /api/v1/application/:
    get:
      summary: Get list of Applications
      description: Returns a list of existing Applications
      operationId: ApplicationListGet
      tags:
        - Application
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basic_auth: []
    post:
      summary: Create new Application
      description: Creates & return the created Application
      operationId: ApplicationCreatePost
      tags:
        - Application
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
          application/yaml:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basic_auth: []

  /api/v1/application/{uid}:
    get:
      summary: Get Application by UID
      description: Returns a single Application by it's UID
      operationId: ApplicationGet
      tags:
        - Application
      parameters:
        - name: uid
          in: path
          description: UID of the object
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Application not found
      security:
        - basic_auth: []

  /api/v1/application/{uid}/state:
    get:
      summary: Get ApplicationState of the Application
      description: Returns the current ApplicationState by Application UID
      operationId: ApplicationStateGet
      tags:
        - Application
      parameters:
        - name: uid
          in: path
          description: UID of the Application
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationState'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Application not found
      security:
        - basic_auth: []

  /api/v1/application/{uid}/resource:
    get:
      summary: Get ApplicationResource by Application UID
      description: Returns a ApplicationResource by it's Application UID
      operationId: ApplicationResourceGet
      tags:
        - Application
      parameters:
        - name: uid
          in: path
          description: UID of the Application
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResource'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: ApplicationResource not found
      security:
        - basic_auth: []

  /api/v1/application/{uid}/task/:
    get:
      summary: Get list of the ApplicationTasks
      description: Returns the list of the Application tasks
      operationId: ApplicationTaskListGet
      tags:
        - Application
      parameters:
        - name: uid
          in: path
          description: UID of the Application
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationTask'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Application not found
      security:
        - basic_auth: []
    post:
      summary: Create new ApplicationTask
      description: Creates the ApplicationTask for Application
      operationId: ApplicationTaskCreatePost
      tags:
        - Application
      parameters:
        - name: uid
          in: path
          description: UID of the Application
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationTask'
          application/yaml:
            schema:
              $ref: '#/components/schemas/ApplicationTask'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationTask'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basic_auth: []

  /api/v1/task/{task_uid}:
    get:
      summary: Get ApplicationTask data
      description: Returns the Application Task
      operationId: ApplicationTaskGet
      tags:
        - Application
      parameters:
        - name: task_uid
          in: path
          description: UID of the Task
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationTask'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: ApplicationTask not found
      security:
        - basic_auth: []

  /api/v1/application/{uid}/deallocate:
    get:
      summary: Triggers Application deallocate
      description: Moves the Application to the DEALLOCATE state
      operationId: ApplicationDeallocateGet
      tags:
        - Application
      parameters:
        - name: uid
          in: path
          description: UID of the Application
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad parameter or conditions
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Application not found
      security:
        - basic_auth: []

  /api/v1/vote/:
    get:
      summary: Get list of Votes
      description: Returns a list of existing Votes
      operationId: VoteListGet
      tags:
        - Vote
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vote'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basic_auth: []

  /api/v1/node/:
    get:
      summary: Get list of Nodes
      description: Returns a list of existing Nodes
      operationId: NodeListGet
      tags:
        - Node
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basic_auth: []

  /api/v1/node/this/:
    get:
      summary: Get this Node info
      description: Returns the requested Node
      operationId: NodeThisGet
      tags:
        - Node
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basic_auth: []

  /api/v1/node/this/maintenance:
    get:
      summary: Triggers this Node maintenance mode
      description:
        In maintenance mode the node still a part of the cluster, but not taking any new App to
        execute. If the Node have some workloads executing - it will wait in maintenance mode until
        they will be completed.
      operationId: NodeThisMaintenanceGet
      tags:
        - Node
      parameters:
        - name: enable
          in: query
          description: Enable or disable maintenance mode
          required: false
          schema:
            type: boolean
            default: true
        - name: shutdown
          in: query
          description: |
            Safely stops the Node. It will wait in maintenance mode until all the Applicaions are
            done and then exit. If Node deployed as a service - then will be restarted immediately,
            otherwise will just stop. Could be cancelled by stop=false.
          required: false
          schema:
            type: boolean
        - name: shutdown_delay
          in: query
          description: How much Node should wait in maintenance mode before exit (ex. "1h10m30s")
          required: false
          schema:
            type: string
            format: duration
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad parameter or conditions
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basic_auth: []

  # This /profiling/ endpoint is separate from the /profiling/{handler} because `required: false`
  # did not behaved as expected. Since it is not, /profiling/ will route to a separate method that
  # just calls the /profiling/{handler} endpoint with the empty string
  /api/v1/node/this/profiling/:
    get:
      summary: Shows pprof index page
      description:
        Shows debug information about heap, goroutines, symbols etc. Very helpful in figuring out
        the memory issues and to understand the internals of the Fish Node execution.
      operationId: NodeThisProfilingIndexGet
      tags:
        - Node
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad parameter or conditions
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basic_auth: []

  /api/v1/node/this/profiling/{handler}:
    get:
      summary: Gives profiling data from pprof
      description:
        Shows debug information about heap, goroutines, symbols etc. Very helpful in figuring out
        the memory issues and to understand the internals of the Fish Node execution.
      operationId: NodeThisProfilingGet
      tags:
        - Node
      parameters:
        - name: handler
          in: path
          description: Which pprof handler to use. If empty - will show index
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad parameter or conditions
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basic_auth: []

  /api/v1/servicemapping/:
    get:
      summary: Get list of service mappings
      description: Returns a list of existing ServiceMappings
      operationId: ServiceMappingListGet
      tags:
        - ServiceMapping
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceMapping'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basic_auth: []
    post:
      summary: Create new ServiceMapping
      description: Creates & return the created ServiceMapping
      operationId: ServiceMappingCreatePost
      tags:
        - ServiceMapping
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceMapping'
          application/yaml:
            schema:
              $ref: '#/components/schemas/ServiceMapping'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceMapping'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basic_auth: []

  /api/v1/servicemapping/{uid}:
    get:
      summary: Get ServiceMapping by UID
      description: Returns a single ServiceMapping by it's UID
      operationId: ServiceMappingGet
      tags:
        - ServiceMapping
      parameters:
        - name: uid
          in: path
          description: UID of the object
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceMapping'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: ServiceMapping not found
      security:
        - basic_auth: []
    delete:
      summary: Delete the ServiceMapping by UID
      description: Will remove the ServiceMapping with specified UID
      operationId: ServiceMappingDelete
      tags:
        - ServiceMapping
      parameters:
        - name: uid
          in: path
          description: UID of the object
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
        '400':
          description: Only admin can do that
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: ServiceMapping not found
      security:
        - basic_auth: []

  /meta/v1/data/:
    get:
      summary: Get the ApplicationResource metadata
      description:
        Returns the hash of the ApplicationResource metadata (combined Label and Application metadata)
      operationId: DataGetList
      tags:
        - MetaData
      parameters:
        - name: format
          in: query
          description: Set the return format
          required: false
          schema:
            type: string
            enum:
              - json  # Regular JSON
              - env   # Plain format suitable to use as shell variables
            default: json
        - name: prefix
          in: query
          description: Additional prefix for the key path if `format=env`
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
            application/yaml:
              schema:
                type: object
            text/plain; charset=utf-8:
              schema:
                type: string
        '401':
          description: Not in controlled network or ApplicationResource with IpAddr or HwAddr not found
        '404':
          description: Key path not found

  /meta/v1/data/{key_path}:
    get:
      summary: TODO Get value by key path
      description: Returns a required ApplicationResource metadata key path value
      operationId: DataGet
      tags:
        - MetaData
      parameters:
        - name: key_path
          in: path
          description: Key path of the required value
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: Set the return format
          required: false
          schema:
            type: string
            enum:
              - json  # Regular JSON
              - env   # Plain format suitable to use as shell variables
            default: json
        - name: prefix
          in: query
          description: Additional prefix for the key path if `format=env`
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
            application/yaml:
              schema:
                type: object
            text/plain; charset=utf-8:
              schema:
                type: string
        '401':
          description: Not in controlled network or ApplicationResource with IpAddr or HwAddr not found
        '404':
          description: Key path not found

  /cluster/v1/connect:
    post:
      summary: Connect to the cluster
      description: WebSocket json-based messaging between the cluster nodes
      operationId: ClusterConnect
      tags:
        - Cluster
      responses:
        '200':
          description: The connection is established
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Incorrect request
        '409':
          description: Conflict, the node is already connected to the cluster


components:
  schemas:
    ApplicationUID:
      type: string
      format: uuid
    Application:
      type: object
      description: >
        Allocation request created by the user. Each node votes for the availability to allocate
        the ApplicationResource and the cluster choose which one node will actually do the work.
      required:
        - UID
        - created_at
        - owner_name
        - label_UID
        - metadata
      properties:
        UID:
          $ref: '#/components/schemas/ApplicationUID'
        created_at:
          x-go-type: time.Time
        owner_name:
          # TODO: in OAPI v3.1.0 siblings: $ref: '#/components/schemas/UserName'
          type: string
        label_UID:
          # TODO: in OAPI v3.1.0 siblings: $ref: '#/components/schemas/LabelUID'
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            yaml: label_UID
        metadata:
          x-go-type: util.UnparsedJSON
          description: Additional metadata in JSON format (can't override Label metadata)
          example:
            JENKINS_URL: 'http://172.16.1.1:8085/'
            JENKINS_AGENT_SECRET: 03839eabcf945b1e780be8f9488d264c4c57bf388546da9a84588345555f29b0
            JENKINS_AGENT_NAME: test-node

    ApplicationStateUID:
      type: string
      format: uuid
    ApplicationStatus:
      type: string
      enum:
        - NEW          # The Application just created (active)
        - ELECTED      # Node is elected during the voting process (active)
        - ALLOCATED    # The ApplicationResource is allocated and starting up (active)
        - DEALLOCATE   # User requested the Application deallocate (not active)
        - RECALLED     # User requested the Application deallocate, but it was not allocated (not active)
        - DEALLOCATED  # The ApplicationResource is deallocated (not active)
        - ERROR        # The error happened (not active)
    ApplicationState:
      type: object
      description: >
        The state of the Application - it goes through graph of states, so this object stores the
        info when the Application comes to this state and the last one describes the current state
        of the Application.
      required:
        - UID
        - created_at
        - application_UID
        - status
        - description
      properties:
        UID:
          $ref: '#/components/schemas/ApplicationStateUID'
        created_at:
          x-go-type: time.Time
        application_UID:
          # TODO: in OAPI v3.1.0 siblings: $ref: '#/components/schemas/ApplicationUID'
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            yaml: application_UID
        status:
          $ref: '#/components/schemas/ApplicationStatus'
        description:
          type: string
          description: Additional information for the state

    ApplicationTaskUID:
      type: string
      format: uuid
    ApplicationTask:
      type: object
      description: >
        Is needed to execute some sort of async action on the Application. For example snapshot
        operation, because the request could get from anywhere. Usually app tasks are not a part of
        standard Application state graph and could be not executed if the Applicationresource is
        destroyed.

        Results are filled by the executor of the task and really depends on what kind of operation
        is executed and really depends on the driver - it could support the task or not.

        It could be created by any Node but updated by the one which won the Application execution.
      required:
        - UID
        - created_at
        - updated_at
        - application_UID
        - task
        - when
        - options
        - result
      properties:
        UID:
          $ref: '#/components/schemas/ApplicationTaskUID'
        created_at:
          x-go-type: time.Time
        updated_at:
          x-go-type: time.Time
        application_UID:
          # TODO: in OAPI v3.1.0 siblings: $ref: '#/components/schemas/ApplicationUID'
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            yaml: application_UID
        task:
          type: string
          description: Identifier of the task
        when:
          $ref: '#/components/schemas/ApplicationStatus'
          description: |
            Used to specify when the task should be executed, right now only ALLOCATED, DEALLOCATE
            and RECALLED (when app is already here) are supported.
        options:
          x-go-type: util.UnparsedJSON
          description: JSON object with additional options
        result:
          x-go-type: util.UnparsedJSON
          description: JSON object with the results of task execution

    UserName:
      type: string
    User:
      type: object
      description: >
        Contains limits and hash to login, name is unique, `admin` created during the first cluster
        start and prints it to stderr.

        Could be created by any node and updated by any node.
      required:
        - name
        - created_at
        - updated_at
        - hash
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        created_at:
          x-go-type: time.Time
        updated_at:
          x-go-type: time.Time
        hash:
          x-go-type: crypt.Hash

    UserAPIPassword:
      type: object
      description: >
        Purely API-only special user object to use during User create operation - it allows to set
        the required user password or receive the automatically generated one.
      required:
        - name
        - created_at
        - updated_at
        - password
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        created_at:
          x-go-type: time.Time
        updated_at:
          x-go-type: time.Time
        password:
          type: string
          description: Clear-text password to set for new user or to get the autogenerated one
        hash:
          x-go-type: crypt.Hash

    LabelUID:
      type: string
      format: uuid
    LabelDefinitions:
      type: array
      items:
        $ref: '#/components/schemas/LabelDefinition'
      description: |
        List of label definitions that describes required resources, driver and it's options.
        The order is sequential - so the priority is to the first driver and if it's not
        available than the next definitions will be used.
      example:
        - driver: vmx
          resources:
            cpu: 16
            ram: 20
            disks:
              vs2019:
                type: exfat
                size: 100
                reuse: true
            network: nat
          options:
            image: winserver2019-vs2019-ci
            images:
              winserver2019: 'https://artifact-storage/aquarium/image/vmx/winserver2019/winserver2019-VERSION.tar.xz'
              winserver2019-vs2019: 'https://artifact-storage/aquarium/image/vmx/winserver2019-vs2019/winserver2019-vs2019-VERSION.tar.xz'
              winserver2019-vs2019-ci: 'https://artifact-storage/aquarium/image/vmx/winserver2019-vs2019-ci/winserver2019-vs2019-ci-VERSION.tar.xz'
        - driver: aws
          resources:
            cpu: 16
            ram: 32
            disks:
              xvdb:
                size: 100
            network: Name:build-vpc
          options:
            image: aquarium/winserver2019-vs2019-ci-VERSION
            instance_type: c6a.4xlarge
            security_group: jenkins-worker-win
            userdata_format: ps1
    LabelDefinition:
      type: object
      description: >
        Describes Label's ways to provide aa ApplciationResource - it contains name of the driver,
        it's resource and additional options.
      required:
        - driver
        - resources
        - options
      properties:
        driver:
          type: string
          description: Name of the driver to execute
        resources:
          $ref: '#/components/schemas/Resources'
          description: Resources Driver need to provide for the Label execution
        options:
          x-go-type: util.UnparsedJSON
          description: Driver-specific options to execute the environment
        authentication:
          $ref: '#/components/schemas/Authentication'
          description: Authentication information to connect.
    Label:
      type: object
      description: >
        This one filled by the cluster admin, depends on the needs. Labels could be defined in
        different drivers and the priority is sequential. Version could be used during request and
        by default is the latest.

        Label - is one of the most important part of the system, because it makes the resources
        reproducible in time. Definitions contains the driver name and configuration, so can be
        started again and again as much times we need. Versions make possible to update the labels
        and store the old ones in case we need to run the same environment 10y from now and rebuild
        the old code revision for example.

        Labels can't be updated. Once they are stored - they are here to keep the history of
        environements and make possible to mark build with the specified label version in order to
        be able to reproduce it later. Also labels can be implemented just by one or multiple
        drivers. Sometimes it's useful to switch to another provider in case the previous ones are
        not available or completely used.
      required:
        - UID
        - created_at
        - name
        - version
        - driver
        - definitions
        - metadata
      properties:
        UID:
          $ref: '#/components/schemas/LabelUID'
        created_at:
          x-go-type: time.Time
        name:
          type: string
          description: Simple name to identify the Label
          example: xcode12.2
        version:
          type: integer
          description: >
            In order to update the labels freely and save the previous Label state for the past
            builds.
        definitions:
          $ref: '#/components/schemas/LabelDefinitions'
        metadata:
          x-go-type: util.UnparsedJSON
          description: Basic metadata to pass to the ApplicationResource
          example:
            JENKINS_AGENT_WORKSPACE: D:\

    Resources:
      type: object
      description: >
        It's used for 2 purposes, in Label definitions to describe the required amount of resources
        and in Fish to store the currently used resources, so could add and subtract resources.

        Modificators are used for parallel node usage by different Applications, they are stored
        for the first Application and used for the others to determine node tenancy/overbook
        tolerance.

        Different drivers uses it in different ways to provide quite similar functionality, so it's
        a good idea to check the driver's wiki page to get some clue on how to create Label def.
      required:
        - cpu
        - ram
        - disks
        - network
        - node_filter
        - multitenancy
        - cpu_overbook
        - ram_overbook
        - lifetime
      properties:
        slots:
          x-go-type: uint
          type: integer
          minimum: 0
          description: Global amount of slots to be filled with ApplicationResources
        cpu:
          x-go-type: uint
          type: integer
          minimum: 0
          description: Amount of vCPUs (logical CPU with HT enabled will have 2 per core)
        ram:
          x-go-type: uint
          type: integer
          minimum: 0
          description: Amount of RAM in GB
        disks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourcesDisk'
        network:
          type: string
          description: Which network configuration to use for the environment
        node_filter:
          type: array
          items:
            type: string
          description: The list of the Node identifiers to run resource on, supports path wildcards
          example:
            - OS:darwin
            - OSVersion:12.*
            - Arch:x86_64
        multitenancy:
          type: boolean
          description: Tolerate to run along with the other envs on the same node
        cpu_overbook:
          type: boolean
          description: Tolerate to node CPU overbooking when executed together with other envs
        ram_overbook:
          type: boolean
          description: Tolerate to RAM overbooking when executed together with other envs
        lifetime:
          type: string
          description: |
            Total lifetime of the ApplicationResource in Time Duration (ex. "1h30m30s"). Begins on
            ApplicationResource create time till deallocate by user or auto deallocate by timeout.
            If it's empty or "0" then default value from fish node config will be used. If it's
            negative (ex. "-1s") then the ApplicationResource will live forever or until the user
            requests deallocate.

    ResourcesDisk:
      type: object
      description: Defines disk to attach/clone...
      required:
        - type
        - label
        - size
        - reuse
        - clone
      properties:
        type:
          type: string
          description: Type of the filesystem to create
        label:
          type: string
          description: Volume name will be given to the disk, empty will use the disk key
        size:
          x-go-type: uint
          type: integer
          minimum: 0
          description: Amount of disk space in GB for new disk, could not used if clone is set
        reuse:
          type: boolean
          description: Do not remove the disk and reuse it for the next resource run
        clone:
          type: string
          description: Clone the snapshot of existing disk instead of creating the new one

    NodeUID:
      type: string
      format: uuid
    Node:
      type: object
      description: >
        Each node need to report it's status and ensure there is no duplications and to perform the
        cluster worker election process properly.

        Could be created by the node itself and updated by the same node.
      required:
        - UID
        - created_at
        - updated_at
        - name
        - definition
        - location
        - address
      properties:
        UID:
          $ref: '#/components/schemas/NodeUID'
        created_at:
          x-go-type: time.Time
        updated_at:
          x-go-type: time.Time
          description: This field is used as ping, so the cluster knows the Node is alive.
        name:
          type: string
          x-oapi-codegen-extra-tags:
            gorm: unique
          description: Unique name of the Node
        definition:
          $ref: '#/components/schemas/NodeDefinition'
        location:
          # TODO: in OAPI v3.1.0 siblings: $ref: '#/components/schemas/LocationName'
          type: string
          description: Where the Node is located
        address:
          type: string
          description: External address to reach the Node from outside
        pubkey:
          type: string
          format: byte
          x-oapi-codegen-extra-tags:
            gorm: unique
          description: The node public key to verify on secondary connections and signatures

    NodeDefinition:
      type: object
      description: Contains technical information about the node
      required:
        - cpu
        - disks
        - nets
      properties:
        host:
          x-go-type: host.InfoStat
          x-omitempty: false
        memory:
          x-go-type: mem.VirtualMemoryStat
          x-omitempty: false
        cpu:
          type: array
          items:
            x-go-type: cpu.InfoStat
        disks:
          x-go-type: 'map[string]*disk.UsageStat'
        nets:
          type: array
          items:
            x-go-type: net.InterfaceStat

    ApplicationResourceUID:
      type: string
      format: uuid
    ApplicationResource:
      type: object
      description: >
        Managed instance definition to be able to properly restore the state during the cluster
        node restart. Also contains additional info about the instance, for example user requested
        metadata, which is available for the instance through the `Meta API`.

        Could be created and updated only by the node which won the Application execution.
      required:
        - UID
        - created_at
        - updated_at
        - application_UID
        - node_UID
        - label_UID
        - definition_index
        - identifier
        - ip_addr
        - hw_addr
        - metadata
      properties:
        UID:
          $ref: '#/components/schemas/ApplicationResourceUID'
        created_at:
          x-go-type: time.Time
        updated_at:
          x-go-type: time.Time
        application_UID:
          # TODO: in OAPI v3.1.0 siblings: $ref: '#/components/schemas/ApplicationUID'
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            yaml: application_UID
        node_UID:
          # TODO: in OAPI v3.1.0 siblings: $ref: '#/components/schemas/NodeUID'
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            yaml: node_UID
        label_UID:
          # TODO: in OAPI v3.1.0 siblings: $ref: '#/components/schemas/LabelUID'
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            yaml: label_UID
        definition_index:
          type: integer
        identifier:
          type: string
          description: |
            Unique for driver identifier of the instance which can be used to find it later.
        ip_addr:
          type: string
          description: >
            Is a weak current network IP address of the instance, usually gathered based on the
            `hw_addr`.
        hw_addr:
          type: string
          description: >
            MAC or any other type of network address which will allow to properly identify the node
            through network interaction.
        metadata:
          x-go-type: util.UnparsedJSON
          description: >
            Combined Application and Label metadata (in this order) to make it available through
            `Meta API` to the instance.
          example:
            JENKINS_URL: 'http://172.16.1.1:8085/'
            JENKINS_AGENT_SECRET: 03839eabcf945b1e780be8f9488d264c4c57bf388546da9a84588345555f29b0
            JENKINS_AGENT_NAME: test-node
            JENKINS_AGENT_WORKSPACE: /Volumes/xcode122
        authentication:
          $ref: '#/components/schemas/Authentication'
          description: Authentication information to connect.
        timeout:
          x-go-type: time.Time
          description: Calculated during allocation time of when the Resource have to die anyway

    ApplicationResourceAccessUID:
      type: string
      format: uuid
    ApplicationResourceAccess:
      type: object
      description: >
        An accessor entry to be able to identify and look up different
        (currently running) resources.

        Used to enable SSH pass-through.
      required:
        - UID
        - created_at
        - application_resource_UID
        - address
        - username
        - password
        - key
      properties:
        UID:
          $ref: '#/components/schemas/ApplicationResourceAccessUID'
        created_at:
          x-go-type: time.Time
        application_resource_UID:
          # TODO: in OAPI v3.1.0 siblings: $ref: '#/components/schemas/ApplicationResourceAccessUID'
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            yaml: application_resource_UID
        address:
          type: string
          description: |
            Address (host:port) to help user to connect to right proxyssh.
        username:
          type: string
          description: |
            The username to use when logging into the fish node.
        password:
          type: string
          description: >
            The password to use when logging into the fish node.
        key:
          type: string
          description: >
            SSH key could be used instead of password to access the system.

    Authentication:
      type: object
      description: >
        Authentication information to enable connecting to the machine.
      required:
        - username
        - password
        - key
        - port
      properties:
        username:
          type: string
          description: |
            The username to login into the ApplicationResource.
        password:
          type: string
          description: >
            The password to login into the ApplicationResource.
        key:
          type: string
          description: >
            SSH private key to use instead of password to login into the ApplicationResource.
        port:
          type: integer
          description: >
            TCP port to connect with SSH client.

    VoteUID:
      type: string
      format: uuid
    Vote:
      type: object
      description: >
        When Application becomes available for the node it starts to vote to notify the cluster
        about its availability. Votes are basically "yes" or "no" and could take a number of rounds
        depends on the cluster voting and election rules.
        Votes are not stored in DB and lives only in-memory.
      required:
        - UID
        - created_at
        - application_UID
        - node_UID
        - round
        - available
        - rule_result
        - rand
      properties:
        UID:
          $ref: '#/components/schemas/VoteUID'
        created_at:
          x-go-type: time.Time
        application_UID:
          # TODO: in OAPI v3.1.0 siblings: $ref: '#/components/schemas/ApplicationUID'
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            yaml: application_UID
        node_UID:
          # TODO: in OAPI v3.1.0 siblings: $ref: '#/components/schemas/NodeUID'
          type: string
          format: uuid
          x-oapi-codegen-extra-tags:
            yaml: node_UID
        round:
          x-go-type: uint16
          description: >
            Round of the election, because it can take a number of rounds to figure out the Only
            One.
        available:
          type: integer
          description: >
            Node places answer to the Vote for the Application's definitions, the number represents
            the first available index of the definition which fits the node available resources. In
            case it's `-1` then node can't run any of the definitions.
        rule_result:
          x-go-type: uint32
          description: The custom rule result is needed to store the custom rule decision
        rand:
          x-go-type: uint32
          description: The last resort to figure out for the winner.

    ServiceMappingUID:
      type: string
      format: uuid
    ServiceMapping:
      type: object
      description: >
        Used to properly define the allowed external services and possible redirects for them (
        useful when needed to achive proper bottleneck-free DR). The structure allows to make query
        with finding the most relevant value based on application and location, in case there is no
        specific values - the cluster defaults could be used.
      required:
        - UID
        - created_at
        - location
        - service
        - redirect
        - application_UID
      properties:
        UID:
          $ref: '#/components/schemas/ServiceMappingUID'
        created_at:
          x-go-type: time.Time
        service:
          type: string
          description: FQDN or IP address of the requested service
          x-oapi-codegen-extra-tags:
            gorm: uniqueIndex:idx_location_service_app_uniq
        redirect:
          type: string
          description: FQDN or IP address of where to rediect the service request
        location:
          # TODO: in OAPI v3.1.0 siblings: $ref: '#/components/schemas/LocationName'
          type: string
          x-oapi-codegen-extra-tags:
            gorm: uniqueIndex:idx_location_service_app_uniq
        application_UID:
          # TODO: in OAPI v3.1.0 siblings: $ref: '#/components/schemas/ApplicationUID'
          type: string
          format: uuid
          description: Optional, if need to override the cluster-wide redirects
          x-oapi-codegen-extra-tags:
            yaml: application_UID
            gorm: uniqueIndex:idx_location_service_app_uniq

  securitySchemes:
    basic_auth:
      type: http
      scheme: basic

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
