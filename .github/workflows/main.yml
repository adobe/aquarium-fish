name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  CodeQL:
    name: CodeQL validation
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  GolangCI:
    runs-on: ubuntu-latest
    name: Code Lint
    permissions:
      # Required: allow read access to the content for analysis.
      contents: read
      # Optional: allow write access to checks to allow the action to annotate code in the PR.
      checks: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod

      - name: Generate code
        run: ONLYGEN=1 ./build.sh

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64.5

  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # To get all the tags for versioning

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build
        run: RELEASE=1 ./build.sh

      - name: Checking no files in git were changed during the build
        run: |
          if [ "x$(git status -s)" != 'x' ]; then
            echo 'Build modified the workspace, please fix or add to gitignore list:'
            git status
            exit 1
          fi

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: aquarium-fish*.tar.xz

  Tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # To get all the tags for versioning

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      # Debug build here is needed to prepare a debug race instrumented version of the binary
      - name: Build
        run: ./build.sh

      - name: Integration Tests
        run: >
          go test -json -v -parallel 4 -count=1 -skip '_stress$' -race ./tests/... 2>&1 |
            tee integration_tests_report.full.log |
            go run ./tools/go-test-formatter/go-test-formatter.go -stdout_timestamp test -stdout_color
              -stdout_filter failed -junit integration_tests_report.xml -junit_truncate 4000
              -junit_filter failed -junit_timestamp test

      - name: Pack failed tests workspaces
        if: failure()
        run: |
          target_dir="$PWD"
          cd /tmp
          tar -czf "$target_dir/integration_tests_ws.tar.gz" fish*

      - name: Benchmarks main
        run: go run go.bobheadxi.dev/gobenchdata@v1 action
        if: github.ref == 'refs/heads/main'
        env:
          INPUT_PUBLISH: true
          INPUT_CHECKS: true
          INPUT_PRUNE_COUNT: 30
          INPUT_GO_TEST_FLAGS: "-run=^# -cpu 1,2 -benchmem"
          INPUT_CHECKS_CONFIG: gobenchdata-checks.yml
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: Benchmarks PR
        run: go run go.bobheadxi.dev/gobenchdata@v1 action
        if: github.ref != 'refs/heads/main'
        env:
          INPUT_PUBLISH: false
          INPUT_CHECKS: true
          INPUT_PRUNE_COUNT: 30
          INPUT_GO_TEST_FLAGS: "-run=^# -cpu 1,2 -benchmem"
          INPUT_CHECKS_CONFIG: gobenchdata-checks.yml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tests
          path: |
            /tmp/gobenchdata/*
            integration_tests_ws.tar.gz
            integration_tests_report.full.log
            integration_tests_report.xml

      - name: Test Summary
        uses: test-summary/action@v2
        if: always()
        with:
          paths: integration_tests_report.xml
